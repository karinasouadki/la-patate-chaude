{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1","program":"/Users/kong/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","hashbrown","--edition=2021","/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"raw\"","-C","metadata=002edd394fd82971","-C","extra-filename=-002edd394fd82971","--out-dir","/Users/kong/Study/S2/Rust/group_project/la-patate-chaude/client/target/rls/debug/deps","-L","dependency=/Users/kong/Study/S2/Rust/group_project/la-patate-chaude/client/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/kong/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/kong/Study/S2/Rust/group_project/la-patate-chaude/client/target/rls/debug/deps/libhashbrown-002edd394fd82971.rmeta"},"prelude":{"crate_id":{"name":"hashbrown","disambiguator":[664557774046542605,0]},"crate_root":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src","external_crates":[{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16249227214258238047,0]}},{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13791225915815425008,0]}},{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[455111089362928276,0]}},{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[740641686899810413,0]}}],"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":0,"byte_end":4306,"line_start":1,"line_end":150,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":1725,"byte_end":1726,"line_start":63,"line_end":63,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"RawTable, Global, RawIter, Allocator, RawDrain, Bucket, RawIntoIter","parent":{"krate":0,"index":8}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":2357,"byte_end":2358,"line_start":87,"line_end":87,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2104}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":2912,"byte_end":2913,"line_start":104,"line_end":104,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2106}},{"kind":"Use","ref_id":{"krate":0,"index":568},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":3295,"byte_end":3302,"line_start":117,"line_end":117,"column_start":21,"column_end":28},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1709},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":3324,"byte_end":3331,"line_start":118,"line_end":118,"column_start":21,"column_end":28},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":0,"byte_end":4306,"line_start":1,"line_end":150,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":1608},{"krate":0,"index":1637},{"krate":0,"index":2104},{"krate":0,"index":2106},{"krate":0,"index":2108},{"krate":0,"index":2111},{"krate":0,"index":2189},{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2200},{"krate":0,"index":2201},{"krate":0,"index":2203}],"decl_id":null,"docs":" This crate is a Rust port of Google's high-performance [SwissTable] hash\n map, adapted to make it a drop-in replacement for Rust's standard `HashMap`\n and `HashSet` types.","sig":null,"attributes":[{"value":"/ This crate is a Rust port of Google's high-performance [SwissTable] hash","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ map, adapted to make it a drop-in replacement for Rust's standard `HashMap`","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":77,"byte_end":156,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ and `HashSet` types.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":157,"byte_end":181,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":182,"byte_end":185,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The original C++ version of [SwissTable] can be found [here], and this","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":186,"byte_end":260,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/ [CppCon talk] gives an overview of how the algorithm works.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":261,"byte_end":324,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":325,"byte_end":328,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [SwissTable]: https://abseil.io/blog/20180927-swisstables","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":329,"byte_end":390,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":391,"byte_end":490,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":491,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":555,"byte_end":565,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nmust_use_candidate, clippy :: option_if_let_else, clippy :: redundant_else,\nclippy :: manual_map, clippy :: missing_safety_doc, clippy ::\nmissing_errors_doc)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":899,"byte_end":1153,"line_start":28,"line_end":37,"column_start":1,"column_end":3}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":1154,"byte_end":1176,"line_start":38,"line_end":38,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":1177,"byte_end":1203,"line_start":39,"line_end":39,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":1553,"byte_end":1556,"line_start":58,"line_end":58,"column_start":9,"column_end":12},"name":"raw","qualname":"::raw","value":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":506}],"decl_id":null,"docs":" Experimental and unsafe `RawTable` API. This module is only available if the\n `raw` feature is enabled.\n","sig":null,"attributes":[{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":1410,"byte_end":1433,"line_start":55,"line_end":55,"column_start":1,"column_end":24}},{"value":"/ Experimental and unsafe `RawTable` API. This module is only available if the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":1434,"byte_end":1514,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/ `raw` feature is enabled.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":1515,"byte_end":1544,"line_start":57,"line_end":57,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":73},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/alloc.rs","byte_start":94589,"byte_end":94598,"line_start":37,"line_end":37,"column_start":22,"column_end":31},"name":"Allocator","qualname":"::raw::inner::alloc::inner::Allocator","value":"Allocator","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/alloc.rs","byte_start":94494,"byte_end":94530,"line_start":36,"line_end":36,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/alloc.rs","byte_start":94612,"byte_end":94620,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"allocate","qualname":"::raw::inner::alloc::inner::Allocator::allocate","value":"pub fn allocate(&Self, Layout) -> Result<NonNull<u8>, ()>","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/alloc.rs","byte_start":94690,"byte_end":94700,"line_start":39,"line_end":39,"column_start":19,"column_end":29},"name":"deallocate","qualname":"::raw::inner::alloc::inner::Allocator::deallocate","value":"pub unsafe fn deallocate(&Self, NonNull<u8>, Layout)","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2162},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/alloc.rs","byte_start":94792,"byte_end":94798,"line_start":43,"line_end":43,"column_start":16,"column_end":22},"name":"Global","qualname":"::raw::inner::alloc::inner::Global","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":161},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":15525,"byte_end":15531,"line_start":279,"line_end":279,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::raw::inner::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":163}],"decl_id":null,"docs":" A reference to a hash table bucket containing a `T`.","sig":null,"attributes":[{"value":"/ A reference to a hash table bucket containing a `T`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":15262,"byte_end":15318,"line_start":274,"line_end":274,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":15319,"byte_end":15322,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ This is usually just a pointer to the element itself. However if the element","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":15323,"byte_end":15403,"line_start":276,"line_end":276,"column_start":1,"column_end":81}},{"value":"/ is a ZST, then we instead track the index of the element in the table so","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":15404,"byte_end":15480,"line_start":277,"line_end":277,"column_start":1,"column_end":77}},{"value":"/ that `erase` works properly.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":15481,"byte_end":15513,"line_start":278,"line_end":278,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":16744,"byte_end":16750,"line_start":320,"line_end":320,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Bucket<T>>::as_ptr","value":"pub fn as_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":16723,"byte_end":16732,"line_start":319,"line_end":319,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17399,"byte_end":17403,"line_start":340,"line_end":340,"column_start":19,"column_end":23},"name":"drop","qualname":"<Bucket<T>>::drop","value":"pub unsafe fn drop(&Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17490,"byte_end":17494,"line_start":344,"line_end":344,"column_start":19,"column_end":23},"name":"read","qualname":"<Bucket<T>>::read","value":"pub unsafe fn read(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17462,"byte_end":17471,"line_start":343,"line_end":343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17576,"byte_end":17581,"line_start":348,"line_end":348,"column_start":19,"column_end":24},"name":"write","qualname":"<Bucket<T>>::write","value":"pub unsafe fn write(&Self, T)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17548,"byte_end":17557,"line_start":347,"line_end":347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17671,"byte_end":17677,"line_start":352,"line_end":352,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Bucket<T>>::as_ref","value":"pub unsafe fn as_ref<'a>(&Self) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17643,"byte_end":17652,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17762,"byte_end":17768,"line_start":356,"line_end":356,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Bucket<T>>::as_mut","value":"pub unsafe fn as_mut<'a>(&Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17734,"byte_end":17743,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17889,"byte_end":17913,"line_start":361,"line_end":361,"column_start":19,"column_end":43},"name":"copy_from_nonoverlapping","qualname":"<Bucket<T>>::copy_from_nonoverlapping","value":"pub unsafe fn copy_from_nonoverlapping(&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17833,"byte_end":17856,"line_start":359,"line_end":359,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":17861,"byte_end":17870,"line_start":360,"line_end":360,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":183},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":18065,"byte_end":18073,"line_start":367,"line_end":367,"column_start":12,"column_end":20},"name":"RawTable","qualname":"::raw::inner::RawTable","value":"RawTable {  }","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187}],"decl_id":null,"docs":" A raw hash table with an unsafe API.\n","sig":null,"attributes":[{"value":"/ A raw hash table with an unsafe API.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":18013,"byte_end":18053,"line_start":366,"line_end":366,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19243,"byte_end":19246,"line_start":400,"line_end":400,"column_start":18,"column_end":21},"name":"new","qualname":"<RawTable<T, Global>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash table without allocating any memory.","sig":null,"attributes":[{"value":"/ Creates a new empty hash table without allocating any memory.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":18902,"byte_end":18967,"line_start":394,"line_end":394,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":18972,"byte_end":18975,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ In effect this returns a table with exactly 1 bucket. However we can","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":18980,"byte_end":19052,"line_start":396,"line_end":396,"column_start":5,"column_end":77}},{"value":"/ leave the data pointer dangling since that bucket is never written to","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19057,"byte_end":19130,"line_start":397,"line_end":397,"column_start":5,"column_end":78}},{"value":"/ due to our load factor forcing us to always have at least 1 free bucket.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19135,"byte_end":19211,"line_start":398,"line_end":398,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19216,"byte_end":19225,"line_start":399,"line_end":399,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19562,"byte_end":19579,"line_start":410,"line_end":410,"column_start":12,"column_end":29},"name":"try_with_capacity","qualname":"<RawTable<T, Global>>::try_with_capacity","value":"pub fn try_with_capacity(usize) -> Result<Self, TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to allocate a new hash table with at least enough capacity\n for inserting the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Attempts to allocate a new hash table with at least enough capacity","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19378,"byte_end":19449,"line_start":407,"line_end":407,"column_start":5,"column_end":76}},{"value":"/ for inserting the given number of elements without reallocating.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19454,"byte_end":19522,"line_start":408,"line_end":408,"column_start":5,"column_end":73}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19527,"byte_end":19550,"line_start":409,"line_end":409,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19841,"byte_end":19854,"line_start":416,"line_end":416,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<RawTable<T, Global>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new hash table with at least enough capacity for inserting\n the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Allocates a new hash table with at least enough capacity for inserting","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19696,"byte_end":19770,"line_start":414,"line_end":414,"column_start":5,"column_end":79}},{"value":"/ the given number of elements without reallocating.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19775,"byte_end":19829,"line_start":415,"line_end":415,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":20361,"byte_end":20367,"line_start":429,"line_end":429,"column_start":12,"column_end":18},"name":"new_in","qualname":"<RawTable<T, A>>::new_in","value":"pub fn new_in(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash table without allocating any memory, using the\n given allocator.","sig":null,"attributes":[{"value":"/ Creates a new empty hash table without allocating any memory, using the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19991,"byte_end":20066,"line_start":422,"line_end":422,"column_start":5,"column_end":80}},{"value":"/ given allocator.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":20071,"byte_end":20091,"line_start":423,"line_end":423,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":20096,"byte_end":20099,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ In effect this returns a table with exactly 1 bucket. However we can","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":20104,"byte_end":20176,"line_start":425,"line_end":425,"column_start":5,"column_end":77}},{"value":"/ leave the data pointer dangling since that bucket is never written to","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":20181,"byte_end":20254,"line_start":426,"line_end":426,"column_start":5,"column_end":78}},{"value":"/ due to our load factor forcing us to always have at least 1 free bucket.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":20259,"byte_end":20335,"line_start":427,"line_end":427,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":20340,"byte_end":20349,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":21910,"byte_end":21930,"line_start":479,"line_end":479,"column_start":12,"column_end":32},"name":"try_with_capacity_in","qualname":"<RawTable<T, A>>::try_with_capacity_in","value":"pub fn try_with_capacity_in(usize, A) -> Result<Self, TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to allocate a new hash table using the given allocator, with at least enough\n capacity for inserting the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Attempts to allocate a new hash table using the given allocator, with at least enough","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":21699,"byte_end":21788,"line_start":476,"line_end":476,"column_start":5,"column_end":94}},{"value":"/ capacity for inserting the given number of elements without reallocating.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":21793,"byte_end":21870,"line_start":477,"line_end":477,"column_start":5,"column_end":82}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":21875,"byte_end":21898,"line_start":478,"line_end":478,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":22253,"byte_end":22269,"line_start":485,"line_end":485,"column_start":12,"column_end":28},"name":"with_capacity_in","qualname":"<RawTable<T, A>>::with_capacity_in","value":"pub fn with_capacity_in(usize, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new hash table using the given allocator, with at least enough capacity for\n inserting the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Allocates a new hash table using the given allocator, with at least enough capacity for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":22081,"byte_end":22172,"line_start":483,"line_end":483,"column_start":5,"column_end":96}},{"value":"/ inserting the given number of elements without reallocating.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":22177,"byte_end":22241,"line_start":484,"line_end":484,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":22664,"byte_end":22673,"line_start":495,"line_end":495,"column_start":12,"column_end":21},"name":"allocator","qualname":"<RawTable<T, A>>::allocator","value":"pub fn allocator(&Self) -> &A","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying allocator.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying allocator.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":22586,"byte_end":22638,"line_start":493,"line_end":493,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":22643,"byte_end":22652,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":23032,"byte_end":23040,"line_start":507,"line_end":507,"column_start":19,"column_end":27},"name":"data_end","qualname":"<RawTable<T, A>>::data_end","value":"pub unsafe fn data_end(&Self) -> NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns pointer to one past last element of data table.\n","sig":null,"attributes":[{"value":"/ Returns pointer to one past last element of data table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":22940,"byte_end":22999,"line_start":505,"line_end":505,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":23004,"byte_end":23013,"line_start":506,"line_end":506,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":23433,"byte_end":23445,"line_start":520,"line_end":520,"column_start":19,"column_end":31},"name":"bucket_index","qualname":"<RawTable<T, A>>::bucket_index","value":"pub unsafe fn bucket_index(&Self, &Bucket<T>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of a bucket from a `Bucket`.\n","sig":null,"attributes":[{"value":"/ Returns the index of a bucket from a `Bucket`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":23350,"byte_end":23400,"line_start":518,"line_end":518,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":23405,"byte_end":23414,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":23623,"byte_end":23629,"line_start":526,"line_end":526,"column_start":19,"column_end":25},"name":"bucket","qualname":"<RawTable<T, A>>::bucket","value":"pub unsafe fn bucket(&Self, usize) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to an element in the table.\n","sig":null,"attributes":[{"value":"/ Returns a pointer to an element in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":23541,"byte_end":23590,"line_start":524,"line_end":524,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":23595,"byte_end":23604,"line_start":525,"line_end":525,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":24031,"byte_end":24044,"line_start":535,"line_end":535,"column_start":19,"column_end":32},"name":"erase_no_drop","qualname":"<RawTable<T, A>>::erase_no_drop","value":"pub unsafe fn erase_no_drop(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table without dropping it.\n","sig":null,"attributes":[{"value":"/ Erases an element from the table without dropping it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":23833,"byte_end":23890,"line_start":532,"line_end":532,"column_start":5,"column_end":62}},{"value":"deprecated(since = \"0.8.1\", note = \"use erase or remove instead\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":23944,"byte_end":24012,"line_start":534,"line_end":534,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":24362,"byte_end":24367,"line_start":544,"line_end":544,"column_start":19,"column_end":24},"name":"erase","qualname":"<RawTable<T, A>>::erase","value":"pub unsafe fn erase(&mut Self, Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table, dropping it in place.\n","sig":null,"attributes":[{"value":"/ Erases an element from the table, dropping it in place.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":24165,"byte_end":24224,"line_start":540,"line_end":540,"column_start":5,"column_end":64}},{"value":"allow(clippy :: needless_pass_by_value)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":24278,"byte_end":24318,"line_start":542,"line_end":542,"column_start":5,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":24323,"byte_end":24343,"line_start":543,"line_end":543,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":24743,"byte_end":24754,"line_start":554,"line_end":554,"column_start":12,"column_end":23},"name":"erase_entry","qualname":"<RawTable<T, A>>::erase_entry","value":"pub fn erase_entry<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&mut Self, u64, impl FnMut(&T) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds and erases an element from the table, dropping it in place.\n Returns true if an element was found.\n","sig":null,"attributes":[{"value":"/ Finds and erases an element from the table, dropping it in place.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":24539,"byte_end":24608,"line_start":550,"line_end":550,"column_start":5,"column_end":74}},{"value":"/ Returns true if an element was found.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":24613,"byte_end":24654,"line_start":551,"line_end":551,"column_start":5,"column_end":46}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":24659,"byte_end":24682,"line_start":552,"line_end":552,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":25259,"byte_end":25265,"line_start":570,"line_end":570,"column_start":19,"column_end":25},"name":"remove","qualname":"<RawTable<T, A>>::remove","value":"pub unsafe fn remove(&mut Self, Bucket<T>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the table, returning it.\n","sig":null,"attributes":[{"value":"/ Removes an element from the table, returning it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":25069,"byte_end":25121,"line_start":566,"line_end":566,"column_start":5,"column_end":57}},{"value":"allow(clippy :: needless_pass_by_value)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":25175,"byte_end":25215,"line_start":568,"line_end":568,"column_start":5,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":25220,"byte_end":25240,"line_start":569,"line_end":569,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":25490,"byte_end":25502,"line_start":577,"line_end":577,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawTable<T, A>>::remove_entry","value":"pub fn remove_entry<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&mut Self, u64, impl FnMut(&T) -> bool) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Finds and removes an element from the table, returning it.\n","sig":null,"attributes":[{"value":"/ Finds and removes an element from the table, returning it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":25367,"byte_end":25429,"line_start":575,"line_end":575,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":25905,"byte_end":25918,"line_start":587,"line_end":587,"column_start":12,"column_end":25},"name":"clear_no_drop","qualname":"<RawTable<T, A>>::clear_no_drop","value":"pub fn clear_no_drop(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Marks all table buckets as empty without dropping their contents.\n","sig":null,"attributes":[{"value":"/ Marks all table buckets as empty without dropping their contents.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":25775,"byte_end":25844,"line_start":585,"line_end":585,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":26115,"byte_end":26120,"line_start":593,"line_end":593,"column_start":12,"column_end":17},"name":"clear","qualname":"<RawTable<T, A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the table without freeing the backing memory.\n","sig":null,"attributes":[{"value":"/ Removes all elements from the table without freeing the backing memory.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":25979,"byte_end":26054,"line_start":591,"line_end":591,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":26670,"byte_end":26679,"line_start":611,"line_end":611,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<RawTable<T, A>>::shrink_to","value":"pub fn shrink_to<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, usize, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the table to fit `max(self.len(), min_size)` elements.\n","sig":null,"attributes":[{"value":"/ Shrinks the table to fit `max(self.len(), min_size)` elements.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":26543,"byte_end":26609,"line_start":609,"line_end":609,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":28207,"byte_end":28214,"line_start":649,"line_end":649,"column_start":12,"column_end":19},"name":"reserve","qualname":"<RawTable<T, A>>::reserve","value":"pub fn reserve<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, usize, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that at least `additional` items can be inserted into the table\n without reallocation.\n","sig":null,"attributes":[{"value":"/ Ensures that at least `additional` items can be inserted into the table","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":28041,"byte_end":28116,"line_start":646,"line_end":646,"column_start":5,"column_end":80}},{"value":"/ without reallocation.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":28121,"byte_end":28146,"line_start":647,"line_end":647,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":28800,"byte_end":28811,"line_start":664,"line_end":664,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<RawTable<T, A>>::try_reserve","value":"pub fn try_reserve<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, usize, impl Fn(&T) -> u64) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to ensure that at least `additional` items can be inserted into\n the table without reallocation.\n","sig":null,"attributes":[{"value":"/ Tries to ensure that at least `additional` items can be inserted into","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":28626,"byte_end":28699,"line_start":661,"line_end":661,"column_start":5,"column_end":78}},{"value":"/ the table without reallocation.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":28704,"byte_end":28739,"line_start":662,"line_end":662,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":30606,"byte_end":30612,"line_start":722,"line_end":722,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawTable<T, A>>::insert","value":"pub fn insert<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, u64, T, impl Fn(&T) -> u64) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, and returns its raw bucket.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, and returns its raw bucket.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":30390,"byte_end":30459,"line_start":718,"line_end":718,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":30464,"byte_end":30467,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":30472,"byte_end":30545,"line_start":720,"line_end":720,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":31811,"byte_end":31829,"line_start":751,"line_end":751,"column_start":12,"column_end":30},"name":"try_insert_no_grow","qualname":"<RawTable<T, A>>::try_insert_no_grow","value":"pub fn try_insert_no_grow(&mut Self, u64, T) -> Result<Bucket<T>, T>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to insert a new element without growing the table and return its raw bucket.","sig":null,"attributes":[{"value":"/ Attempts to insert a new element without growing the table and return its raw bucket.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":31428,"byte_end":31517,"line_start":743,"line_end":743,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":31522,"byte_end":31525,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ Returns an `Err` containing the given element if inserting it would require growing the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":31530,"byte_end":31621,"line_start":745,"line_end":745,"column_start":5,"column_end":96}},{"value":"/ table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":31626,"byte_end":31636,"line_start":746,"line_end":746,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":31641,"byte_end":31644,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":31649,"byte_end":31722,"line_start":748,"line_end":748,"column_start":5,"column_end":78}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":31727,"byte_end":31750,"line_start":749,"line_end":749,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":32440,"byte_end":32452,"line_start":768,"line_end":768,"column_start":12,"column_end":24},"name":"insert_entry","qualname":"<RawTable<T, A>>::insert_entry","value":"pub fn insert_entry<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, u64, T, impl Fn(&T) -> u64) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, and returns a mutable reference to it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":32213,"byte_end":32293,"line_start":764,"line_end":764,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":32298,"byte_end":32301,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":32306,"byte_end":32379,"line_start":766,"line_end":766,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":32967,"byte_end":32981,"line_start":779,"line_end":779,"column_start":19,"column_end":33},"name":"insert_no_grow","qualname":"<RawTable<T, A>>::insert_no_grow","value":"pub unsafe fn insert_no_grow(&mut Self, u64, T) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, without growing the table.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, without growing the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":32597,"byte_end":32665,"line_start":772,"line_end":772,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":32670,"byte_end":32673,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ There must be enough space in the table to insert the new element.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":32678,"byte_end":32748,"line_start":774,"line_end":774,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":32753,"byte_end":32756,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":32761,"byte_end":32834,"line_start":776,"line_end":776,"column_start":5,"column_end":78}},{"value":"cfg(any(feature = \"raw\", feature = \"rustc-internal-api\"))","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":32888,"byte_end":32948,"line_start":778,"line_end":778,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":33780,"byte_end":33799,"line_start":799,"line_end":799,"column_start":19,"column_end":38},"name":"replace_bucket_with","qualname":"<RawTable<T, A>>::replace_bucket_with","value":"pub unsafe fn replace_bucket_with<F>(&mut Self, Bucket<T>, F) -> bool where\nF: FnOnce(T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Temporary removes a bucket, applying the given function to the removed\n element and optionally put back the returned value in the same bucket.","sig":null,"attributes":[{"value":"/ Temporary removes a bucket, applying the given function to the removed","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":33410,"byte_end":33484,"line_start":792,"line_end":792,"column_start":5,"column_end":79}},{"value":"/ element and optionally put back the returned value in the same bucket.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":33489,"byte_end":33563,"line_start":793,"line_end":793,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":33568,"byte_end":33571,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if the bucket still contains an element","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":33576,"byte_end":33634,"line_start":795,"line_end":795,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":33639,"byte_end":33642,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given bucket is actually occupied.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":33647,"byte_end":33712,"line_start":797,"line_end":797,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":34499,"byte_end":34503,"line_start":821,"line_end":821,"column_start":12,"column_end":16},"name":"find","qualname":"<RawTable<T, A>>::find","value":"pub fn find<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&Self, u64, impl FnMut(&T) -> bool) -> Option<Bucket<T>>","parent":null,"children":[],"decl_id":null,"docs":" Searches for an element in the table.\n","sig":null,"attributes":[{"value":"/ Searches for an element in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":34432,"byte_end":34473,"line_start":819,"line_end":819,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":34478,"byte_end":34487,"line_start":820,"line_end":820,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":34971,"byte_end":34974,"line_start":835,"line_end":835,"column_start":12,"column_end":15},"name":"get","qualname":"<RawTable<T, A>>::get","value":"pub fn get<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&Self, u64, impl FnMut(&T) -> bool) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to an element in the table.\n","sig":null,"attributes":[{"value":"/ Gets a reference to an element in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":34897,"byte_end":34945,"line_start":833,"line_end":833,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":34950,"byte_end":34959,"line_start":834,"line_end":834,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":35322,"byte_end":35329,"line_start":845,"line_end":845,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawTable<T, A>>::get_mut","value":"pub fn get_mut<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&mut Self, u64, impl FnMut(&T) -> bool) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to an element in the table.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to an element in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":35240,"byte_end":35296,"line_start":843,"line_end":843,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":35301,"byte_end":35310,"line_start":844,"line_end":844,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":36111,"byte_end":36123,"line_start":862,"line_end":862,"column_start":12,"column_end":24},"name":"get_many_mut","qualname":"<RawTable<T, A>>::get_many_mut","value":"pub fn get_many_mut<const N: usize,\nimpl FnMut(usize, &T) -> bool: FnMut(usize, &T) ->\nbool>(&mut Self, [u64; ], impl FnMut(usize, &T) -> bool) -> Option<[&mut T; ]>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to get mutable references to `N` entries in the table at once.","sig":null,"attributes":[{"value":"/ Attempts to get mutable references to `N` entries in the table at once.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":35603,"byte_end":35678,"line_start":853,"line_end":853,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":35683,"byte_end":35686,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ Returns an array of length `N` with the results of each query.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":35691,"byte_end":35757,"line_start":855,"line_end":855,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":35762,"byte_end":35765,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ At most one mutable reference will be returned to any entry. `None` will be returned if any","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":35770,"byte_end":35865,"line_start":857,"line_end":857,"column_start":5,"column_end":100}},{"value":"/ of the hashes are duplicates. `None` will be returned if the hash is not found.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":35870,"byte_end":35953,"line_start":858,"line_end":858,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":35958,"byte_end":35961,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ The `eq` argument should be a closure such that `eq(i, k)` returns true if `k` is equal to","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":35966,"byte_end":36060,"line_start":860,"line_end":860,"column_start":5,"column_end":99}},{"value":"/ the `i`th key to be looked up.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":36065,"byte_end":36099,"line_start":861,"line_end":861,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":36842,"byte_end":36864,"line_start":883,"line_end":883,"column_start":19,"column_end":41},"name":"get_many_unchecked_mut","qualname":"<RawTable<T, A>>::get_many_unchecked_mut","value":"pub unsafe fn get_many_unchecked_mut<const N: usize,\nimpl FnMut(usize, &T) -> bool: FnMut(usize, &T) ->\nbool>(&mut Self, [u64; ], impl FnMut(usize, &T) -> bool) -> Option<[&mut T; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38043,"byte_end":38051,"line_start":915,"line_end":915,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RawTable<T, A>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":37795,"byte_end":37868,"line_start":910,"line_end":910,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":37873,"byte_end":37876,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the table might be able to hold","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":37881,"byte_end":37946,"line_start":912,"line_end":912,"column_start":5,"column_end":70}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":37951,"byte_end":38017,"line_start":913,"line_end":913,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38022,"byte_end":38031,"line_start":914,"line_end":914,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38205,"byte_end":38208,"line_start":921,"line_end":921,"column_start":12,"column_end":15},"name":"len","qualname":"<RawTable<T, A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38131,"byte_end":38179,"line_start":919,"line_end":919,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38184,"byte_end":38193,"line_start":920,"line_end":920,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38342,"byte_end":38350,"line_start":927,"line_end":927,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<RawTable<T, A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the table contains no elements.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the table contains no elements.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38263,"byte_end":38316,"line_start":925,"line_end":925,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38321,"byte_end":38330,"line_start":926,"line_end":926,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38476,"byte_end":38483,"line_start":933,"line_end":933,"column_start":12,"column_end":19},"name":"buckets","qualname":"<RawTable<T, A>>::buckets","value":"pub fn buckets(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of buckets in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of buckets in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38403,"byte_end":38450,"line_start":931,"line_end":931,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38455,"byte_end":38464,"line_start":932,"line_end":932,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38853,"byte_end":38857,"line_start":942,"line_end":942,"column_start":19,"column_end":23},"name":"iter","qualname":"<RawTable<T, A>>::iter","value":"pub unsafe fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over every element in the table. It is up to\n the caller to ensure that the `RawTable` outlives the `RawIter`.\n Because we cannot make the `next` method unsafe on the `RawIter`\n struct, we have to make the `iter` method unsafe.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over every element in the table. It is up to","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38548,"byte_end":38616,"line_start":937,"line_end":937,"column_start":5,"column_end":73}},{"value":"/ the caller to ensure that the `RawTable` outlives the `RawIter`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38621,"byte_end":38689,"line_start":938,"line_end":938,"column_start":5,"column_end":73}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawIter`","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38694,"byte_end":38762,"line_start":939,"line_end":939,"column_start":5,"column_end":73}},{"value":"/ struct, we have to make the `iter` method unsafe.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38767,"byte_end":38820,"line_start":940,"line_end":940,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":38825,"byte_end":38834,"line_start":941,"line_end":941,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39758,"byte_end":39767,"line_start":961,"line_end":961,"column_start":19,"column_end":28},"name":"iter_hash","qualname":"<RawTable<T, A>>::iter_hash","value":"pub unsafe fn iter_hash(&Self, u64) -> RawIterHash<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over occupied buckets that could match a given hash.","sig":null,"attributes":[{"value":"/ Returns an iterator over occupied buckets that could match a given hash.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39112,"byte_end":39188,"line_start":950,"line_end":950,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39193,"byte_end":39196,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ `RawTable` only stores 7 bits of the hash value, so this iterator may","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39201,"byte_end":39274,"line_start":952,"line_end":952,"column_start":5,"column_end":78}},{"value":"/ return items that have a hash value different than the one provided. You","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39279,"byte_end":39355,"line_start":953,"line_end":953,"column_start":5,"column_end":81}},{"value":"/ should always validate the returned values before using them.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39360,"byte_end":39425,"line_start":954,"line_end":954,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39430,"byte_end":39433,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the `RawTable` outlives the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39438,"byte_end":39507,"line_start":956,"line_end":956,"column_start":5,"column_end":74}},{"value":"/ `RawIterHash`. Because we cannot make the `next` method unsafe on the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39512,"byte_end":39585,"line_start":957,"line_end":957,"column_start":5,"column_end":78}},{"value":"/ `RawIterHash` struct, we have to make the `iter_hash` method unsafe.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39590,"byte_end":39662,"line_start":958,"line_end":958,"column_start":5,"column_end":77}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39716,"byte_end":39739,"line_start":960,"line_end":960,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":40023,"byte_end":40028,"line_start":968,"line_end":968,"column_start":12,"column_end":17},"name":"drain","qualname":"<RawTable<T, A>>::drain","value":"pub fn drain(&mut Self) -> RawDrain<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which removes all elements from the table without","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39861,"byte_end":39934,"line_start":965,"line_end":965,"column_start":5,"column_end":78}},{"value":"/ freeing the memory.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":39939,"byte_end":39962,"line_start":966,"line_end":966,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":40575,"byte_end":40590,"line_start":983,"line_end":983,"column_start":19,"column_end":34},"name":"drain_iter_from","qualname":"<RawTable<T, A>>::drain_iter_from","value":"pub unsafe fn drain_iter_from(&mut Self, RawIter<T>) -> RawDrain<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory.","sig":null,"attributes":[{"value":"/ Returns an iterator which removes all elements from the table without","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":40177,"byte_end":40250,"line_start":975,"line_end":975,"column_start":5,"column_end":78}},{"value":"/ freeing the memory.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":40255,"byte_end":40278,"line_start":976,"line_end":976,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":40283,"byte_end":40286,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ Iteration starts at the provided iterator's current location.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":40291,"byte_end":40356,"line_start":978,"line_end":978,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":40361,"byte_end":40364,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the iterator is valid for this","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":40369,"byte_end":40441,"line_start":980,"line_end":980,"column_start":5,"column_end":77}},{"value":"/ `RawTable` and covers all items that remain in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":40446,"byte_end":40507,"line_start":981,"line_end":981,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":41243,"byte_end":41257,"line_start":999,"line_end":999,"column_start":19,"column_end":33},"name":"into_iter_from","qualname":"<RawTable<T, A>>::into_iter_from","value":"pub unsafe fn into_iter_from(Self, RawIter<T>) -> RawIntoIter<T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which consumes all elements from the table.","sig":null,"attributes":[{"value":"/ Returns an iterator which consumes all elements from the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":40928,"byte_end":40995,"line_start":993,"line_end":993,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":41000,"byte_end":41003,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ Iteration starts at the provided iterator's current location.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":41008,"byte_end":41073,"line_start":995,"line_end":995,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":41078,"byte_end":41081,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the iterator is valid for this","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":41086,"byte_end":41158,"line_start":997,"line_end":997,"column_start":5,"column_end":77}},{"value":"/ `RawTable` and covers all items that remain in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":41163,"byte_end":41224,"line_start":998,"line_end":998,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":69033,"byte_end":69055,"line_start":1745,"line_end":1745,"column_start":12,"column_end":34},"name":"clone_from_with_hasher","qualname":"<RawTable<T, A>>::clone_from_with_hasher","value":"pub fn clone_from_with_hasher<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, &Self, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Variant of `clone_from` to use when a hasher is available.\n","sig":null,"attributes":[{"value":"/ Variant of `clone_from` to use when a hasher is available.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":68931,"byte_end":68993,"line_start":1743,"line_end":1743,"column_start":5,"column_end":67}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":68998,"byte_end":69021,"line_start":1744,"line_end":1744,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":383},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78183,"byte_end":78190,"line_start":1991,"line_end":1991,"column_start":12,"column_end":19},"name":"RawIter","qualname":"::raw::inner::RawIter","value":"RawIter {  }","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386}],"decl_id":null,"docs":" Iterator which returns a raw pointer to every full bucket in the table.","sig":null,"attributes":[{"value":"/ Iterator which returns a raw pointer to every full bucket in the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77376,"byte_end":77451,"line_start":1979,"line_end":1979,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77452,"byte_end":77455,"line_start":1980,"line_end":1980,"column_start":1,"column_end":4}},{"value":"/ For maximum flexibility this iterator is not bound by a lifetime, but you","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77456,"byte_end":77533,"line_start":1981,"line_end":1981,"column_start":1,"column_end":78}},{"value":"/ must observe several rules when using it:","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77534,"byte_end":77579,"line_start":1982,"line_end":1982,"column_start":1,"column_end":46}},{"value":"/ - You must not free the hash table while iterating (including via growing/shrinking).","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77580,"byte_end":77669,"line_start":1983,"line_end":1983,"column_start":1,"column_end":90}},{"value":"/ - It is fine to erase a bucket that has been yielded by the iterator.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77670,"byte_end":77743,"line_start":1984,"line_end":1984,"column_start":1,"column_end":74}},{"value":"/ - Erasing a bucket that has not yet been yielded by the iterator may still","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77744,"byte_end":77822,"line_start":1985,"line_end":1985,"column_start":1,"column_end":79}},{"value":"/   result in the iterator yielding that bucket (unless `reflect_remove` is called).","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77823,"byte_end":77909,"line_start":1986,"line_end":1986,"column_start":1,"column_end":87}},{"value":"/ - It is unspecified whether an element inserted after the iterator was","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77910,"byte_end":77984,"line_start":1987,"line_end":1987,"column_start":1,"column_end":75}},{"value":"/   created will be yielded by that iterator (unless `reflect_insert` is called).","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77985,"byte_end":78068,"line_start":1988,"line_end":1988,"column_start":1,"column_end":84}},{"value":"/ - The order in which the iterator yields bucket is unspecified and may","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78069,"byte_end":78143,"line_start":1989,"line_end":1989,"column_start":1,"column_end":75}},{"value":"/   change in the future.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78144,"byte_end":78171,"line_start":1990,"line_end":1990,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78733,"byte_end":78747,"line_start":2005,"line_end":2005,"column_start":12,"column_end":26},"name":"reflect_remove","qualname":"<RawIter<T>>::reflect_remove","value":"pub fn reflect_remove(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Refresh the iterator so that it reflects a removal from the given bucket.","sig":null,"attributes":[{"value":"/ Refresh the iterator so that it reflects a removal from the given bucket.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78280,"byte_end":78357,"line_start":1997,"line_end":1997,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78362,"byte_end":78365,"line_start":1998,"line_end":1998,"column_start":5,"column_end":8}},{"value":"/ For the iterator to remain valid, this method must be called once","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78370,"byte_end":78439,"line_start":1999,"line_end":1999,"column_start":5,"column_end":74}},{"value":"/ for each removed bucket before `next` is called again.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78444,"byte_end":78502,"line_start":2000,"line_end":2000,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78507,"byte_end":78510,"line_start":2001,"line_end":2001,"column_start":5,"column_end":8}},{"value":"/ This method should be called _before_ the removal is made. It is not necessary to call this","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78515,"byte_end":78610,"line_start":2002,"line_end":2002,"column_start":5,"column_end":100}},{"value":"/ method if you are removing an item that this iterator yielded in the past.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78615,"byte_end":78693,"line_start":2003,"line_end":2003,"column_start":5,"column_end":83}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78698,"byte_end":78721,"line_start":2004,"line_end":2004,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":79334,"byte_end":79348,"line_start":2019,"line_end":2019,"column_start":12,"column_end":26},"name":"reflect_insert","qualname":"<RawIter<T>>::reflect_insert","value":"pub fn reflect_insert(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Refresh the iterator so that it reflects an insertion into the given bucket.","sig":null,"attributes":[{"value":"/ Refresh the iterator so that it reflects an insertion into the given bucket.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78831,"byte_end":78911,"line_start":2009,"line_end":2009,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78916,"byte_end":78919,"line_start":2010,"line_end":2010,"column_start":5,"column_end":8}},{"value":"/ For the iterator to remain valid, this method must be called once","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78924,"byte_end":78993,"line_start":2011,"line_end":2011,"column_start":5,"column_end":74}},{"value":"/ for each insert before `next` is called again.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78998,"byte_end":79048,"line_start":2012,"line_end":2012,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":79053,"byte_end":79056,"line_start":2013,"line_end":2013,"column_start":5,"column_end":8}},{"value":"/ This method does not guarantee that an insertion of a bucket with a greater","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":79061,"byte_end":79140,"line_start":2014,"line_end":2014,"column_start":5,"column_end":84}},{"value":"/ index than the last one yielded will be reflected in the iterator.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":79145,"byte_end":79215,"line_start":2015,"line_end":2015,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":79220,"byte_end":79223,"line_start":2016,"line_end":2016,"column_start":5,"column_end":8}},{"value":"/ This method should be called _after_ the given insert is made.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":79228,"byte_end":79294,"line_start":2017,"line_end":2017,"column_start":5,"column_end":71}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":79299,"byte_end":79322,"line_start":2018,"line_end":2018,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":405},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85393,"byte_end":85404,"line_start":2159,"line_end":2159,"column_start":12,"column_end":23},"name":"RawIntoIter","qualname":"::raw::inner::RawIntoIter","value":"RawIntoIter {  }","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"decl_id":null,"docs":" Iterator which consumes a table and returns elements.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes a table and returns elements.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85324,"byte_end":85381,"line_start":2158,"line_end":2158,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85665,"byte_end":85669,"line_start":2168,"line_end":2168,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawIntoIter<T, A>>::iter","value":"pub fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":438},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":87382,"byte_end":87390,"line_start":2235,"line_end":2235,"column_start":12,"column_end":20},"name":"RawDrain","qualname":"::raw::inner::RawDrain","value":"RawDrain {  }","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445}],"decl_id":null,"docs":" Iterator which consumes elements without freeing the table storage.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes elements without freeing the table storage.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":87299,"byte_end":87370,"line_start":2234,"line_end":2234,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":87974,"byte_end":87978,"line_start":2251,"line_end":2251,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawDrain>::iter","value":"pub fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":472},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":89672,"byte_end":89683,"line_start":2313,"line_end":2313,"column_start":12,"column_end":23},"name":"RawIterHash","qualname":"::raw::inner::RawIterHash","value":"RawIterHash {  }","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477}],"decl_id":null,"docs":" Iterator over occupied buckets that could match a given hash.","sig":null,"attributes":[{"value":"/ Iterator over occupied buckets that could match a given hash.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":89374,"byte_end":89439,"line_start":2308,"line_end":2308,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":89440,"byte_end":89443,"line_start":2309,"line_end":2309,"column_start":1,"column_end":4}},{"value":"/ `RawTable` only stores 7 bits of the hash value, so this iterator may return","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":89444,"byte_end":89524,"line_start":2310,"line_end":2310,"column_start":1,"column_end":81}},{"value":"/ items that have a hash value different than the one provided. You should","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":89525,"byte_end":89601,"line_start":2311,"line_end":2311,"column_start":1,"column_end":77}},{"value":"/ always validate the returned values before using them.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":89602,"byte_end":89660,"line_start":2312,"line_end":2312,"column_start":1,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":567},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100278,"byte_end":100296,"line_start":17,"line_end":17,"column_start":10,"column_end":28},"name":"DefaultHashBuilder","qualname":"::map::DefaultHashBuilder","value":"pub enum DefaultHashBuilder { }","parent":null,"children":[],"decl_id":null,"docs":" Dummy default hasher for `HashMap`.\n","sig":null,"attributes":[{"value":"/ Dummy default hasher for `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100198,"byte_end":100237,"line_start":15,"line_end":15,"column_start":1,"column_end":40}},{"value":"cfg(not(feature = \"ahash\"))","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100238,"byte_end":100268,"line_start":16,"line_end":16,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":568},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106567,"byte_end":106574,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100301,"byte_end":100367,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100368,"byte_end":100371,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The default hashing algorithm is currently [`AHash`], though this is","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100372,"byte_end":100444,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ subject to change at any point in the future. This hash function is very","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100445,"byte_end":100521,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fast for all types of keys, but this algorithm will typically *not* protect","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100522,"byte_end":100601,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ against attacks such as HashDoS.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100602,"byte_end":100638,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100639,"byte_end":100642,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The hashing algorithm can be replaced on a per-`HashMap` basis using the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100643,"byte_end":100719,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100720,"byte_end":100800,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ alternative algorithms are available on crates.io, such as the [`fnv`] crate.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100801,"byte_end":100882,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100883,"byte_end":100886,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ It is required that the keys implement the [`Eq`] and [`Hash`] traits, although","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100887,"byte_end":100970,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/ this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":100971,"byte_end":101049,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ If you implement these yourself, it is important that the following","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101050,"byte_end":101121,"line_start":32,"line_end":32,"column_start":1,"column_end":72}},{"value":"/ property holds:","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101122,"byte_end":101141,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101142,"byte_end":101145,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101146,"byte_end":101157,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101158,"byte_end":101194,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101195,"byte_end":101202,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101203,"byte_end":101206,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101207,"byte_end":101277,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101278,"byte_end":101281,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101282,"byte_end":101359,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ hash, as determined by the [`Hash`] trait, or its equality, as determined by","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101360,"byte_end":101440,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ the [`Eq`] trait, changes while it is in the map. This is normally only","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101441,"byte_end":101516,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101517,"byte_end":101595,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101596,"byte_end":101599,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101600,"byte_end":101679,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101680,"byte_end":101758,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashMap` may become corrupted and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101759,"byte_end":101839,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101840,"byte_end":101885,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101886,"byte_end":101889,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101890,"byte_end":101904,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101905,"byte_end":101908,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101909,"byte_end":101916,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101917,"byte_end":101944,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101945,"byte_end":101948,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":101949,"byte_end":102017,"line_start":56,"line_end":56,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<String, String>` in this example).","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102018,"byte_end":102077,"line_start":57,"line_end":57,"column_start":1,"column_end":60}},{"value":"/ let mut book_reviews = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102078,"byte_end":102120,"line_start":58,"line_end":58,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102121,"byte_end":102124,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Review some books.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102125,"byte_end":102150,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102151,"byte_end":102175,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     \"Adventures of Huckleberry Finn\".to_string(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102176,"byte_end":102229,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/     \"My favorite book.\".to_string(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102230,"byte_end":102270,"line_start":63,"line_end":63,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102271,"byte_end":102277,"line_start":64,"line_end":64,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102278,"byte_end":102302,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/     \"Grimms' Fairy Tales\".to_string(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102303,"byte_end":102345,"line_start":66,"line_end":66,"column_start":1,"column_end":43}},{"value":"/     \"Masterpiece.\".to_string(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102346,"byte_end":102381,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ );","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102382,"byte_end":102388,"line_start":68,"line_end":68,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102389,"byte_end":102413,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     \"Pride and Prejudice\".to_string(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102414,"byte_end":102456,"line_start":70,"line_end":70,"column_start":1,"column_end":43}},{"value":"/     \"Very enjoyable.\".to_string(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102457,"byte_end":102495,"line_start":71,"line_end":71,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102496,"byte_end":102502,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102503,"byte_end":102527,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/     \"The Adventures of Sherlock Holmes\".to_string(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102528,"byte_end":102584,"line_start":74,"line_end":74,"column_start":1,"column_end":57}},{"value":"/     \"Eye lyked it alot.\".to_string(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102585,"byte_end":102626,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102627,"byte_end":102633,"line_start":76,"line_end":76,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102634,"byte_end":102637,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102638,"byte_end":102670,"line_start":78,"line_end":78,"column_start":1,"column_end":33}},{"value":"/ // When collections store owned values (String), they can still be","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102671,"byte_end":102741,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ // queried using references (&str).","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102742,"byte_end":102781,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102782,"byte_end":102836,"line_start":81,"line_end":81,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102837,"byte_end":102909,"line_start":82,"line_end":82,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102910,"byte_end":102947,"line_start":83,"line_end":83,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102948,"byte_end":102953,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102954,"byte_end":102957,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":102958,"byte_end":103031,"line_start":86,"line_end":86,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103032,"byte_end":103093,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103094,"byte_end":103097,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ // Look up the values associated with some keys.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103098,"byte_end":103150,"line_start":89,"line_end":89,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103151,"byte_end":103228,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ for &book in &to_find {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103229,"byte_end":103256,"line_start":91,"line_end":91,"column_start":1,"column_end":28}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103257,"byte_end":103295,"line_start":92,"line_end":92,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103296,"byte_end":103357,"line_start":93,"line_end":93,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103358,"byte_end":103413,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103414,"byte_end":103423,"line_start":95,"line_end":95,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103424,"byte_end":103429,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103430,"byte_end":103433,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103434,"byte_end":103506,"line_start":98,"line_end":98,"column_start":1,"column_end":73}},{"value":"/ println!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103507,"byte_end":103580,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103581,"byte_end":103584,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103585,"byte_end":103616,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103617,"byte_end":103658,"line_start":102,"line_end":102,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103659,"byte_end":103704,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103705,"byte_end":103710,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103711,"byte_end":103718,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103719,"byte_end":103722,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ `HashMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103723,"byte_end":103798,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103799,"byte_end":103879,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103880,"byte_end":103897,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103898,"byte_end":103901,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103902,"byte_end":103909,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103910,"byte_end":103937,"line_start":112,"line_end":112,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103938,"byte_end":103941,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":103942,"byte_end":104010,"line_start":114,"line_end":114,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<&str, u8>` in this example).","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104011,"byte_end":104064,"line_start":115,"line_end":115,"column_start":1,"column_end":54}},{"value":"/ let mut player_stats = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104065,"byte_end":104107,"line_start":116,"line_end":116,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104108,"byte_end":104111,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104112,"byte_end":104145,"line_start":118,"line_end":118,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104146,"byte_end":104221,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104222,"byte_end":104257,"line_start":120,"line_end":120,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104258,"byte_end":104268,"line_start":121,"line_end":121,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104269,"byte_end":104274,"line_start":122,"line_end":122,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104275,"byte_end":104278,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104279,"byte_end":104331,"line_start":124,"line_end":124,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104332,"byte_end":104380,"line_start":125,"line_end":125,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104381,"byte_end":104384,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104385,"byte_end":104458,"line_start":127,"line_end":127,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104459,"byte_end":104487,"line_start":128,"line_end":128,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104488,"byte_end":104555,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104556,"byte_end":104559,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104560,"byte_end":104628,"line_start":131,"line_end":131,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104629,"byte_end":104688,"line_start":132,"line_end":132,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104689,"byte_end":104721,"line_start":133,"line_end":133,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104722,"byte_end":104729,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104730,"byte_end":104733,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104734,"byte_end":104827,"line_start":136,"line_end":136,"column_start":1,"column_end":94}},{"value":"/ We must also derive [`PartialEq`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104828,"byte_end":104866,"line_start":137,"line_end":137,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104867,"byte_end":104870,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104871,"byte_end":104930,"line_start":139,"line_end":139,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104931,"byte_end":104995,"line_start":140,"line_end":140,"column_start":1,"column_end":65}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":104996,"byte_end":105069,"line_start":141,"line_end":141,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105070,"byte_end":105141,"line_start":142,"line_end":142,"column_start":1,"column_end":72}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105142,"byte_end":105207,"line_start":143,"line_end":143,"column_start":1,"column_end":66}},{"value":"/ [`default`]: #method.default","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105208,"byte_end":105240,"line_start":144,"line_end":144,"column_start":1,"column_end":33}},{"value":"/ [`with_hasher`]: #method.with_hasher","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105241,"byte_end":105281,"line_start":145,"line_end":145,"column_start":1,"column_end":41}},{"value":"/ [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105282,"byte_end":105348,"line_start":146,"line_end":146,"column_start":1,"column_end":67}},{"value":"/ [`fnv`]: https://crates.io/crates/fnv","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105349,"byte_end":105390,"line_start":147,"line_end":147,"column_start":1,"column_end":42}},{"value":"/ [`AHash`]: https://crates.io/crates/ahash","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105391,"byte_end":105436,"line_start":148,"line_end":148,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105437,"byte_end":105440,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105441,"byte_end":105448,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105449,"byte_end":105476,"line_start":151,"line_end":151,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105477,"byte_end":105480,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105481,"byte_end":105522,"line_start":153,"line_end":153,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105523,"byte_end":105542,"line_start":154,"line_end":154,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105543,"byte_end":105564,"line_start":155,"line_end":155,"column_start":1,"column_end":22}},{"value":"/     country: String,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105565,"byte_end":105589,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105590,"byte_end":105595,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105596,"byte_end":105599,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ impl Viking {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105600,"byte_end":105617,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"/     /// Creates a new Viking.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105618,"byte_end":105651,"line_start":160,"line_end":160,"column_start":1,"column_end":34}},{"value":"/     fn new(name: &str, country: &str) -> Viking {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105652,"byte_end":105705,"line_start":161,"line_end":161,"column_start":1,"column_end":54}},{"value":"/         Viking { name: name.to_string(), country: country.to_string() }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105706,"byte_end":105781,"line_start":162,"line_end":162,"column_start":1,"column_end":76}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105782,"byte_end":105791,"line_start":163,"line_end":163,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105792,"byte_end":105797,"line_start":164,"line_end":164,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105798,"byte_end":105801,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ // Use a HashMap to store the vikings' health points.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105802,"byte_end":105859,"line_start":166,"line_end":166,"column_start":1,"column_end":58}},{"value":"/ let mut vikings = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105860,"byte_end":105897,"line_start":167,"line_end":167,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105898,"byte_end":105901,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105902,"byte_end":105957,"line_start":169,"line_end":169,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":105958,"byte_end":106013,"line_start":170,"line_end":170,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106014,"byte_end":106071,"line_start":171,"line_end":171,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106072,"byte_end":106075,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the status of the vikings.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106076,"byte_end":106145,"line_start":173,"line_end":173,"column_start":1,"column_end":70}},{"value":"/ for (viking, health) in &vikings {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106146,"byte_end":106184,"line_start":174,"line_end":174,"column_start":1,"column_end":39}},{"value":"/     println!(\"{:?} has {} hp\", viking, health);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106185,"byte_end":106236,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106237,"byte_end":106242,"line_start":176,"line_end":176,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106243,"byte_end":106250,"line_start":177,"line_end":177,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106251,"byte_end":106254,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ A `HashMap` with fixed list of elements can be initialized from an array:","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106255,"byte_end":106332,"line_start":179,"line_end":179,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106333,"byte_end":106336,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106337,"byte_end":106344,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106345,"byte_end":106372,"line_start":182,"line_end":182,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106373,"byte_end":106376,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ let timber_resources: HashMap<&str, i32> = [(\"Norway\", 100), (\"Denmark\", 50), (\"Iceland\", 10)]","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106377,"byte_end":106475,"line_start":184,"line_end":184,"column_start":1,"column_end":99}},{"value":"/     .iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106476,"byte_end":106511,"line_start":185,"line_end":185,"column_start":1,"column_end":36}},{"value":"/ // use the values stored in map","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106512,"byte_end":106547,"line_start":186,"line_end":186,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106548,"byte_end":106555,"line_start":187,"line_end":187,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112484,"byte_end":112495,"line_start":374,"line_end":374,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111477,"byte_end":111553,"line_start":348,"line_end":348,"column_start":5,"column_end":81}},{"value":"/ keys.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111558,"byte_end":111567,"line_start":349,"line_end":349,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111572,"byte_end":111575,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111580,"byte_end":111633,"line_start":351,"line_end":351,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111638,"byte_end":111641,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111646,"byte_end":111709,"line_start":353,"line_end":353,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111714,"byte_end":111779,"line_start":354,"line_end":354,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111784,"byte_end":111847,"line_start":355,"line_end":355,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111852,"byte_end":111916,"line_start":356,"line_end":356,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111921,"byte_end":111924,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111929,"byte_end":112005,"line_start":358,"line_end":358,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112010,"byte_end":112074,"line_start":359,"line_end":359,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112079,"byte_end":112082,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112087,"byte_end":112101,"line_start":361,"line_end":361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112106,"byte_end":112109,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112114,"byte_end":112121,"line_start":363,"line_end":363,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112126,"byte_end":112153,"line_start":364,"line_end":364,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112158,"byte_end":112206,"line_start":365,"line_end":365,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112211,"byte_end":112214,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112219,"byte_end":112261,"line_start":367,"line_end":367,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112266,"byte_end":112308,"line_start":368,"line_end":368,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112313,"byte_end":112334,"line_start":369,"line_end":369,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112339,"byte_end":112346,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112351,"byte_end":112354,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112359,"byte_end":112417,"line_start":372,"line_end":372,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113750,"byte_end":113774,"line_start":408,"line_end":408,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112621,"byte_end":112701,"line_start":381,"line_end":381,"column_start":5,"column_end":85}},{"value":"/ to hash the keys.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112706,"byte_end":112727,"line_start":382,"line_end":382,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112732,"byte_end":112735,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112740,"byte_end":112814,"line_start":384,"line_end":384,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112819,"byte_end":112888,"line_start":385,"line_end":385,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112893,"byte_end":112896,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112901,"byte_end":112964,"line_start":387,"line_end":387,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":112969,"byte_end":113034,"line_start":388,"line_end":388,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113039,"byte_end":113102,"line_start":389,"line_end":389,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113107,"byte_end":113171,"line_start":390,"line_end":390,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113176,"byte_end":113179,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113184,"byte_end":113260,"line_start":392,"line_end":392,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113265,"byte_end":113329,"line_start":393,"line_end":393,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113334,"byte_end":113337,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113342,"byte_end":113356,"line_start":395,"line_end":395,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113361,"byte_end":113364,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113369,"byte_end":113376,"line_start":397,"line_end":397,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113381,"byte_end":113408,"line_start":398,"line_end":398,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113413,"byte_end":113461,"line_start":399,"line_end":399,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113466,"byte_end":113469,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113474,"byte_end":113516,"line_start":401,"line_end":401,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113521,"byte_end":113580,"line_start":402,"line_end":402,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113585,"byte_end":113606,"line_start":403,"line_end":403,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113611,"byte_end":113618,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113623,"byte_end":113626,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113631,"byte_end":113689,"line_start":406,"line_end":406,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114073,"byte_end":114082,"line_start":419,"line_end":419,"column_start":12,"column_end":21},"name":"allocator","qualname":"<HashMap<K, V, S, A>>::allocator","value":"pub fn allocator(&Self) -> &A","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying allocator.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying allocator.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113995,"byte_end":114047,"line_start":417,"line_end":417,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114052,"byte_end":114061,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114959,"byte_end":114973,"line_start":444,"line_end":444,"column_start":12,"column_end":26},"name":"with_hasher_in","qualname":"<HashMap<K, V, S, A>>::with_hasher_in","value":"pub fn with_hasher_in(S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys. It will be allocated with the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114140,"byte_end":114216,"line_start":423,"line_end":423,"column_start":5,"column_end":81}},{"value":"/ keys. It will be allocated with the given allocator.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114221,"byte_end":114277,"line_start":424,"line_end":424,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114282,"byte_end":114285,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114290,"byte_end":114343,"line_start":426,"line_end":426,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114348,"byte_end":114351,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114356,"byte_end":114419,"line_start":428,"line_end":428,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114424,"byte_end":114489,"line_start":429,"line_end":429,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114494,"byte_end":114557,"line_start":430,"line_end":430,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114562,"byte_end":114626,"line_start":431,"line_end":431,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114631,"byte_end":114634,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114639,"byte_end":114653,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114658,"byte_end":114661,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114666,"byte_end":114673,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114678,"byte_end":114705,"line_start":436,"line_end":436,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114710,"byte_end":114758,"line_start":437,"line_end":437,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114763,"byte_end":114766,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114771,"byte_end":114813,"line_start":439,"line_end":439,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114818,"byte_end":114860,"line_start":440,"line_end":440,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114865,"byte_end":114886,"line_start":441,"line_end":441,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":114891,"byte_end":114898,"line_start":442,"line_end":442,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116064,"byte_end":116091,"line_start":473,"line_end":473,"column_start":12,"column_end":39},"name":"with_capacity_and_hasher_in","qualname":"<HashMap<K, V, S, A>>::with_capacity_and_hasher_in","value":"pub fn with_capacity_and_hasher_in(usize, S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys. It will be allocated with the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115117,"byte_end":115197,"line_start":451,"line_end":451,"column_start":5,"column_end":85}},{"value":"/ to hash the keys. It will be allocated with the given allocator.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115202,"byte_end":115270,"line_start":452,"line_end":452,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115275,"byte_end":115278,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115283,"byte_end":115357,"line_start":454,"line_end":454,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115362,"byte_end":115431,"line_start":455,"line_end":455,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115436,"byte_end":115439,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115444,"byte_end":115507,"line_start":457,"line_end":457,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115512,"byte_end":115577,"line_start":458,"line_end":458,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115582,"byte_end":115645,"line_start":459,"line_end":459,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115650,"byte_end":115714,"line_start":460,"line_end":460,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115719,"byte_end":115722,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115727,"byte_end":115741,"line_start":462,"line_end":462,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115746,"byte_end":115749,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115754,"byte_end":115761,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115766,"byte_end":115793,"line_start":465,"line_end":465,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115798,"byte_end":115846,"line_start":466,"line_end":466,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115851,"byte_end":115854,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115859,"byte_end":115901,"line_start":468,"line_end":468,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115906,"byte_end":115965,"line_start":469,"line_end":469,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115970,"byte_end":115991,"line_start":470,"line_end":470,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":115996,"byte_end":116003,"line_start":471,"line_end":471,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116804,"byte_end":116810,"line_start":495,"line_end":495,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S, A>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the map's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the map's [`BuildHasher`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116272,"byte_end":116325,"line_start":480,"line_end":480,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116330,"byte_end":116333,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116338,"byte_end":116416,"line_start":482,"line_end":482,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116421,"byte_end":116424,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116429,"byte_end":116443,"line_start":484,"line_end":484,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116448,"byte_end":116451,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116456,"byte_end":116463,"line_start":486,"line_end":486,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116468,"byte_end":116495,"line_start":487,"line_end":487,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116500,"byte_end":116548,"line_start":488,"line_end":488,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116553,"byte_end":116556,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116561,"byte_end":116608,"line_start":490,"line_end":490,"column_start":5,"column_end":52}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116613,"byte_end":116675,"line_start":491,"line_end":491,"column_start":5,"column_end":67}},{"value":"/ let hasher: &DefaultHashBuilder = map.hasher();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116680,"byte_end":116731,"line_start":492,"line_end":492,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116736,"byte_end":116743,"line_start":493,"line_end":493,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117354,"byte_end":117362,"line_start":512,"line_end":512,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashMap<K, V, S, A>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116864,"byte_end":116937,"line_start":499,"line_end":499,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116942,"byte_end":116945,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the `HashMap<K, V>` might be able to hold","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":116950,"byte_end":117025,"line_start":501,"line_end":501,"column_start":5,"column_end":80}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117030,"byte_end":117096,"line_start":502,"line_end":502,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117101,"byte_end":117104,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117109,"byte_end":117123,"line_start":504,"line_end":504,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117128,"byte_end":117131,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117136,"byte_end":117143,"line_start":506,"line_end":506,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117148,"byte_end":117175,"line_start":507,"line_end":507,"column_start":5,"column_end":32}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117180,"byte_end":117241,"line_start":508,"line_end":508,"column_start":5,"column_end":66}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117246,"byte_end":117281,"line_start":509,"line_end":509,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117286,"byte_end":117293,"line_start":510,"line_end":510,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117886,"byte_end":117890,"line_start":534,"line_end":534,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S, A>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n The iterator element type is `&'a K`.","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117422,"byte_end":117475,"line_start":516,"line_end":516,"column_start":5,"column_end":58}},{"value":"/ The iterator element type is `&'a K`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117480,"byte_end":117521,"line_start":517,"line_end":517,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117526,"byte_end":117529,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117534,"byte_end":117548,"line_start":519,"line_end":519,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117553,"byte_end":117556,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117561,"byte_end":117568,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117573,"byte_end":117600,"line_start":522,"line_end":522,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117605,"byte_end":117608,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117613,"byte_end":117646,"line_start":524,"line_end":524,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117651,"byte_end":117674,"line_start":525,"line_end":525,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117679,"byte_end":117702,"line_start":526,"line_end":526,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117707,"byte_end":117730,"line_start":527,"line_end":527,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117735,"byte_end":117738,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117743,"byte_end":117770,"line_start":529,"line_end":529,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117775,"byte_end":117803,"line_start":530,"line_end":530,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117808,"byte_end":117813,"line_start":531,"line_end":531,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117818,"byte_end":117825,"line_start":532,"line_end":532,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118433,"byte_end":118439,"line_start":556,"line_end":556,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S, A>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order.\n The iterator element type is `&'a V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":117965,"byte_end":118020,"line_start":538,"line_end":538,"column_start":5,"column_end":60}},{"value":"/ The iterator element type is `&'a V`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118025,"byte_end":118066,"line_start":539,"line_end":539,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118071,"byte_end":118074,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118079,"byte_end":118093,"line_start":541,"line_end":541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118098,"byte_end":118101,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118106,"byte_end":118113,"line_start":543,"line_end":543,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118118,"byte_end":118145,"line_start":544,"line_end":544,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118150,"byte_end":118153,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118158,"byte_end":118191,"line_start":546,"line_end":546,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118196,"byte_end":118219,"line_start":547,"line_end":547,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118224,"byte_end":118247,"line_start":548,"line_end":548,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118252,"byte_end":118275,"line_start":549,"line_end":549,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118280,"byte_end":118283,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118288,"byte_end":118317,"line_start":551,"line_end":551,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118322,"byte_end":118350,"line_start":552,"line_end":552,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118355,"byte_end":118360,"line_start":553,"line_end":553,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118365,"byte_end":118372,"line_start":554,"line_end":554,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119092,"byte_end":119102,"line_start":583,"line_end":583,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<HashMap<K, V, S, A>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order.\n The iterator element type is `&'a mut V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118518,"byte_end":118581,"line_start":560,"line_end":560,"column_start":5,"column_end":68}},{"value":"/ The iterator element type is `&'a mut V`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118586,"byte_end":118631,"line_start":561,"line_end":561,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118636,"byte_end":118639,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118644,"byte_end":118658,"line_start":563,"line_end":563,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118663,"byte_end":118666,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118671,"byte_end":118678,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118683,"byte_end":118710,"line_start":566,"line_end":566,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118715,"byte_end":118718,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118723,"byte_end":118756,"line_start":568,"line_end":568,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118761,"byte_end":118764,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118769,"byte_end":118792,"line_start":570,"line_end":570,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118797,"byte_end":118820,"line_start":571,"line_end":571,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118825,"byte_end":118848,"line_start":572,"line_end":572,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118853,"byte_end":118856,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118861,"byte_end":118894,"line_start":574,"line_end":574,"column_start":5,"column_end":38}},{"value":"/     *val = *val + 10;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118899,"byte_end":118924,"line_start":575,"line_end":575,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118929,"byte_end":118934,"line_start":576,"line_end":576,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118939,"byte_end":118942,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118947,"byte_end":118976,"line_start":578,"line_end":578,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":118981,"byte_end":119009,"line_start":579,"line_end":579,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119014,"byte_end":119019,"line_start":580,"line_end":580,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119024,"byte_end":119031,"line_start":581,"line_end":581,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119725,"byte_end":119729,"line_start":607,"line_end":607,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S, A>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.\n The iterator element type is `(&'a K, &'a V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119216,"byte_end":119280,"line_start":589,"line_end":589,"column_start":5,"column_end":69}},{"value":"/ The iterator element type is `(&'a K, &'a V)`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119285,"byte_end":119335,"line_start":590,"line_end":590,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119340,"byte_end":119343,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119348,"byte_end":119362,"line_start":592,"line_end":592,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119367,"byte_end":119370,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119375,"byte_end":119382,"line_start":594,"line_end":594,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119387,"byte_end":119414,"line_start":595,"line_end":595,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119419,"byte_end":119422,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119427,"byte_end":119460,"line_start":597,"line_end":597,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119465,"byte_end":119488,"line_start":598,"line_end":598,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119493,"byte_end":119516,"line_start":599,"line_end":599,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119521,"byte_end":119544,"line_start":600,"line_end":600,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119549,"byte_end":119552,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119557,"byte_end":119591,"line_start":602,"line_end":602,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119596,"byte_end":119642,"line_start":603,"line_end":603,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119647,"byte_end":119652,"line_start":604,"line_end":604,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119657,"byte_end":119664,"line_start":605,"line_end":605,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120629,"byte_end":120637,"line_start":641,"line_end":641,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S, A>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order,\n with mutable references to the values.\n The iterator element type is `(&'a K, &'a mut V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":119964,"byte_end":120028,"line_start":617,"line_end":617,"column_start":5,"column_end":69}},{"value":"/ with mutable references to the values.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120033,"byte_end":120075,"line_start":618,"line_end":618,"column_start":5,"column_end":47}},{"value":"/ The iterator element type is `(&'a K, &'a mut V)`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120080,"byte_end":120134,"line_start":619,"line_end":619,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120139,"byte_end":120142,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120147,"byte_end":120161,"line_start":621,"line_end":621,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120166,"byte_end":120169,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120174,"byte_end":120181,"line_start":623,"line_end":623,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120186,"byte_end":120213,"line_start":624,"line_end":624,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120218,"byte_end":120221,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120226,"byte_end":120259,"line_start":626,"line_end":626,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120264,"byte_end":120287,"line_start":627,"line_end":627,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120292,"byte_end":120315,"line_start":628,"line_end":628,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120320,"byte_end":120343,"line_start":629,"line_end":629,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120348,"byte_end":120351,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120356,"byte_end":120380,"line_start":631,"line_end":631,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120385,"byte_end":120421,"line_start":632,"line_end":632,"column_start":5,"column_end":41}},{"value":"/     *val *= 2;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120426,"byte_end":120444,"line_start":633,"line_end":633,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120449,"byte_end":120454,"line_start":634,"line_end":634,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120459,"byte_end":120462,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120467,"byte_end":120495,"line_start":636,"line_end":636,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120500,"byte_end":120546,"line_start":637,"line_end":637,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120551,"byte_end":120556,"line_start":638,"line_end":638,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":120561,"byte_end":120568,"line_start":639,"line_end":639,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121354,"byte_end":121357,"line_start":670,"line_end":670,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S, A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121022,"byte_end":121068,"line_start":657,"line_end":657,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121073,"byte_end":121076,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121081,"byte_end":121095,"line_start":659,"line_end":659,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121100,"byte_end":121103,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121108,"byte_end":121115,"line_start":661,"line_end":661,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121120,"byte_end":121147,"line_start":662,"line_end":662,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121152,"byte_end":121155,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121160,"byte_end":121191,"line_start":664,"line_end":664,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121196,"byte_end":121223,"line_start":665,"line_end":665,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121228,"byte_end":121249,"line_start":666,"line_end":666,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121254,"byte_end":121281,"line_start":667,"line_end":667,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121286,"byte_end":121293,"line_start":668,"line_end":668,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121748,"byte_end":121756,"line_start":687,"line_end":687,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S, A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains no elements.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121412,"byte_end":121463,"line_start":674,"line_end":674,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121468,"byte_end":121471,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121476,"byte_end":121490,"line_start":676,"line_end":676,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121495,"byte_end":121498,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121503,"byte_end":121510,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121515,"byte_end":121542,"line_start":679,"line_end":679,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121547,"byte_end":121550,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121555,"byte_end":121586,"line_start":681,"line_end":681,"column_start":5,"column_end":36}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121591,"byte_end":121617,"line_start":682,"line_end":682,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121622,"byte_end":121643,"line_start":683,"line_end":683,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121648,"byte_end":121675,"line_start":684,"line_end":684,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121680,"byte_end":121687,"line_start":685,"line_end":685,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122349,"byte_end":122354,"line_start":711,"line_end":711,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashMap<K, V, S, A>>::drain","value":"pub fn drain(&mut Self) -> Drain<, K, V, A>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all key-value pairs as an iterator. Keeps the\n allocated memory for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, returning all key-value pairs as an iterator. Keeps the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121809,"byte_end":121884,"line_start":691,"line_end":691,"column_start":5,"column_end":80}},{"value":"/ allocated memory for reuse.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121889,"byte_end":121920,"line_start":692,"line_end":692,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121925,"byte_end":121928,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121933,"byte_end":121947,"line_start":694,"line_end":694,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121952,"byte_end":121955,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121960,"byte_end":121967,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":121972,"byte_end":121999,"line_start":697,"line_end":697,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122004,"byte_end":122007,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122012,"byte_end":122043,"line_start":699,"line_end":699,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122048,"byte_end":122069,"line_start":700,"line_end":700,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122074,"byte_end":122095,"line_start":701,"line_end":701,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122100,"byte_end":122103,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ for (k, v) in a.drain().take(1) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122108,"byte_end":122145,"line_start":703,"line_end":703,"column_start":5,"column_end":42}},{"value":"/     assert!(k == 1 || k == 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122150,"byte_end":122184,"line_start":704,"line_end":704,"column_start":5,"column_end":39}},{"value":"/     assert!(v == \"a\" || v == \"b\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122189,"byte_end":122227,"line_start":705,"line_end":705,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122232,"byte_end":122237,"line_start":706,"line_end":706,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122242,"byte_end":122245,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122250,"byte_end":122276,"line_start":708,"line_end":708,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122281,"byte_end":122288,"line_start":709,"line_end":709,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122885,"byte_end":122891,"line_start":730,"line_end":730,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S, A>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122466,"byte_end":122523,"line_start":717,"line_end":717,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122528,"byte_end":122531,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122536,"byte_end":122623,"line_start":719,"line_end":719,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122628,"byte_end":122631,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122636,"byte_end":122650,"line_start":721,"line_end":721,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122655,"byte_end":122658,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122663,"byte_end":122670,"line_start":723,"line_end":723,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122675,"byte_end":122702,"line_start":724,"line_end":724,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122707,"byte_end":122710,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122715,"byte_end":122787,"line_start":726,"line_end":726,"column_start":5,"column_end":77}},{"value":"/ map.retain(|&k, _| k % 2 == 0);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122792,"byte_end":122827,"line_start":727,"line_end":727,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122832,"byte_end":122861,"line_start":728,"line_end":728,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":122866,"byte_end":122873,"line_start":729,"line_end":729,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124307,"byte_end":124319,"line_start":771,"line_end":771,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashMap<K, V, S, A>>::drain_filter","value":"pub fn drain_filter<F>(&mut Self, F) -> DrainFilter<, K, V, F, A> where\nF: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are true under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are true under the given predicate,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123308,"byte_end":123369,"line_start":745,"line_end":745,"column_start":5,"column_end":66}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123374,"byte_end":123425,"line_start":746,"line_end":746,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123430,"byte_end":123433,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ In other words, move all pairs `(k, v)` such that `f(&k,&mut v)` returns `true` out","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123438,"byte_end":123525,"line_start":748,"line_end":748,"column_start":5,"column_end":92}},{"value":"/ into another iterator.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123530,"byte_end":123556,"line_start":749,"line_end":749,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123561,"byte_end":123564,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, any remaining elements that satisfy","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123569,"byte_end":123652,"line_start":751,"line_end":751,"column_start":5,"column_end":88}},{"value":"/ the predicate are dropped from the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123657,"byte_end":123702,"line_start":752,"line_end":752,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123707,"byte_end":123710,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123715,"byte_end":123729,"line_start":754,"line_end":754,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123734,"byte_end":123737,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123742,"byte_end":123749,"line_start":756,"line_end":756,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123754,"byte_end":123781,"line_start":757,"line_end":757,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123786,"byte_end":123789,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123794,"byte_end":123864,"line_start":759,"line_end":759,"column_start":5,"column_end":75}},{"value":"/ let drained: HashMap<i32, i32> = map.drain_filter(|k, _v| k % 2 == 0).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123869,"byte_end":123953,"line_start":760,"line_end":760,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123958,"byte_end":123961,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ let mut evens = drained.keys().cloned().collect::<Vec<_>>();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":123966,"byte_end":124030,"line_start":762,"line_end":762,"column_start":5,"column_end":69}},{"value":"/ let mut odds = map.keys().cloned().collect::<Vec<_>>();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124035,"byte_end":124094,"line_start":763,"line_end":763,"column_start":5,"column_end":64}},{"value":"/ evens.sort();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124099,"byte_end":124116,"line_start":764,"line_end":764,"column_start":5,"column_end":22}},{"value":"/ odds.sort();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124121,"byte_end":124137,"line_start":765,"line_end":765,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124142,"byte_end":124145,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens, vec![0, 2, 4, 6]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124150,"byte_end":124190,"line_start":767,"line_end":767,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(odds, vec![1, 3, 5, 7]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124195,"byte_end":124234,"line_start":768,"line_end":768,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124239,"byte_end":124246,"line_start":769,"line_end":769,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124995,"byte_end":125000,"line_start":798,"line_end":798,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S, A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs. Keeps the allocated memory\n for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs. Keeps the allocated memory","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124628,"byte_end":124704,"line_start":784,"line_end":784,"column_start":5,"column_end":81}},{"value":"/ for reuse.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124709,"byte_end":124723,"line_start":785,"line_end":785,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124728,"byte_end":124731,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124736,"byte_end":124750,"line_start":787,"line_end":787,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124755,"byte_end":124758,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124763,"byte_end":124770,"line_start":789,"line_end":789,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124775,"byte_end":124802,"line_start":790,"line_end":790,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124807,"byte_end":124810,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124815,"byte_end":124846,"line_start":792,"line_end":792,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124851,"byte_end":124872,"line_start":793,"line_end":793,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124877,"byte_end":124891,"line_start":794,"line_end":794,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124896,"byte_end":124922,"line_start":795,"line_end":795,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":124927,"byte_end":124934,"line_start":796,"line_end":796,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125531,"byte_end":125540,"line_start":819,"line_end":819,"column_start":12,"column_end":21},"name":"into_keys","qualname":"<HashMap<K, V, S, A>>::into_keys","value":"pub fn into_keys(Self) -> IntoKeys<K, V, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a consuming iterator visiting all the keys in arbitrary order.\n The map cannot be used after calling this.\n The iterator element type is `K`.","sig":null,"attributes":[{"value":"/ Creates a consuming iterator visiting all the keys in arbitrary order.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125053,"byte_end":125127,"line_start":802,"line_end":802,"column_start":5,"column_end":79}},{"value":"/ The map cannot be used after calling this.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125132,"byte_end":125178,"line_start":803,"line_end":803,"column_start":5,"column_end":51}},{"value":"/ The iterator element type is `K`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125183,"byte_end":125220,"line_start":804,"line_end":804,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125225,"byte_end":125228,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125233,"byte_end":125247,"line_start":806,"line_end":806,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125252,"byte_end":125255,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125260,"byte_end":125267,"line_start":808,"line_end":808,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125272,"byte_end":125299,"line_start":809,"line_end":809,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125304,"byte_end":125307,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125312,"byte_end":125345,"line_start":811,"line_end":811,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125350,"byte_end":125373,"line_start":812,"line_end":812,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125378,"byte_end":125401,"line_start":813,"line_end":813,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125406,"byte_end":125429,"line_start":814,"line_end":814,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125434,"byte_end":125437,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<&str> = map.into_keys().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125442,"byte_end":125493,"line_start":816,"line_end":816,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125498,"byte_end":125505,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125510,"byte_end":125519,"line_start":818,"line_end":818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126128,"byte_end":126139,"line_start":842,"line_end":842,"column_start":12,"column_end":23},"name":"into_values","qualname":"<HashMap<K, V, S, A>>::into_values","value":"pub fn into_values(Self) -> IntoValues<K, V, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a consuming iterator visiting all the values in arbitrary order.\n The map cannot be used after calling this.\n The iterator element type is `V`.","sig":null,"attributes":[{"value":"/ Creates a consuming iterator visiting all the values in arbitrary order.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125647,"byte_end":125723,"line_start":825,"line_end":825,"column_start":5,"column_end":81}},{"value":"/ The map cannot be used after calling this.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125728,"byte_end":125774,"line_start":826,"line_end":826,"column_start":5,"column_end":51}},{"value":"/ The iterator element type is `V`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125779,"byte_end":125816,"line_start":827,"line_end":827,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125821,"byte_end":125824,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125829,"byte_end":125843,"line_start":829,"line_end":829,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125848,"byte_end":125851,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125856,"byte_end":125863,"line_start":831,"line_end":831,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125868,"byte_end":125895,"line_start":832,"line_end":832,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125900,"byte_end":125903,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125908,"byte_end":125941,"line_start":834,"line_end":834,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125946,"byte_end":125969,"line_start":835,"line_end":835,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":125974,"byte_end":125997,"line_start":836,"line_end":836,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126002,"byte_end":126025,"line_start":837,"line_end":837,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126030,"byte_end":126033,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<i32> = map.into_values().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126038,"byte_end":126090,"line_start":839,"line_end":839,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126095,"byte_end":126102,"line_start":840,"line_end":840,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126107,"byte_end":126116,"line_start":841,"line_end":841,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126951,"byte_end":126958,"line_start":873,"line_end":873,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashMap<K, V, S, A>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashMap`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126361,"byte_end":126437,"line_start":855,"line_end":855,"column_start":5,"column_end":81}},{"value":"/ in the `HashMap`. The collection may reserve more space to avoid","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126442,"byte_end":126510,"line_start":856,"line_end":856,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126515,"byte_end":126542,"line_start":857,"line_end":857,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126547,"byte_end":126550,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126555,"byte_end":126567,"line_start":859,"line_end":859,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126572,"byte_end":126575,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows [`usize`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126580,"byte_end":126638,"line_start":861,"line_end":861,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126643,"byte_end":126646,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ [`usize`]: https://doc.rust-lang.org/std/primitive.usize.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126651,"byte_end":126716,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126721,"byte_end":126724,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126729,"byte_end":126743,"line_start":865,"line_end":865,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126748,"byte_end":126751,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126756,"byte_end":126763,"line_start":867,"line_end":867,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126768,"byte_end":126795,"line_start":868,"line_end":868,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126800,"byte_end":126853,"line_start":869,"line_end":869,"column_start":5,"column_end":58}},{"value":"/ map.reserve(10);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126858,"byte_end":126878,"line_start":870,"line_end":870,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126883,"byte_end":126890,"line_start":871,"line_end":871,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127736,"byte_end":127747,"line_start":895,"line_end":895,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashMap<K, V, S, A>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127102,"byte_end":127186,"line_start":878,"line_end":878,"column_start":5,"column_end":89}},{"value":"/ in the given `HashMap<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127191,"byte_end":127270,"line_start":879,"line_end":879,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127275,"byte_end":127302,"line_start":880,"line_end":880,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127307,"byte_end":127310,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127315,"byte_end":127327,"line_start":882,"line_end":882,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127332,"byte_end":127335,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127340,"byte_end":127420,"line_start":884,"line_end":884,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127425,"byte_end":127441,"line_start":885,"line_end":885,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127446,"byte_end":127449,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127454,"byte_end":127468,"line_start":887,"line_end":887,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127473,"byte_end":127476,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127481,"byte_end":127488,"line_start":889,"line_end":889,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127493,"byte_end":127520,"line_start":890,"line_end":890,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, isize> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127525,"byte_end":127580,"line_start":891,"line_end":891,"column_start":5,"column_end":60}},{"value":"/ map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127585,"byte_end":127663,"line_start":892,"line_end":892,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127668,"byte_end":127675,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128531,"byte_end":128544,"line_start":917,"line_end":917,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashMap<K, V, S, A>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map as much as possible. It will drop","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127925,"byte_end":127994,"line_start":900,"line_end":900,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":127999,"byte_end":128064,"line_start":901,"line_end":901,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128069,"byte_end":128142,"line_start":902,"line_end":902,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128147,"byte_end":128150,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128155,"byte_end":128169,"line_start":904,"line_end":904,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128174,"byte_end":128177,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128182,"byte_end":128189,"line_start":906,"line_end":906,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128194,"byte_end":128221,"line_start":907,"line_end":907,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128226,"byte_end":128229,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128234,"byte_end":128299,"line_start":909,"line_end":909,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128304,"byte_end":128325,"line_start":910,"line_end":910,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128330,"byte_end":128351,"line_start":911,"line_end":911,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128356,"byte_end":128391,"line_start":912,"line_end":912,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to_fit();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128396,"byte_end":128420,"line_start":913,"line_end":913,"column_start":5,"column_end":29}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128425,"byte_end":128458,"line_start":914,"line_end":914,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128463,"byte_end":128470,"line_start":915,"line_end":915,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129530,"byte_end":129539,"line_start":946,"line_end":946,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashMap<K, V, S, A>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map with a lower limit. It will drop","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128662,"byte_end":128730,"line_start":922,"line_end":922,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128735,"byte_end":128813,"line_start":923,"line_end":923,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128818,"byte_end":128891,"line_start":924,"line_end":924,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128896,"byte_end":128899,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ This function does nothing if the current capacity is smaller than the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128904,"byte_end":128978,"line_start":926,"line_end":926,"column_start":5,"column_end":79}},{"value":"/ supplied minimum capacity.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":128983,"byte_end":129013,"line_start":927,"line_end":927,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129018,"byte_end":129021,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129026,"byte_end":129040,"line_start":929,"line_end":929,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129045,"byte_end":129048,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129053,"byte_end":129060,"line_start":931,"line_end":931,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129065,"byte_end":129092,"line_start":932,"line_end":932,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129097,"byte_end":129100,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129105,"byte_end":129170,"line_start":934,"line_end":934,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129175,"byte_end":129196,"line_start":935,"line_end":935,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129201,"byte_end":129222,"line_start":936,"line_end":936,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129227,"byte_end":129262,"line_start":937,"line_end":937,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129267,"byte_end":129289,"line_start":938,"line_end":938,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 10);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129294,"byte_end":129328,"line_start":939,"line_end":939,"column_start":5,"column_end":39}},{"value":"/ map.shrink_to(0);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129333,"byte_end":129354,"line_start":940,"line_end":940,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129359,"byte_end":129392,"line_start":941,"line_end":941,"column_start":5,"column_end":38}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129397,"byte_end":129419,"line_start":942,"line_end":942,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129424,"byte_end":129457,"line_start":943,"line_end":943,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129462,"byte_end":129469,"line_start":944,"line_end":944,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130299,"byte_end":130304,"line_start":971,"line_end":971,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S, A>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129689,"byte_end":129771,"line_start":951,"line_end":951,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129776,"byte_end":129779,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129784,"byte_end":129798,"line_start":953,"line_end":953,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129803,"byte_end":129806,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129811,"byte_end":129818,"line_start":955,"line_end":955,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129823,"byte_end":129850,"line_start":956,"line_end":956,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129855,"byte_end":129858,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ let mut letters = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129863,"byte_end":129900,"line_start":958,"line_end":958,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129905,"byte_end":129908,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129913,"byte_end":129964,"line_start":960,"line_end":960,"column_start":5,"column_end":56}},{"value":"/     let counter = letters.entry(ch).or_insert(0);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":129969,"byte_end":130022,"line_start":961,"line_end":961,"column_start":5,"column_end":58}},{"value":"/     *counter += 1;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130027,"byte_end":130049,"line_start":962,"line_end":962,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130054,"byte_end":130059,"line_start":963,"line_end":963,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130064,"byte_end":130067,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130072,"byte_end":130105,"line_start":965,"line_end":965,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130110,"byte_end":130143,"line_start":966,"line_end":966,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130148,"byte_end":130181,"line_start":967,"line_end":967,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130186,"byte_end":130226,"line_start":968,"line_end":968,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130231,"byte_end":130238,"line_start":969,"line_end":969,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131462,"byte_end":131471,"line_start":1007,"line_end":1007,"column_start":12,"column_end":21},"name":"entry_ref","qualname":"<HashMap<K, V, S, A>>::entry_ref","value":"pub fn entry_ref<'a, 'b, Q: ?Sized>(&'a mut Self, &'b Q) -> EntryRef where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry by reference in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry by reference in the map for in-place manipulation.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130825,"byte_end":130920,"line_start":989,"line_end":989,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130925,"byte_end":130928,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130933,"byte_end":130947,"line_start":991,"line_end":991,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130952,"byte_end":130955,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130960,"byte_end":130967,"line_start":993,"line_end":993,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":130972,"byte_end":130999,"line_start":994,"line_end":994,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131004,"byte_end":131007,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ let mut words: HashMap<String, usize> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131012,"byte_end":131071,"line_start":996,"line_end":996,"column_start":5,"column_end":64}},{"value":"/ let source = [\"poneyland\", \"horseyland\", \"poneyland\", \"poneyland\"];","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131076,"byte_end":131147,"line_start":997,"line_end":997,"column_start":5,"column_end":76}},{"value":"/ for (i, &s) in source.iter().enumerate() {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131152,"byte_end":131198,"line_start":998,"line_end":998,"column_start":5,"column_end":51}},{"value":"/     let counter = words.entry_ref(s).or_insert(0);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131203,"byte_end":131257,"line_start":999,"line_end":999,"column_start":5,"column_end":59}},{"value":"/     *counter += 1;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131262,"byte_end":131284,"line_start":1000,"line_end":1000,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131289,"byte_end":131294,"line_start":1001,"line_end":1001,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131299,"byte_end":131302,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(words[\"poneyland\"], 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131307,"byte_end":131345,"line_start":1003,"line_end":1003,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(words[\"horseyland\"], 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131350,"byte_end":131389,"line_start":1004,"line_end":1004,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":131394,"byte_end":131401,"line_start":1005,"line_end":1005,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132785,"byte_end":132788,"line_start":1049,"line_end":1049,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S, A>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132137,"byte_end":132199,"line_start":1029,"line_end":1029,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132204,"byte_end":132207,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132212,"byte_end":132275,"line_start":1031,"line_end":1031,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132280,"byte_end":132347,"line_start":1032,"line_end":1032,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132352,"byte_end":132369,"line_start":1033,"line_end":1033,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132374,"byte_end":132377,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132382,"byte_end":132441,"line_start":1035,"line_end":1035,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132446,"byte_end":132510,"line_start":1036,"line_end":1036,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132515,"byte_end":132518,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132523,"byte_end":132537,"line_start":1038,"line_end":1038,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132542,"byte_end":132545,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132550,"byte_end":132557,"line_start":1040,"line_end":1040,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132562,"byte_end":132589,"line_start":1041,"line_end":1041,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132594,"byte_end":132597,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132602,"byte_end":132635,"line_start":1043,"line_end":1043,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132640,"byte_end":132663,"line_start":1044,"line_end":1044,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132668,"byte_end":132708,"line_start":1045,"line_end":1045,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132713,"byte_end":132747,"line_start":1046,"line_end":1046,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132752,"byte_end":132759,"line_start":1047,"line_end":1047,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":132764,"byte_end":132773,"line_start":1048,"line_end":1048,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133755,"byte_end":133768,"line_start":1081,"line_end":1081,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S, A>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133069,"byte_end":133134,"line_start":1061,"line_end":1061,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133139,"byte_end":133142,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133147,"byte_end":133219,"line_start":1063,"line_end":1063,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133224,"byte_end":133291,"line_start":1064,"line_end":1064,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133296,"byte_end":133313,"line_start":1065,"line_end":1065,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133318,"byte_end":133321,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133326,"byte_end":133385,"line_start":1067,"line_end":1067,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133390,"byte_end":133454,"line_start":1068,"line_end":1068,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133459,"byte_end":133462,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133467,"byte_end":133481,"line_start":1070,"line_end":1070,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133486,"byte_end":133489,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133494,"byte_end":133501,"line_start":1072,"line_end":1072,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133506,"byte_end":133533,"line_start":1073,"line_end":1073,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133538,"byte_end":133541,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133546,"byte_end":133579,"line_start":1075,"line_end":1075,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133584,"byte_end":133607,"line_start":1076,"line_end":1076,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133612,"byte_end":133668,"line_start":1077,"line_end":1077,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133673,"byte_end":133717,"line_start":1078,"line_end":1078,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133722,"byte_end":133729,"line_start":1079,"line_end":1079,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":133734,"byte_end":133743,"line_start":1080,"line_end":1080,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135285,"byte_end":135302,"line_start":1131,"line_end":1131,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<HashMap<K, V, S, A>>::get_key_value_mut","value":"pub fn get_key_value_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(&K, &mut V)>\nwhere K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134417,"byte_end":134517,"line_start":1107,"line_end":1107,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134522,"byte_end":134525,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134530,"byte_end":134602,"line_start":1109,"line_end":1109,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134607,"byte_end":134674,"line_start":1110,"line_end":1110,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134679,"byte_end":134696,"line_start":1111,"line_end":1111,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134701,"byte_end":134704,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134709,"byte_end":134768,"line_start":1113,"line_end":1113,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134773,"byte_end":134837,"line_start":1114,"line_end":1114,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134842,"byte_end":134845,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134850,"byte_end":134864,"line_start":1116,"line_end":1116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134869,"byte_end":134872,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134877,"byte_end":134884,"line_start":1118,"line_end":1118,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134889,"byte_end":134916,"line_start":1119,"line_end":1119,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134921,"byte_end":134924,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134929,"byte_end":134962,"line_start":1121,"line_end":1121,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134967,"byte_end":134990,"line_start":1122,"line_end":1122,"column_start":5,"column_end":28}},{"value":"/ let (k, v) = map.get_key_value_mut(&1).unwrap();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":134995,"byte_end":135047,"line_start":1123,"line_end":1123,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(k, &1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135052,"byte_end":135074,"line_start":1124,"line_end":1124,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(v, &mut \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135079,"byte_end":135107,"line_start":1125,"line_end":1125,"column_start":5,"column_end":33}},{"value":"/ *v = \"b\";","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135112,"byte_end":135125,"line_start":1126,"line_end":1126,"column_start":5,"column_end":18}},{"value":"/ assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135130,"byte_end":135194,"line_start":1127,"line_end":1127,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(map.get_key_value_mut(&2), None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135199,"byte_end":135247,"line_start":1128,"line_end":1128,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135252,"byte_end":135259,"line_start":1129,"line_end":1129,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135264,"byte_end":135273,"line_start":1130,"line_end":1130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136333,"byte_end":136345,"line_start":1163,"line_end":1163,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S, A>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains a value for the specified key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135630,"byte_end":135699,"line_start":1143,"line_end":1143,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135704,"byte_end":135707,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135712,"byte_end":135775,"line_start":1145,"line_end":1145,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135780,"byte_end":135847,"line_start":1146,"line_end":1146,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135852,"byte_end":135869,"line_start":1147,"line_end":1147,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135874,"byte_end":135877,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135882,"byte_end":135941,"line_start":1149,"line_end":1149,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":135946,"byte_end":136010,"line_start":1150,"line_end":1150,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136015,"byte_end":136018,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136023,"byte_end":136037,"line_start":1152,"line_end":1152,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136042,"byte_end":136045,"line_start":1153,"line_end":1153,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136050,"byte_end":136057,"line_start":1154,"line_end":1154,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136062,"byte_end":136089,"line_start":1155,"line_end":1155,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136094,"byte_end":136097,"line_start":1156,"line_end":1156,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136102,"byte_end":136135,"line_start":1157,"line_end":1157,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136140,"byte_end":136163,"line_start":1158,"line_end":1158,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136168,"byte_end":136211,"line_start":1159,"line_end":1159,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136216,"byte_end":136260,"line_start":1160,"line_end":1160,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136265,"byte_end":136272,"line_start":1161,"line_end":1161,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":137202,"byte_end":137209,"line_start":1193,"line_end":1193,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S, A>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136486,"byte_end":136556,"line_start":1171,"line_end":1171,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136561,"byte_end":136564,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136569,"byte_end":136632,"line_start":1173,"line_end":1173,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136637,"byte_end":136704,"line_start":1174,"line_end":1174,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136709,"byte_end":136726,"line_start":1175,"line_end":1175,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136731,"byte_end":136734,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136739,"byte_end":136798,"line_start":1177,"line_end":1177,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136803,"byte_end":136867,"line_start":1178,"line_end":1178,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136872,"byte_end":136875,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136880,"byte_end":136894,"line_start":1180,"line_end":1180,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136899,"byte_end":136902,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136907,"byte_end":136914,"line_start":1182,"line_end":1182,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136919,"byte_end":136946,"line_start":1183,"line_end":1183,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136951,"byte_end":136954,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136959,"byte_end":136992,"line_start":1185,"line_end":1185,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":136997,"byte_end":137020,"line_start":1186,"line_end":1186,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":137025,"byte_end":137063,"line_start":1187,"line_end":1187,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":137068,"byte_end":137085,"line_start":1188,"line_end":1188,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":137090,"byte_end":137095,"line_start":1189,"line_end":1189,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":137100,"byte_end":137129,"line_start":1190,"line_end":1190,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":137134,"byte_end":137141,"line_start":1191,"line_end":1191,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139244,"byte_end":139256,"line_start":1262,"line_end":1262,"column_start":12,"column_end":24},"name":"get_many_mut","qualname":"<HashMap<K, V, S, A>>::get_many_mut","value":"pub fn get_many_mut<Q: ?Sized, const N: usize>(&mut Self, [&Q; ])\n-> Option<[&mut V; ]> where K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Attempts to get mutable references to `N` values in the map at once.","sig":null,"attributes":[{"value":"/ Attempts to get mutable references to `N` values in the map at once.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":137867,"byte_end":137939,"line_start":1219,"line_end":1219,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":137944,"byte_end":137947,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ Returns an array of length `N` with the results of each query. For soundness, at most one","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":137952,"byte_end":138045,"line_start":1221,"line_end":1221,"column_start":5,"column_end":98}},{"value":"/ mutable reference will be returned to any value. `None` will be returned if any of the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138050,"byte_end":138140,"line_start":1222,"line_end":1222,"column_start":5,"column_end":95}},{"value":"/ keys are duplicates or missing.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138145,"byte_end":138180,"line_start":1223,"line_end":1223,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138185,"byte_end":138188,"line_start":1224,"line_end":1224,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138193,"byte_end":138207,"line_start":1225,"line_end":1225,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138212,"byte_end":138215,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138220,"byte_end":138227,"line_start":1227,"line_end":1227,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138232,"byte_end":138259,"line_start":1228,"line_end":1228,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138264,"byte_end":138267,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ let mut libraries = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138272,"byte_end":138311,"line_start":1230,"line_end":1230,"column_start":5,"column_end":44}},{"value":"/ libraries.insert(\"Bodleian Library\".to_string(), 1602);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138316,"byte_end":138375,"line_start":1231,"line_end":1231,"column_start":5,"column_end":64}},{"value":"/ libraries.insert(\"Athenæum\".to_string(), 1807);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138380,"byte_end":138432,"line_start":1232,"line_end":1232,"column_start":5,"column_end":56}},{"value":"/ libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138437,"byte_end":138511,"line_start":1233,"line_end":1233,"column_start":5,"column_end":79}},{"value":"/ libraries.insert(\"Library of Congress\".to_string(), 1800);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138516,"byte_end":138578,"line_start":1234,"line_end":1234,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138583,"byte_end":138586,"line_start":1235,"line_end":1235,"column_start":5,"column_end":8}},{"value":"/ let got = libraries.get_many_mut([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138591,"byte_end":138629,"line_start":1236,"line_end":1236,"column_start":5,"column_end":43}},{"value":"/     \"Athenæum\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138634,"byte_end":138654,"line_start":1237,"line_end":1237,"column_start":5,"column_end":24}},{"value":"/     \"Library of Congress\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138659,"byte_end":138689,"line_start":1238,"line_end":1238,"column_start":5,"column_end":35}},{"value":"/ ]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138694,"byte_end":138701,"line_start":1239,"line_end":1239,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138706,"byte_end":138721,"line_start":1240,"line_end":1240,"column_start":5,"column_end":20}},{"value":"/     got,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138726,"byte_end":138738,"line_start":1241,"line_end":1241,"column_start":5,"column_end":17}},{"value":"/     Some([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138743,"byte_end":138757,"line_start":1242,"line_end":1242,"column_start":5,"column_end":19}},{"value":"/         &mut 1807,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138762,"byte_end":138784,"line_start":1243,"line_end":1243,"column_start":5,"column_end":27}},{"value":"/         &mut 1800,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138789,"byte_end":138811,"line_start":1244,"line_end":1244,"column_start":5,"column_end":27}},{"value":"/     ]),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138816,"byte_end":138827,"line_start":1245,"line_end":1245,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138832,"byte_end":138838,"line_start":1246,"line_end":1246,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138843,"byte_end":138846,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ // Missing keys result in None","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138851,"byte_end":138885,"line_start":1248,"line_end":1248,"column_start":5,"column_end":39}},{"value":"/ let got = libraries.get_many_mut([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138890,"byte_end":138928,"line_start":1249,"line_end":1249,"column_start":5,"column_end":43}},{"value":"/     \"Athenæum\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138933,"byte_end":138953,"line_start":1250,"line_end":1250,"column_start":5,"column_end":24}},{"value":"/     \"New York Public Library\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138958,"byte_end":138992,"line_start":1251,"line_end":1251,"column_start":5,"column_end":39}},{"value":"/ ]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":138997,"byte_end":139004,"line_start":1252,"line_end":1252,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139009,"byte_end":139035,"line_start":1253,"line_end":1253,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139040,"byte_end":139043,"line_start":1254,"line_end":1254,"column_start":5,"column_end":8}},{"value":"/ // Duplicate keys result in None","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139048,"byte_end":139084,"line_start":1255,"line_end":1255,"column_start":5,"column_end":41}},{"value":"/ let got = libraries.get_many_mut([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139089,"byte_end":139127,"line_start":1256,"line_end":1256,"column_start":5,"column_end":43}},{"value":"/     \"Athenæum\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139132,"byte_end":139152,"line_start":1257,"line_end":1257,"column_start":5,"column_end":24}},{"value":"/     \"Athenæum\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139157,"byte_end":139177,"line_start":1258,"line_end":1258,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139182,"byte_end":139189,"line_start":1259,"line_end":1259,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139194,"byte_end":139220,"line_start":1260,"line_end":1260,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139225,"byte_end":139232,"line_start":1261,"line_end":1261,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140962,"byte_end":140984,"line_start":1315,"line_end":1315,"column_start":19,"column_end":41},"name":"get_many_unchecked_mut","qualname":"<HashMap<K, V, S, A>>::get_many_unchecked_mut","value":"pub unsafe fn get_many_unchecked_mut<Q: ?Sized, const N:\nusize>(&mut Self, [&Q; ]) -> Option<[&mut V; ]> where K: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Attempts to get mutable references to `N` values in the map at once, without validating that\n the values are unique.","sig":null,"attributes":[{"value":"/ Attempts to get mutable references to `N` values in the map at once, without validating that","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139472,"byte_end":139568,"line_start":1270,"line_end":1270,"column_start":5,"column_end":101}},{"value":"/ the values are unique.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139573,"byte_end":139599,"line_start":1271,"line_end":1271,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139604,"byte_end":139607,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ Returns an array of length `N` with the results of each query. `None` will be returned if","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139612,"byte_end":139705,"line_start":1273,"line_end":1273,"column_start":5,"column_end":98}},{"value":"/ any of the keys are missing.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139710,"byte_end":139742,"line_start":1274,"line_end":1274,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139747,"byte_end":139750,"line_start":1275,"line_end":1275,"column_start":5,"column_end":8}},{"value":"/ For a safe alternative see [`get_many_mut`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139755,"byte_end":139803,"line_start":1276,"line_end":1276,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139808,"byte_end":139811,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139816,"byte_end":139828,"line_start":1278,"line_end":1278,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139833,"byte_end":139836,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ Calling this method with overlapping keys is *[undefined behavior]* even if the resulting","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139841,"byte_end":139934,"line_start":1280,"line_end":1280,"column_start":5,"column_end":98}},{"value":"/ references are not used.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139939,"byte_end":139967,"line_start":1281,"line_end":1281,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139972,"byte_end":139975,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":139980,"byte_end":140076,"line_start":1283,"line_end":1283,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140081,"byte_end":140084,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140089,"byte_end":140103,"line_start":1285,"line_end":1285,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140108,"byte_end":140111,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140116,"byte_end":140123,"line_start":1287,"line_end":1287,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140128,"byte_end":140155,"line_start":1288,"line_end":1288,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140160,"byte_end":140163,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ let mut libraries = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140168,"byte_end":140207,"line_start":1290,"line_end":1290,"column_start":5,"column_end":44}},{"value":"/ libraries.insert(\"Bodleian Library\".to_string(), 1602);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140212,"byte_end":140271,"line_start":1291,"line_end":1291,"column_start":5,"column_end":64}},{"value":"/ libraries.insert(\"Athenæum\".to_string(), 1807);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140276,"byte_end":140328,"line_start":1292,"line_end":1292,"column_start":5,"column_end":56}},{"value":"/ libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140333,"byte_end":140407,"line_start":1293,"line_end":1293,"column_start":5,"column_end":79}},{"value":"/ libraries.insert(\"Library of Congress\".to_string(), 1800);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140412,"byte_end":140474,"line_start":1294,"line_end":1294,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140479,"byte_end":140482,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ let got = libraries.get_many_mut([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140487,"byte_end":140525,"line_start":1296,"line_end":1296,"column_start":5,"column_end":43}},{"value":"/     \"Athenæum\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140530,"byte_end":140550,"line_start":1297,"line_end":1297,"column_start":5,"column_end":24}},{"value":"/     \"Library of Congress\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140555,"byte_end":140585,"line_start":1298,"line_end":1298,"column_start":5,"column_end":35}},{"value":"/ ]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140590,"byte_end":140597,"line_start":1299,"line_end":1299,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140602,"byte_end":140617,"line_start":1300,"line_end":1300,"column_start":5,"column_end":20}},{"value":"/     got,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140622,"byte_end":140634,"line_start":1301,"line_end":1301,"column_start":5,"column_end":17}},{"value":"/     Some([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140639,"byte_end":140653,"line_start":1302,"line_end":1302,"column_start":5,"column_end":19}},{"value":"/         &mut 1807,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140658,"byte_end":140680,"line_start":1303,"line_end":1303,"column_start":5,"column_end":27}},{"value":"/         &mut 1800,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140685,"byte_end":140707,"line_start":1304,"line_end":1304,"column_start":5,"column_end":27}},{"value":"/     ]),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140712,"byte_end":140723,"line_start":1305,"line_end":1305,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140728,"byte_end":140734,"line_start":1306,"line_end":1306,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140739,"byte_end":140742,"line_start":1307,"line_end":1307,"column_start":5,"column_end":8}},{"value":"/ // Missing keys result in None","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140747,"byte_end":140781,"line_start":1308,"line_end":1308,"column_start":5,"column_end":39}},{"value":"/ let got = libraries.get_many_mut([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140786,"byte_end":140824,"line_start":1309,"line_end":1309,"column_start":5,"column_end":43}},{"value":"/     \"Athenæum\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140829,"byte_end":140849,"line_start":1310,"line_end":1310,"column_start":5,"column_end":24}},{"value":"/     \"New York Public Library\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140854,"byte_end":140888,"line_start":1311,"line_end":1311,"column_start":5,"column_end":39}},{"value":"/ ]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140893,"byte_end":140900,"line_start":1312,"line_end":1312,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140905,"byte_end":140931,"line_start":1313,"line_end":1313,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":140936,"byte_end":140943,"line_start":1314,"line_end":1314,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142880,"byte_end":142902,"line_start":1371,"line_end":1371,"column_start":12,"column_end":34},"name":"get_many_key_value_mut","qualname":"<HashMap<K, V, S, A>>::get_many_key_value_mut","value":"pub fn get_many_key_value_mut<Q: ?Sized, const N: usize>(&mut Self, [&Q; ])\n-> Option<[(&K, &mut V); ]> where K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Attempts to get mutable references to `N` values in the map at once, with immutable\n references to the corresponding keys.","sig":null,"attributes":[{"value":"/ Attempts to get mutable references to `N` values in the map at once, with immutable","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141246,"byte_end":141333,"line_start":1327,"line_end":1327,"column_start":5,"column_end":92}},{"value":"/ references to the corresponding keys.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141338,"byte_end":141379,"line_start":1328,"line_end":1328,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141384,"byte_end":141387,"line_start":1329,"line_end":1329,"column_start":5,"column_end":8}},{"value":"/ Returns an array of length `N` with the results of each query. For soundness, at most one","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141392,"byte_end":141485,"line_start":1330,"line_end":1330,"column_start":5,"column_end":98}},{"value":"/ mutable reference will be returned to any value. `None` will be returned if any of the keys","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141490,"byte_end":141585,"line_start":1331,"line_end":1331,"column_start":5,"column_end":100}},{"value":"/ are duplicates or missing.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141590,"byte_end":141620,"line_start":1332,"line_end":1332,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141625,"byte_end":141628,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141633,"byte_end":141647,"line_start":1334,"line_end":1334,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141652,"byte_end":141655,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141660,"byte_end":141667,"line_start":1336,"line_end":1336,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141672,"byte_end":141699,"line_start":1337,"line_end":1337,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141704,"byte_end":141707,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ let mut libraries = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141712,"byte_end":141751,"line_start":1339,"line_end":1339,"column_start":5,"column_end":44}},{"value":"/ libraries.insert(\"Bodleian Library\".to_string(), 1602);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141756,"byte_end":141815,"line_start":1340,"line_end":1340,"column_start":5,"column_end":64}},{"value":"/ libraries.insert(\"Athenæum\".to_string(), 1807);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141820,"byte_end":141872,"line_start":1341,"line_end":1341,"column_start":5,"column_end":56}},{"value":"/ libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141877,"byte_end":141951,"line_start":1342,"line_end":1342,"column_start":5,"column_end":79}},{"value":"/ libraries.insert(\"Library of Congress\".to_string(), 1800);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":141956,"byte_end":142018,"line_start":1343,"line_end":1343,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142023,"byte_end":142026,"line_start":1344,"line_end":1344,"column_start":5,"column_end":8}},{"value":"/ let got = libraries.get_many_key_value_mut([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142031,"byte_end":142079,"line_start":1345,"line_end":1345,"column_start":5,"column_end":53}},{"value":"/     \"Bodleian Library\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142084,"byte_end":142111,"line_start":1346,"line_end":1346,"column_start":5,"column_end":32}},{"value":"/     \"Herzogin-Anna-Amalia-Bibliothek\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142116,"byte_end":142158,"line_start":1347,"line_end":1347,"column_start":5,"column_end":47}},{"value":"/ ]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142163,"byte_end":142170,"line_start":1348,"line_end":1348,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142175,"byte_end":142190,"line_start":1349,"line_end":1349,"column_start":5,"column_end":20}},{"value":"/     got,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142195,"byte_end":142207,"line_start":1350,"line_end":1350,"column_start":5,"column_end":17}},{"value":"/     Some([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142212,"byte_end":142226,"line_start":1351,"line_end":1351,"column_start":5,"column_end":19}},{"value":"/         (&\"Bodleian Library\".to_string(), &mut 1602),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142231,"byte_end":142288,"line_start":1352,"line_end":1352,"column_start":5,"column_end":62}},{"value":"/         (&\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), &mut 1691),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142293,"byte_end":142365,"line_start":1353,"line_end":1353,"column_start":5,"column_end":77}},{"value":"/     ]),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142370,"byte_end":142381,"line_start":1354,"line_end":1354,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142386,"byte_end":142392,"line_start":1355,"line_end":1355,"column_start":5,"column_end":11}},{"value":"/ // Missing keys result in None","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142397,"byte_end":142431,"line_start":1356,"line_end":1356,"column_start":5,"column_end":39}},{"value":"/ let got = libraries.get_many_key_value_mut([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142436,"byte_end":142484,"line_start":1357,"line_end":1357,"column_start":5,"column_end":53}},{"value":"/     \"Bodleian Library\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142489,"byte_end":142516,"line_start":1358,"line_end":1358,"column_start":5,"column_end":32}},{"value":"/     \"Gewandhaus\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142521,"byte_end":142542,"line_start":1359,"line_end":1359,"column_start":5,"column_end":26}},{"value":"/ ]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142547,"byte_end":142554,"line_start":1360,"line_end":1360,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142559,"byte_end":142585,"line_start":1361,"line_end":1361,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142590,"byte_end":142593,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ // Duplicate keys result in None","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142598,"byte_end":142634,"line_start":1363,"line_end":1363,"column_start":5,"column_end":41}},{"value":"/ let got = libraries.get_many_key_value_mut([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142639,"byte_end":142687,"line_start":1364,"line_end":1364,"column_start":5,"column_end":53}},{"value":"/     \"Bodleian Library\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142692,"byte_end":142719,"line_start":1365,"line_end":1365,"column_start":5,"column_end":32}},{"value":"/     \"Herzogin-Anna-Amalia-Bibliothek\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142724,"byte_end":142766,"line_start":1366,"line_end":1366,"column_start":5,"column_end":47}},{"value":"/     \"Herzogin-Anna-Amalia-Bibliothek\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142771,"byte_end":142813,"line_start":1367,"line_end":1367,"column_start":5,"column_end":47}},{"value":"/ ]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142818,"byte_end":142825,"line_start":1368,"line_end":1368,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142830,"byte_end":142856,"line_start":1369,"line_end":1369,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":142861,"byte_end":142868,"line_start":1370,"line_end":1370,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144833,"byte_end":144865,"line_start":1427,"line_end":1427,"column_start":19,"column_end":51},"name":"get_many_key_value_unchecked_mut","qualname":"<HashMap<K, V, S, A>>::get_many_key_value_unchecked_mut","value":"pub unsafe fn get_many_key_value_unchecked_mut<Q: ?Sized, const N:\nusize>(&mut Self, [&Q; ]) -> Option<[(&K, &mut V); ]> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Attempts to get mutable references to `N` values in the map at once, with immutable\n references to the corresponding keys, without validating that the values are unique.","sig":null,"attributes":[{"value":"/ Attempts to get mutable references to `N` values in the map at once, with immutable","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143170,"byte_end":143257,"line_start":1383,"line_end":1383,"column_start":5,"column_end":92}},{"value":"/ references to the corresponding keys, without validating that the values are unique.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143262,"byte_end":143350,"line_start":1384,"line_end":1384,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143355,"byte_end":143358,"line_start":1385,"line_end":1385,"column_start":5,"column_end":8}},{"value":"/ Returns an array of length `N` with the results of each query. `None` will be returned if","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143363,"byte_end":143456,"line_start":1386,"line_end":1386,"column_start":5,"column_end":98}},{"value":"/ any of the keys are missing.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143461,"byte_end":143493,"line_start":1387,"line_end":1387,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143498,"byte_end":143501,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ For a safe alternative see [`get_many_key_value_mut`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143506,"byte_end":143564,"line_start":1389,"line_end":1389,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143569,"byte_end":143572,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143577,"byte_end":143589,"line_start":1391,"line_end":1391,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143594,"byte_end":143597,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ Calling this method with overlapping keys is *[undefined behavior]* even if the resulting","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143602,"byte_end":143695,"line_start":1393,"line_end":1393,"column_start":5,"column_end":98}},{"value":"/ references are not used.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143700,"byte_end":143728,"line_start":1394,"line_end":1394,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143733,"byte_end":143736,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143741,"byte_end":143837,"line_start":1396,"line_end":1396,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143842,"byte_end":143845,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143850,"byte_end":143864,"line_start":1398,"line_end":1398,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143869,"byte_end":143872,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143877,"byte_end":143884,"line_start":1400,"line_end":1400,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143889,"byte_end":143916,"line_start":1401,"line_end":1401,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143921,"byte_end":143924,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ let mut libraries = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143929,"byte_end":143968,"line_start":1403,"line_end":1403,"column_start":5,"column_end":44}},{"value":"/ libraries.insert(\"Bodleian Library\".to_string(), 1602);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":143973,"byte_end":144032,"line_start":1404,"line_end":1404,"column_start":5,"column_end":64}},{"value":"/ libraries.insert(\"Athenæum\".to_string(), 1807);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144037,"byte_end":144089,"line_start":1405,"line_end":1405,"column_start":5,"column_end":56}},{"value":"/ libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144094,"byte_end":144168,"line_start":1406,"line_end":1406,"column_start":5,"column_end":79}},{"value":"/ libraries.insert(\"Library of Congress\".to_string(), 1800);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144173,"byte_end":144235,"line_start":1407,"line_end":1407,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144240,"byte_end":144243,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ let got = libraries.get_many_key_value_mut([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144248,"byte_end":144296,"line_start":1409,"line_end":1409,"column_start":5,"column_end":53}},{"value":"/     \"Bodleian Library\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144301,"byte_end":144328,"line_start":1410,"line_end":1410,"column_start":5,"column_end":32}},{"value":"/     \"Herzogin-Anna-Amalia-Bibliothek\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144333,"byte_end":144375,"line_start":1411,"line_end":1411,"column_start":5,"column_end":47}},{"value":"/ ]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144380,"byte_end":144387,"line_start":1412,"line_end":1412,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144392,"byte_end":144407,"line_start":1413,"line_end":1413,"column_start":5,"column_end":20}},{"value":"/     got,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144412,"byte_end":144424,"line_start":1414,"line_end":1414,"column_start":5,"column_end":17}},{"value":"/     Some([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144429,"byte_end":144443,"line_start":1415,"line_end":1415,"column_start":5,"column_end":19}},{"value":"/         (&\"Bodleian Library\".to_string(), &mut 1602),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144448,"byte_end":144505,"line_start":1416,"line_end":1416,"column_start":5,"column_end":62}},{"value":"/         (&\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), &mut 1691),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144510,"byte_end":144582,"line_start":1417,"line_end":1417,"column_start":5,"column_end":77}},{"value":"/     ]),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144587,"byte_end":144598,"line_start":1418,"line_end":1418,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144603,"byte_end":144609,"line_start":1419,"line_end":1419,"column_start":5,"column_end":11}},{"value":"/ // Missing keys result in None","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144614,"byte_end":144648,"line_start":1420,"line_end":1420,"column_start":5,"column_end":39}},{"value":"/ let got = libraries.get_many_key_value_mut([","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144653,"byte_end":144701,"line_start":1421,"line_end":1421,"column_start":5,"column_end":53}},{"value":"/     \"Bodleian Library\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144706,"byte_end":144733,"line_start":1422,"line_end":1422,"column_start":5,"column_end":32}},{"value":"/     \"Gewandhaus\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144738,"byte_end":144759,"line_start":1423,"line_end":1423,"column_start":5,"column_end":26}},{"value":"/ ]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144764,"byte_end":144771,"line_start":1424,"line_end":1424,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(got, None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144776,"byte_end":144802,"line_start":1425,"line_end":1425,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":144807,"byte_end":144814,"line_start":1426,"line_end":1426,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147126,"byte_end":147132,"line_start":1503,"line_end":1503,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S, A>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146151,"byte_end":146193,"line_start":1477,"line_end":1477,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146198,"byte_end":146201,"line_start":1478,"line_end":1478,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146206,"byte_end":146273,"line_start":1479,"line_end":1479,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146278,"byte_end":146281,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146286,"byte_end":146361,"line_start":1481,"line_end":1481,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146366,"byte_end":146437,"line_start":1482,"line_end":1482,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146442,"byte_end":146515,"line_start":1483,"line_end":1483,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146520,"byte_end":146548,"line_start":1484,"line_end":1484,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146553,"byte_end":146556,"line_start":1485,"line_end":1485,"column_start":5,"column_end":8}},{"value":"/ [`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146561,"byte_end":146641,"line_start":1486,"line_end":1486,"column_start":5,"column_end":85}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146646,"byte_end":146714,"line_start":1487,"line_end":1487,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146719,"byte_end":146722,"line_start":1488,"line_end":1488,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146727,"byte_end":146741,"line_start":1489,"line_end":1489,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146746,"byte_end":146749,"line_start":1490,"line_end":1490,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146754,"byte_end":146761,"line_start":1491,"line_end":1491,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146766,"byte_end":146793,"line_start":1492,"line_end":1492,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146798,"byte_end":146801,"line_start":1493,"line_end":1493,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146806,"byte_end":146839,"line_start":1494,"line_end":1494,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146844,"byte_end":146886,"line_start":1495,"line_end":1495,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146891,"byte_end":146929,"line_start":1496,"line_end":1496,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146934,"byte_end":146937,"line_start":1497,"line_end":1497,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146942,"byte_end":146966,"line_start":1498,"line_end":1498,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":146971,"byte_end":147018,"line_start":1499,"line_end":1499,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147023,"byte_end":147053,"line_start":1500,"line_end":1500,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147058,"byte_end":147065,"line_start":1501,"line_end":1501,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148498,"byte_end":148521,"line_start":1535,"line_end":1535,"column_start":12,"column_end":35},"name":"insert_unique_unchecked","qualname":"<HashMap<K, V, S, A>>::insert_unique_unchecked","value":"pub fn insert_unique_unchecked(&mut Self, K, V) -> (&K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair into the map without checking\n if the key already exists in the map.","sig":null,"attributes":[{"value":"/ Insert a key-value pair into the map without checking","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147524,"byte_end":147581,"line_start":1514,"line_end":1514,"column_start":5,"column_end":62}},{"value":"/ if the key already exists in the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147586,"byte_end":147627,"line_start":1515,"line_end":1515,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147632,"byte_end":147635,"line_start":1516,"line_end":1516,"column_start":5,"column_end":8}},{"value":"/ Returns a reference to the key and value just inserted.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147640,"byte_end":147699,"line_start":1517,"line_end":1517,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147704,"byte_end":147707,"line_start":1518,"line_end":1518,"column_start":5,"column_end":8}},{"value":"/ This operation is safe if a key does not exist in the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147712,"byte_end":147774,"line_start":1519,"line_end":1519,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147779,"byte_end":147782,"line_start":1520,"line_end":1520,"column_start":5,"column_end":8}},{"value":"/ However, if a key exists in the map already, the behavior is unspecified:","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147787,"byte_end":147864,"line_start":1521,"line_end":1521,"column_start":5,"column_end":82}},{"value":"/ this operation may panic, loop forever, or any following operation with the map","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147869,"byte_end":147952,"line_start":1522,"line_end":1522,"column_start":5,"column_end":88}},{"value":"/ may panic, loop forever or return arbitrary result.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":147957,"byte_end":148012,"line_start":1523,"line_end":1523,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148017,"byte_end":148020,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ That said, this operation (and following operations) are guaranteed to","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148025,"byte_end":148099,"line_start":1525,"line_end":1525,"column_start":5,"column_end":79}},{"value":"/ not violate memory safety.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148104,"byte_end":148134,"line_start":1526,"line_end":1526,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148139,"byte_end":148142,"line_start":1527,"line_end":1527,"column_start":5,"column_end":8}},{"value":"/ This operation is faster than regular insert, because it does not perform","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148147,"byte_end":148224,"line_start":1528,"line_end":1528,"column_start":5,"column_end":82}},{"value":"/ lookup before insertion.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148229,"byte_end":148257,"line_start":1529,"line_end":1529,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148262,"byte_end":148265,"line_start":1530,"line_end":1530,"column_start":5,"column_end":8}},{"value":"/ This operation is useful during initial population of the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148270,"byte_end":148336,"line_start":1531,"line_end":1531,"column_start":5,"column_end":71}},{"value":"/ For example, when constructing a map from another map, we know","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148341,"byte_end":148407,"line_start":1532,"line_end":1532,"column_start":5,"column_end":71}},{"value":"/ that keys are unique.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148412,"byte_end":148437,"line_start":1533,"line_end":1533,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149619,"byte_end":149629,"line_start":1568,"line_end":1568,"column_start":12,"column_end":22},"name":"try_insert","qualname":"<HashMap<K, V, S, A>>::try_insert","value":"pub fn try_insert(&mut Self, K, V)\n-> Result<&mut V, OccupiedError<, K, V, S, A>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to insert a key-value pair into the map, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Tries to insert a key-value pair into the map, and returns","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148850,"byte_end":148912,"line_start":1544,"line_end":1544,"column_start":5,"column_end":67}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148917,"byte_end":148967,"line_start":1545,"line_end":1545,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148972,"byte_end":148975,"line_start":1546,"line_end":1546,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148980,"byte_end":148992,"line_start":1547,"line_end":1547,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":148997,"byte_end":149000,"line_start":1548,"line_end":1548,"column_start":5,"column_end":8}},{"value":"/ If the map already had this key present, nothing is updated, and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149005,"byte_end":149073,"line_start":1549,"line_end":1549,"column_start":5,"column_end":73}},{"value":"/ an error containing the occupied entry and the value is returned.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149078,"byte_end":149147,"line_start":1550,"line_end":1550,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149152,"byte_end":149155,"line_start":1551,"line_end":1551,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149160,"byte_end":149174,"line_start":1552,"line_end":1552,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149179,"byte_end":149182,"line_start":1553,"line_end":1553,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149187,"byte_end":149203,"line_start":1554,"line_end":1554,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149208,"byte_end":149211,"line_start":1555,"line_end":1555,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149216,"byte_end":149223,"line_start":1556,"line_end":1556,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149228,"byte_end":149255,"line_start":1557,"line_end":1557,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149260,"byte_end":149263,"line_start":1558,"line_end":1558,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149268,"byte_end":149301,"line_start":1559,"line_end":1559,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149306,"byte_end":149361,"line_start":1560,"line_end":1560,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149366,"byte_end":149369,"line_start":1561,"line_end":1561,"column_start":5,"column_end":8}},{"value":"/ let err = map.try_insert(37, \"b\").unwrap_err();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149374,"byte_end":149425,"line_start":1562,"line_end":1562,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(err.entry.key(), &37);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149430,"byte_end":149467,"line_start":1563,"line_end":1563,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(err.entry.get(), &\"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149472,"byte_end":149510,"line_start":1564,"line_end":1564,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(err.value, \"b\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149515,"byte_end":149546,"line_start":1565,"line_end":1565,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149551,"byte_end":149558,"line_start":1566,"line_end":1566,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150664,"byte_end":150670,"line_start":1600,"line_end":1600,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S, A>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":149930,"byte_end":150003,"line_start":1579,"line_end":1579,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150008,"byte_end":150038,"line_start":1580,"line_end":1580,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150043,"byte_end":150046,"line_start":1581,"line_end":1581,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150051,"byte_end":150114,"line_start":1582,"line_end":1582,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150119,"byte_end":150186,"line_start":1583,"line_end":1583,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150191,"byte_end":150208,"line_start":1584,"line_end":1584,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150213,"byte_end":150216,"line_start":1585,"line_end":1585,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150221,"byte_end":150280,"line_start":1586,"line_end":1586,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150285,"byte_end":150349,"line_start":1587,"line_end":1587,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150354,"byte_end":150357,"line_start":1588,"line_end":1588,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150362,"byte_end":150376,"line_start":1589,"line_end":1589,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150381,"byte_end":150384,"line_start":1590,"line_end":1590,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150389,"byte_end":150396,"line_start":1591,"line_end":1591,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150401,"byte_end":150428,"line_start":1592,"line_end":1592,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150433,"byte_end":150436,"line_start":1593,"line_end":1593,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150441,"byte_end":150474,"line_start":1594,"line_end":1594,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150479,"byte_end":150502,"line_start":1595,"line_end":1595,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150507,"byte_end":150549,"line_start":1596,"line_end":1596,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150554,"byte_end":150591,"line_start":1597,"line_end":1597,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150596,"byte_end":150603,"line_start":1598,"line_end":1598,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151701,"byte_end":151713,"line_start":1633,"line_end":1633,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<HashMap<K, V, S, A>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the\n key was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the stored key and value if the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":150952,"byte_end":151025,"line_start":1612,"line_end":1612,"column_start":5,"column_end":78}},{"value":"/ key was previously in the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151030,"byte_end":151064,"line_start":1613,"line_end":1613,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151069,"byte_end":151072,"line_start":1614,"line_end":1614,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151077,"byte_end":151140,"line_start":1615,"line_end":1615,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151145,"byte_end":151212,"line_start":1616,"line_end":1616,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151217,"byte_end":151234,"line_start":1617,"line_end":1617,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151239,"byte_end":151242,"line_start":1618,"line_end":1618,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151247,"byte_end":151306,"line_start":1619,"line_end":1619,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151311,"byte_end":151375,"line_start":1620,"line_end":1620,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151380,"byte_end":151383,"line_start":1621,"line_end":1621,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151388,"byte_end":151402,"line_start":1622,"line_end":1622,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151407,"byte_end":151410,"line_start":1623,"line_end":1623,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151415,"byte_end":151422,"line_start":1624,"line_end":1624,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151427,"byte_end":151454,"line_start":1625,"line_end":1625,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151459,"byte_end":151462,"line_start":1626,"line_end":1626,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151467,"byte_end":151500,"line_start":1627,"line_end":1627,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151505,"byte_end":151528,"line_start":1628,"line_end":1628,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove_entry(&1), Some((1, \"a\")));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151533,"byte_end":151586,"line_start":1629,"line_end":1629,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151591,"byte_end":151628,"line_start":1630,"line_end":1630,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151633,"byte_end":151640,"line_start":1631,"line_end":1631,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153953,"byte_end":153966,"line_start":1676,"line_end":1676,"column_start":12,"column_end":25},"name":"raw_entry_mut","qualname":"<HashMap<K, V, S, A>>::raw_entry_mut","value":"pub fn raw_entry_mut(&mut Self) -> RawEntryBuilderMut<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw entry builder for the HashMap.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152013,"byte_end":152061,"line_start":1644,"line_end":1644,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152066,"byte_end":152069,"line_start":1645,"line_end":1645,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152074,"byte_end":152143,"line_start":1646,"line_end":1646,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152148,"byte_end":152221,"line_start":1647,"line_end":1647,"column_start":5,"column_end":78}},{"value":"/ then manually searched. After this, insertions into a vacant entry","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152226,"byte_end":152296,"line_start":1648,"line_end":1648,"column_start":5,"column_end":75}},{"value":"/ still require an owned key to be provided.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152301,"byte_end":152347,"line_start":1649,"line_end":1649,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152352,"byte_end":152355,"line_start":1650,"line_end":1650,"column_start":5,"column_end":8}},{"value":"/ Raw entries are useful for such exotic situations as:","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152360,"byte_end":152417,"line_start":1651,"line_end":1651,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152422,"byte_end":152425,"line_start":1652,"line_end":1652,"column_start":5,"column_end":8}},{"value":"/ * Hash memoization","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152430,"byte_end":152452,"line_start":1653,"line_end":1653,"column_start":5,"column_end":27}},{"value":"/ * Deferring the creation of an owned key until it is known to be required","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152457,"byte_end":152534,"line_start":1654,"line_end":1654,"column_start":5,"column_end":82}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152539,"byte_end":152603,"line_start":1655,"line_end":1655,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152608,"byte_end":152668,"line_start":1656,"line_end":1656,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152673,"byte_end":152676,"line_start":1657,"line_end":1657,"column_start":5,"column_end":8}},{"value":"/ Because raw entries provide much more low-level control, it's much easier","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152681,"byte_end":152758,"line_start":1658,"line_end":1658,"column_start":5,"column_end":82}},{"value":"/ to put the HashMap into an inconsistent state which, while memory-safe,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152763,"byte_end":152838,"line_start":1659,"line_end":1659,"column_start":5,"column_end":80}},{"value":"/ will cause the map to produce seemingly random results. Higher-level and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152843,"byte_end":152919,"line_start":1660,"line_end":1660,"column_start":5,"column_end":81}},{"value":"/ more foolproof APIs like `entry` should be preferred when possible.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":152924,"byte_end":152995,"line_start":1661,"line_end":1661,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153000,"byte_end":153003,"line_start":1662,"line_end":1662,"column_start":5,"column_end":8}},{"value":"/ In particular, the hash used to initialized the raw entry must still be","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153008,"byte_end":153083,"line_start":1663,"line_end":1663,"column_start":5,"column_end":80}},{"value":"/ consistent with the hash of the key that is ultimately stored in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153088,"byte_end":153167,"line_start":1664,"line_end":1664,"column_start":5,"column_end":84}},{"value":"/ This is because implementations of HashMap may need to recompute hashes","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153172,"byte_end":153247,"line_start":1665,"line_end":1665,"column_start":5,"column_end":80}},{"value":"/ when resizing, at which point only the keys are available.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153252,"byte_end":153314,"line_start":1666,"line_end":1666,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153319,"byte_end":153322,"line_start":1667,"line_end":1667,"column_start":5,"column_end":8}},{"value":"/ Raw entries give mutable access to the keys. This must not be used","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153327,"byte_end":153397,"line_start":1668,"line_end":1668,"column_start":5,"column_end":75}},{"value":"/ to modify how the key would compare or hash, as the map will not re-evaluate","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153402,"byte_end":153482,"line_start":1669,"line_end":1669,"column_start":5,"column_end":85}},{"value":"/ where the key should go, meaning the keys may become \"lost\" if their","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153487,"byte_end":153559,"line_start":1670,"line_end":1670,"column_start":5,"column_end":77}},{"value":"/ location does not reflect their state. For instance, if you change a key","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153564,"byte_end":153640,"line_start":1671,"line_end":1671,"column_start":5,"column_end":81}},{"value":"/ so that the map now contains keys which compare equal, search may start","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153645,"byte_end":153720,"line_start":1672,"line_end":1672,"column_start":5,"column_end":80}},{"value":"/ acting erratically, with two keys randomly masking each other. Implementations","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153725,"byte_end":153807,"line_start":1673,"line_end":1673,"column_start":5,"column_end":87}},{"value":"/ are free to assume this doesn't happen (within the limits of memory-safety).","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":153812,"byte_end":153892,"line_start":1674,"line_end":1674,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154807,"byte_end":154816,"line_start":1696,"line_end":1696,"column_start":12,"column_end":21},"name":"raw_entry","qualname":"<HashMap<K, V, S, A>>::raw_entry","value":"pub fn raw_entry(&Self) -> RawEntryBuilder<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw immutable entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw immutable entry builder for the HashMap.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154070,"byte_end":154128,"line_start":1680,"line_end":1680,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154133,"byte_end":154136,"line_start":1681,"line_end":1681,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154141,"byte_end":154210,"line_start":1682,"line_end":1682,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154215,"byte_end":154288,"line_start":1683,"line_end":1683,"column_start":5,"column_end":78}},{"value":"/ then manually searched.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154293,"byte_end":154320,"line_start":1684,"line_end":1684,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154325,"byte_end":154328,"line_start":1685,"line_end":1685,"column_start":5,"column_end":8}},{"value":"/ This is useful for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154333,"byte_end":154355,"line_start":1686,"line_end":1686,"column_start":5,"column_end":27}},{"value":"/ * Hash memoization","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154360,"byte_end":154382,"line_start":1687,"line_end":1687,"column_start":5,"column_end":27}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154387,"byte_end":154451,"line_start":1688,"line_end":1688,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154456,"byte_end":154516,"line_start":1689,"line_end":1689,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154521,"byte_end":154524,"line_start":1690,"line_end":1690,"column_start":5,"column_end":8}},{"value":"/ Unless you are in such a situation, higher-level and more foolproof APIs like","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154529,"byte_end":154610,"line_start":1691,"line_end":1691,"column_start":5,"column_end":86}},{"value":"/ `get` should be preferred.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154615,"byte_end":154645,"line_start":1692,"line_end":1692,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154650,"byte_end":154653,"line_start":1693,"line_end":1693,"column_start":5,"column_end":8}},{"value":"/ Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154658,"byte_end":154746,"line_start":1694,"line_end":1694,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":765},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157329,"byte_end":157333,"line_start":1798,"line_end":1798,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770}],"decl_id":null,"docs":" An iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157074,"byte_end":157122,"line_start":1791,"line_end":1791,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157123,"byte_end":157126,"line_start":1792,"line_end":1792,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashMap`]. See its","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157127,"byte_end":157202,"line_start":1793,"line_end":1793,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157203,"byte_end":157230,"line_start":1794,"line_end":1794,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157231,"byte_end":157234,"line_start":1795,"line_end":1795,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.HashMap.html#method.iter","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157235,"byte_end":157280,"line_start":1796,"line_end":1796,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157281,"byte_end":157317,"line_start":1797,"line_end":1797,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":779},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158153,"byte_end":158160,"line_start":1827,"line_end":1827,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784}],"decl_id":null,"docs":" A mutable iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157879,"byte_end":157934,"line_start":1820,"line_end":1820,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157935,"byte_end":157938,"line_start":1821,"line_end":1821,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157939,"byte_end":158018,"line_start":1822,"line_end":1822,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158019,"byte_end":158046,"line_start":1823,"line_end":1823,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158047,"byte_end":158050,"line_start":1824,"line_end":1824,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.HashMap.html#method.iter_mut","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158051,"byte_end":158104,"line_start":1825,"line_end":1825,"column_start":1,"column_end":54}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158105,"byte_end":158141,"line_start":1826,"line_end":1826,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":792},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159159,"byte_end":159167,"line_start":1856,"line_end":1856,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":796}],"decl_id":null,"docs":" An owning iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158843,"byte_end":158898,"line_start":1849,"line_end":1849,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158899,"byte_end":158902,"line_start":1850,"line_end":1850,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashMap`]","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158903,"byte_end":158974,"line_start":1851,"line_end":1851,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158975,"byte_end":159050,"line_start":1852,"line_end":1852,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159051,"byte_end":159054,"line_start":1853,"line_end":1853,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.HashMap.html#method.into_iter","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159055,"byte_end":159110,"line_start":1854,"line_end":1854,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159111,"byte_end":159147,"line_start":1855,"line_end":1855,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":802},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159843,"byte_end":159851,"line_start":1878,"line_end":1878,"column_start":12,"column_end":20},"name":"IntoKeys","qualname":"::map::IntoKeys","value":"IntoKeys {  }","parent":null,"children":[{"krate":0,"index":806}],"decl_id":null,"docs":" An owning iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the keys of a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159569,"byte_end":159621,"line_start":1871,"line_end":1871,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159622,"byte_end":159625,"line_start":1872,"line_end":1872,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_keys`] method on [`HashMap`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159626,"byte_end":159698,"line_start":1873,"line_end":1873,"column_start":1,"column_end":73}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159699,"byte_end":159734,"line_start":1874,"line_end":1874,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159735,"byte_end":159738,"line_start":1875,"line_end":1875,"column_start":1,"column_end":4}},{"value":"/ [`into_keys`]: struct.HashMap.html#method.into_keys","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159739,"byte_end":159794,"line_start":1876,"line_end":1876,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159795,"byte_end":159831,"line_start":1877,"line_end":1877,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":830},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160978,"byte_end":160988,"line_start":1919,"line_end":1919,"column_start":12,"column_end":22},"name":"IntoValues","qualname":"::map::IntoValues","value":"IntoValues {  }","parent":null,"children":[{"krate":0,"index":834}],"decl_id":null,"docs":" An owning iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the values of a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160696,"byte_end":160750,"line_start":1912,"line_end":1912,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160751,"byte_end":160754,"line_start":1913,"line_end":1913,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_values`] method on [`HashMap`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160755,"byte_end":160829,"line_start":1914,"line_end":1914,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160830,"byte_end":160865,"line_start":1915,"line_end":1915,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160866,"byte_end":160869,"line_start":1916,"line_end":1916,"column_start":1,"column_end":4}},{"value":"/ [`into_values`]: struct.HashMap.html#method.into_values","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160870,"byte_end":160929,"line_start":1917,"line_end":1917,"column_start":1,"column_end":60}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160930,"byte_end":160966,"line_start":1918,"line_end":1918,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":858},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162086,"byte_end":162090,"line_start":1960,"line_end":1960,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":862}],"decl_id":null,"docs":" An iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161834,"byte_end":161879,"line_start":1953,"line_end":1953,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161880,"byte_end":161883,"line_start":1954,"line_end":1954,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`HashMap`]. See its","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161884,"byte_end":161959,"line_start":1955,"line_end":1955,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161960,"byte_end":161987,"line_start":1956,"line_end":1956,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161988,"byte_end":161991,"line_start":1957,"line_end":1957,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.HashMap.html#method.keys","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161992,"byte_end":162037,"line_start":1958,"line_end":1958,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162038,"byte_end":162074,"line_start":1959,"line_end":1959,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":871},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162814,"byte_end":162820,"line_start":1987,"line_end":1987,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":875}],"decl_id":null,"docs":" An iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162554,"byte_end":162601,"line_start":1980,"line_end":1980,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162602,"byte_end":162605,"line_start":1981,"line_end":1981,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`HashMap`]. See its","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162606,"byte_end":162683,"line_start":1982,"line_end":1982,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162684,"byte_end":162711,"line_start":1983,"line_end":1983,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162712,"byte_end":162715,"line_start":1984,"line_end":1984,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.HashMap.html#method.values","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162716,"byte_end":162765,"line_start":1985,"line_end":1985,"column_start":1,"column_end":50}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162766,"byte_end":162802,"line_start":1986,"line_end":1986,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":884},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163556,"byte_end":163561,"line_start":2014,"line_end":2014,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":889}],"decl_id":null,"docs":" A draining iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163290,"byte_end":163346,"line_start":2007,"line_end":2007,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163347,"byte_end":163350,"line_start":2008,"line_end":2008,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashMap`]. See its","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163351,"byte_end":163427,"line_start":2009,"line_end":2009,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163428,"byte_end":163455,"line_start":2010,"line_end":2010,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163456,"byte_end":163459,"line_start":2011,"line_end":2011,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.HashMap.html#method.drain","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163460,"byte_end":163507,"line_start":2012,"line_end":2012,"column_start":1,"column_end":48}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163508,"byte_end":163544,"line_start":2013,"line_end":2013,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":895},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":164290,"byte_end":164301,"line_start":2036,"line_end":2036,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::map::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902}],"decl_id":null,"docs":" A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163969,"byte_end":164059,"line_start":2029,"line_end":2029,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":164060,"byte_end":164063,"line_start":2030,"line_end":2030,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashMap`]. See its","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":164064,"byte_end":164147,"line_start":2031,"line_end":2031,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":164148,"byte_end":164175,"line_start":2032,"line_end":2032,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":164176,"byte_end":164179,"line_start":2033,"line_end":2033,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashMap.html#method.drain_filter","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":164180,"byte_end":164241,"line_start":2034,"line_end":2034,"column_start":1,"column_end":62}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":164242,"byte_end":164278,"line_start":2035,"line_end":2035,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":943},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166555,"byte_end":166564,"line_start":2119,"line_end":2119,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":947}],"decl_id":null,"docs":" A mutable iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166276,"byte_end":166330,"line_start":2112,"line_end":2112,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166331,"byte_end":166334,"line_start":2113,"line_end":2113,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166335,"byte_end":166416,"line_start":2114,"line_end":2114,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166417,"byte_end":166444,"line_start":2115,"line_end":2115,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166445,"byte_end":166448,"line_start":2116,"line_end":2116,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.HashMap.html#method.values_mut","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166449,"byte_end":166506,"line_start":2117,"line_end":2117,"column_start":1,"column_end":58}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166507,"byte_end":166543,"line_start":2118,"line_end":2118,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":948},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166851,"byte_end":166869,"line_start":2128,"line_end":2128,"column_start":12,"column_end":30},"name":"RawEntryBuilderMut","qualname":"::map::RawEntryBuilderMut","value":"RawEntryBuilderMut {  }","parent":null,"children":[{"krate":0,"index":954}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166610,"byte_end":166694,"line_start":2123,"line_end":2123,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166695,"byte_end":166698,"line_start":2124,"line_end":2124,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry_mut`] docs for usage examples.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166699,"byte_end":166762,"line_start":2125,"line_end":2125,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166763,"byte_end":166766,"line_start":2126,"line_end":2126,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166767,"byte_end":166839,"line_start":2127,"line_end":2127,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":961},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167539,"byte_end":167547,"line_start":2145,"line_end":2145,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::RawEntryMut::Occupied","value":"RawEntryMut::Occupied(RawOccupiedEntryMut)","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167512,"byte_end":167534,"line_start":2144,"line_end":2144,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":964},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167614,"byte_end":167620,"line_start":2147,"line_end":2147,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::RawEntryMut::Vacant","value":"RawEntryMut::Vacant(RawVacantEntryMut)","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167590,"byte_end":167609,"line_start":2146,"line_end":2146,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":955},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167450,"byte_end":167461,"line_start":2143,"line_end":2143,"column_start":10,"column_end":21},"name":"RawEntryMut","qualname":"::map::RawEntryMut","value":"pub enum RawEntryMut<'a, K, V, S, A: Allocator + Clone = Global> {\n    Occupied(RawOccupiedEntryMut),\n    Vacant(RawVacantEntryMut),\n}","parent":null,"children":[{"krate":0,"index":961},{"krate":0,"index":964}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":166957,"byte_end":167037,"line_start":2132,"line_end":2132,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167038,"byte_end":167041,"line_start":2133,"line_end":2133,"column_start":1,"column_end":4}},{"value":"/ This is a lower-level version of [`Entry`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167042,"byte_end":167089,"line_start":2134,"line_end":2134,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167090,"byte_end":167093,"line_start":2135,"line_end":2135,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167094,"byte_end":167177,"line_start":2136,"line_end":2136,"column_start":1,"column_end":84}},{"value":"/ then calling one of the methods of that [`RawEntryBuilderMut`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167178,"byte_end":167245,"line_start":2137,"line_end":2137,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167246,"byte_end":167249,"line_start":2138,"line_end":2138,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167250,"byte_end":167286,"line_start":2139,"line_end":2139,"column_start":1,"column_end":37}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167287,"byte_end":167317,"line_start":2140,"line_end":2140,"column_start":1,"column_end":31}},{"value":"/ [`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167318,"byte_end":167381,"line_start":2141,"line_end":2141,"column_start":1,"column_end":64}},{"value":"/ [`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167382,"byte_end":167440,"line_start":2142,"line_end":2142,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":967},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167812,"byte_end":167831,"line_start":2154,"line_end":2154,"column_start":12,"column_end":31},"name":"RawOccupiedEntryMut","qualname":"::map::RawOccupiedEntryMut","value":"RawOccupiedEntryMut {  }","parent":null,"children":[{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167660,"byte_end":167709,"line_start":2150,"line_end":2150,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167710,"byte_end":167753,"line_start":2151,"line_end":2151,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167754,"byte_end":167757,"line_start":2152,"line_end":2152,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":167758,"byte_end":167800,"line_start":2153,"line_end":2153,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":986},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168424,"byte_end":168441,"line_start":2181,"line_end":2181,"column_start":12,"column_end":29},"name":"RawVacantEntryMut","qualname":"::map::RawVacantEntryMut","value":"RawVacantEntryMut {  }","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":993}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168275,"byte_end":168321,"line_start":2177,"line_end":2177,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168322,"byte_end":168365,"line_start":2178,"line_end":2178,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168366,"byte_end":168369,"line_start":2179,"line_end":2179,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168370,"byte_end":168412,"line_start":2180,"line_end":2180,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":994},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168785,"byte_end":168800,"line_start":2191,"line_end":2191,"column_start":12,"column_end":27},"name":"RawEntryBuilder","qualname":"::map::RawEntryBuilder","value":"RawEntryBuilder {  }","parent":null,"children":[{"krate":0,"index":1000}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168556,"byte_end":168640,"line_start":2186,"line_end":2186,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168641,"byte_end":168644,"line_start":2187,"line_end":2187,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry`] docs for usage examples.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168645,"byte_end":168704,"line_start":2188,"line_end":2188,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168705,"byte_end":168708,"line_start":2189,"line_end":2189,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168709,"byte_end":168773,"line_start":2190,"line_end":2190,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":169117,"byte_end":169125,"line_start":2199,"line_end":2199,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilderMut>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> RawEntryMut where S: BuildHasher,\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168965,"byte_end":169012,"line_start":2196,"line_end":2196,"column_start":5,"column_end":52}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":169066,"byte_end":169105,"line_start":2198,"line_end":2198,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":169520,"byte_end":169543,"line_start":2212,"line_end":2212,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilderMut>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q) -> RawEntryMut where\nK: Borrow<Q>, Q: Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key and its hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key and its hash.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":169390,"byte_end":169450,"line_start":2209,"line_end":2209,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":169455,"byte_end":169464,"line_start":2210,"line_end":2210,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":169469,"byte_end":169508,"line_start":2211,"line_end":2211,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":169950,"byte_end":169959,"line_start":2225,"line_end":2225,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilderMut>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> RawEntryMut where for<'b> F: FnMut(&'b K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given hash.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":169797,"byte_end":169845,"line_start":2222,"line_end":2222,"column_start":5,"column_end":53}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":169899,"byte_end":169938,"line_start":2224,"line_end":2224,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":170985,"byte_end":170993,"line_start":2255,"line_end":2255,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilder>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> Option<(&'a K, &'a V)> where\nS: BuildHasher, K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by key.\n","sig":null,"attributes":[{"value":"/ Access an entry by key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":170853,"byte_end":170880,"line_start":2252,"line_end":2252,"column_start":5,"column_end":32}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":170934,"byte_end":170973,"line_start":2254,"line_end":2254,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":171400,"byte_end":171423,"line_start":2268,"line_end":2268,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilder>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q)\n-> Option<(&'a K, &'a V)> where K: Borrow<Q>, Q: Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by a key and its hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by a key and its hash.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":171253,"byte_end":171295,"line_start":2265,"line_end":2265,"column_start":5,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":171349,"byte_end":171388,"line_start":2267,"line_end":2267,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172067,"byte_end":172076,"line_start":2290,"line_end":2290,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilder>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> Option<(&'a K, &'a V)> where F: FnMut(&K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by hash.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":171934,"byte_end":171962,"line_start":2287,"line_end":2287,"column_start":5,"column_end":33}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172016,"byte_end":172055,"line_start":2289,"line_end":2289,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172745,"byte_end":172751,"line_start":2312,"line_end":2312,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawEntryMut>::insert","value":"pub fn insert(Self, K, V) -> RawOccupiedEntryMut where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns a RawOccupiedEntryMut.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns a RawOccupiedEntryMut.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172301,"byte_end":172368,"line_start":2299,"line_end":2299,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172373,"byte_end":172376,"line_start":2300,"line_end":2300,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172381,"byte_end":172395,"line_start":2301,"line_end":2301,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172400,"byte_end":172403,"line_start":2302,"line_end":2302,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172408,"byte_end":172415,"line_start":2303,"line_end":2303,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172420,"byte_end":172447,"line_start":2304,"line_end":2304,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172452,"byte_end":172455,"line_start":2305,"line_end":2305,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172460,"byte_end":172513,"line_start":2306,"line_end":2306,"column_start":5,"column_end":58}},{"value":"/ let entry = map.raw_entry_mut().from_key(\"horseyland\").insert(\"horseyland\", 37);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172518,"byte_end":172602,"line_start":2307,"line_end":2307,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172607,"byte_end":172610,"line_start":2308,"line_end":2308,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.remove_entry(), (\"horseyland\", 37));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172615,"byte_end":172672,"line_start":2309,"line_end":2309,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172677,"byte_end":172684,"line_start":2310,"line_end":2310,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173734,"byte_end":173743,"line_start":2343,"line_end":2343,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RawEntryMut>::or_insert","value":"pub fn or_insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173111,"byte_end":173193,"line_start":2326,"line_end":2326,"column_start":5,"column_end":87}},{"value":"/ mutable references to the key and value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173198,"byte_end":173255,"line_start":2327,"line_end":2327,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173260,"byte_end":173263,"line_start":2328,"line_end":2328,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173268,"byte_end":173282,"line_start":2329,"line_end":2329,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173287,"byte_end":173290,"line_start":2330,"line_end":2330,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173295,"byte_end":173302,"line_start":2331,"line_end":2331,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173307,"byte_end":173334,"line_start":2332,"line_end":2332,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173339,"byte_end":173342,"line_start":2333,"line_end":2333,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173347,"byte_end":173400,"line_start":2334,"line_end":2334,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173405,"byte_end":173408,"line_start":2335,"line_end":2335,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173413,"byte_end":173485,"line_start":2336,"line_end":2336,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173490,"byte_end":173526,"line_start":2337,"line_end":2337,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173531,"byte_end":173534,"line_start":2338,"line_end":2338,"column_start":5,"column_end":8}},{"value":"/ *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173539,"byte_end":173620,"line_start":2339,"line_end":2339,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173625,"byte_end":173661,"line_start":2340,"line_end":2340,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":173666,"byte_end":173673,"line_start":2341,"line_end":2341,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174647,"byte_end":174661,"line_start":2371,"line_end":2371,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RawEntryMut>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> (&'a mut K, &'a mut V) where F: FnOnce()\n-> (K, V), K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174057,"byte_end":174150,"line_start":2354,"line_end":2354,"column_start":5,"column_end":98}},{"value":"/ and returns mutable references to the key and value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174155,"byte_end":174224,"line_start":2355,"line_end":2355,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174229,"byte_end":174232,"line_start":2356,"line_end":2356,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174237,"byte_end":174251,"line_start":2357,"line_end":2357,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174256,"byte_end":174259,"line_start":2358,"line_end":2358,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174264,"byte_end":174271,"line_start":2359,"line_end":2359,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174276,"byte_end":174303,"line_start":2360,"line_end":2360,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174308,"byte_end":174311,"line_start":2361,"line_end":2361,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174316,"byte_end":174372,"line_start":2362,"line_end":2362,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174377,"byte_end":174380,"line_start":2363,"line_end":2363,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174385,"byte_end":174450,"line_start":2364,"line_end":2364,"column_start":5,"column_end":70}},{"value":"/     (\"poneyland\", \"hoho\".to_string())","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174455,"byte_end":174496,"line_start":2365,"line_end":2365,"column_start":5,"column_end":46}},{"value":"/ });","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174501,"byte_end":174508,"line_start":2366,"line_end":2366,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174513,"byte_end":174516,"line_start":2367,"line_end":2367,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174521,"byte_end":174574,"line_start":2368,"line_end":2368,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":174579,"byte_end":174586,"line_start":2369,"line_end":2369,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175757,"byte_end":175767,"line_start":2409,"line_end":2409,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RawEntryMut>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut K, &mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175040,"byte_end":175108,"line_start":2386,"line_end":2386,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175113,"byte_end":175148,"line_start":2387,"line_end":2387,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175153,"byte_end":175156,"line_start":2388,"line_end":2388,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175161,"byte_end":175175,"line_start":2389,"line_end":2389,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175180,"byte_end":175183,"line_start":2390,"line_end":2390,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175188,"byte_end":175195,"line_start":2391,"line_end":2391,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175200,"byte_end":175227,"line_start":2392,"line_end":2392,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175232,"byte_end":175235,"line_start":2393,"line_end":2393,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175240,"byte_end":175293,"line_start":2394,"line_end":2394,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175298,"byte_end":175301,"line_start":2395,"line_end":2395,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175306,"byte_end":175329,"line_start":2396,"line_end":2396,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175334,"byte_end":175363,"line_start":2397,"line_end":2397,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175368,"byte_end":175407,"line_start":2398,"line_end":2398,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175412,"byte_end":175447,"line_start":2399,"line_end":2399,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175452,"byte_end":175489,"line_start":2400,"line_end":2400,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175494,"byte_end":175497,"line_start":2401,"line_end":2401,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175502,"byte_end":175525,"line_start":2402,"line_end":2402,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175530,"byte_end":175559,"line_start":2403,"line_end":2403,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175564,"byte_end":175603,"line_start":2404,"line_end":2404,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 0);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175608,"byte_end":175642,"line_start":2405,"line_end":2405,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175647,"byte_end":175684,"line_start":2406,"line_end":2406,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":175689,"byte_end":175696,"line_start":2407,"line_end":2407,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177853,"byte_end":177875,"line_start":2481,"line_end":2481,"column_start":12,"column_end":34},"name":"and_replace_entry_with","qualname":"<RawEntryMut>::and_replace_entry_with","value":"pub fn and_replace_entry_with<F>(Self, F) -> Self where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n an occupied entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176188,"byte_end":176258,"line_start":2425,"line_end":2425,"column_start":5,"column_end":75}},{"value":"/ an occupied entry and allows to replace or remove it based on the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176263,"byte_end":176332,"line_start":2426,"line_end":2426,"column_start":5,"column_end":74}},{"value":"/ value of the returned option.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176337,"byte_end":176370,"line_start":2427,"line_end":2427,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176375,"byte_end":176378,"line_start":2428,"line_end":2428,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176383,"byte_end":176397,"line_start":2429,"line_end":2429,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176402,"byte_end":176405,"line_start":2430,"line_end":2430,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176410,"byte_end":176417,"line_start":2431,"line_end":2431,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176422,"byte_end":176449,"line_start":2432,"line_end":2432,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RawEntryMut;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176454,"byte_end":176495,"line_start":2433,"line_end":2433,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176500,"byte_end":176503,"line_start":2434,"line_end":2434,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176508,"byte_end":176561,"line_start":2435,"line_end":2435,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176566,"byte_end":176569,"line_start":2436,"line_end":2436,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176574,"byte_end":176593,"line_start":2437,"line_end":2437,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176598,"byte_end":176622,"line_start":2438,"line_end":2438,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176627,"byte_end":176657,"line_start":2439,"line_end":2439,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|_k, _v| panic!());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176662,"byte_end":176713,"line_start":2440,"line_end":2440,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176718,"byte_end":176721,"line_start":2441,"line_end":2441,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176726,"byte_end":176743,"line_start":2442,"line_end":2442,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Vacant(_) => {},","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176748,"byte_end":176785,"line_start":2443,"line_end":2443,"column_start":5,"column_end":42}},{"value":"/     RawEntryMut::Occupied(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176790,"byte_end":176835,"line_start":2444,"line_end":2444,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176840,"byte_end":176845,"line_start":2445,"line_end":2445,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176850,"byte_end":176853,"line_start":2446,"line_end":2446,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176858,"byte_end":176890,"line_start":2447,"line_end":2447,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176895,"byte_end":176898,"line_start":2448,"line_end":2448,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176903,"byte_end":176922,"line_start":2449,"line_end":2449,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176927,"byte_end":176951,"line_start":2450,"line_end":2450,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176956,"byte_end":176986,"line_start":2451,"line_end":2451,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|k, v| {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":176991,"byte_end":177031,"line_start":2452,"line_end":2452,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(k, &\"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177036,"byte_end":177076,"line_start":2453,"line_end":2453,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(v, 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177081,"byte_end":177111,"line_start":2454,"line_end":2454,"column_start":5,"column_end":35}},{"value":"/         Some(v + 1)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177116,"byte_end":177139,"line_start":2455,"line_end":2455,"column_start":5,"column_end":28}},{"value":"/     });","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177144,"byte_end":177155,"line_start":2456,"line_end":2456,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177160,"byte_end":177163,"line_start":2457,"line_end":2457,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177168,"byte_end":177185,"line_start":2458,"line_end":2458,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Occupied(e) => {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177190,"byte_end":177227,"line_start":2459,"line_end":2459,"column_start":5,"column_end":42}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177232,"byte_end":177278,"line_start":2460,"line_end":2460,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177283,"byte_end":177320,"line_start":2461,"line_end":2461,"column_start":5,"column_end":42}},{"value":"/     },","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177325,"byte_end":177335,"line_start":2462,"line_end":2462,"column_start":5,"column_end":15}},{"value":"/     RawEntryMut::Vacant(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177340,"byte_end":177383,"line_start":2463,"line_end":2463,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177388,"byte_end":177393,"line_start":2464,"line_end":2464,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177398,"byte_end":177401,"line_start":2465,"line_end":2465,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177406,"byte_end":177443,"line_start":2466,"line_end":2466,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177448,"byte_end":177451,"line_start":2467,"line_end":2467,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177456,"byte_end":177475,"line_start":2468,"line_end":2468,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177480,"byte_end":177504,"line_start":2469,"line_end":2469,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177509,"byte_end":177539,"line_start":2470,"line_end":2470,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|_k, _v| None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177544,"byte_end":177591,"line_start":2471,"line_end":2471,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177596,"byte_end":177599,"line_start":2472,"line_end":2472,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177604,"byte_end":177621,"line_start":2473,"line_end":2473,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Vacant(_) => {},","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177626,"byte_end":177663,"line_start":2474,"line_end":2474,"column_start":5,"column_end":42}},{"value":"/     RawEntryMut::Occupied(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177668,"byte_end":177713,"line_start":2475,"line_end":2475,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177718,"byte_end":177723,"line_start":2476,"line_end":2476,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177728,"byte_end":177731,"line_start":2477,"line_end":2477,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177736,"byte_end":177780,"line_start":2478,"line_end":2478,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":177785,"byte_end":177792,"line_start":2479,"line_end":2479,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":178299,"byte_end":178302,"line_start":2495,"line_end":2495,"column_start":12,"column_end":15},"name":"key","qualname":"<RawOccupiedEntryMut>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":178193,"byte_end":178238,"line_start":2493,"line_end":2493,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":178484,"byte_end":178491,"line_start":2501,"line_end":2501,"column_start":12,"column_end":19},"name":"key_mut","qualname":"<RawOccupiedEntryMut>::key_mut","value":"pub fn key_mut(&mut Self) -> &mut K","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":178370,"byte_end":178423,"line_start":2499,"line_end":2499,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":178752,"byte_end":178760,"line_start":2508,"line_end":2508,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RawOccupiedEntryMut>::into_key","value":"pub fn into_key(Self) -> &'a mut K","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to the key in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to the key in the entry","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":178571,"byte_end":178642,"line_start":2505,"line_end":2505,"column_start":5,"column_end":76}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":178647,"byte_end":178691,"line_start":2506,"line_end":2506,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":178946,"byte_end":178949,"line_start":2514,"line_end":2514,"column_start":12,"column_end":15},"name":"get","qualname":"<RawOccupiedEntryMut>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":178838,"byte_end":178885,"line_start":2512,"line_end":2512,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":179208,"byte_end":179216,"line_start":2521,"line_end":2521,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RawOccupiedEntryMut>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":179017,"byte_end":179098,"line_start":2518,"line_end":2518,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":179103,"byte_end":179147,"line_start":2519,"line_end":2519,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":179410,"byte_end":179417,"line_start":2527,"line_end":2527,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawOccupiedEntryMut>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":179294,"byte_end":179349,"line_start":2525,"line_end":2525,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":179613,"byte_end":179626,"line_start":2533,"line_end":2533,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<RawOccupiedEntryMut>::get_key_value","value":"pub fn get_key_value(&mut Self) -> (&K, &V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key and value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":179497,"byte_end":179552,"line_start":2531,"line_end":2531,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":179899,"byte_end":179916,"line_start":2542,"line_end":2542,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<RawOccupiedEntryMut>::get_key_value_mut","value":"pub fn get_key_value_mut(&mut Self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key and value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":179775,"byte_end":179838,"line_start":2540,"line_end":2540,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":180284,"byte_end":180298,"line_start":2552,"line_end":2552,"column_start":12,"column_end":26},"name":"into_key_value","qualname":"<RawOccupiedEntryMut>::into_key_value","value":"pub fn into_key_value(Self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the key and value in the entry","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":180085,"byte_end":180174,"line_start":2549,"line_end":2549,"column_start":5,"column_end":94}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":180179,"byte_end":180223,"line_start":2550,"line_end":2550,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":180596,"byte_end":180602,"line_start":2561,"line_end":2561,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawOccupiedEntryMut>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":180468,"byte_end":180535,"line_start":2559,"line_end":2559,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":180814,"byte_end":180824,"line_start":2567,"line_end":2567,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<RawOccupiedEntryMut>::insert_key","value":"pub fn insert_key(&mut Self, K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":180686,"byte_end":180753,"line_start":2565,"line_end":2565,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":181018,"byte_end":181024,"line_start":2573,"line_end":2573,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawOccupiedEntryMut>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":180904,"byte_end":180957,"line_start":2571,"line_end":2571,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":181197,"byte_end":181209,"line_start":2579,"line_end":2579,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawOccupiedEntryMut>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.\n","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":181079,"byte_end":181136,"line_start":2577,"line_end":2577,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":181522,"byte_end":181540,"line_start":2587,"line_end":2587,"column_start":12,"column_end":30},"name":"replace_entry_with","qualname":"<RawOccupiedEntryMut>::replace_entry_with","value":"pub fn replace_entry_with<F>(Self, F) -> RawEntryMut where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n the entry and allows to replace or remove it based on the\n value of the returned option.\n","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":181287,"byte_end":181357,"line_start":2583,"line_end":2583,"column_start":5,"column_end":75}},{"value":"/ the entry and allows to replace or remove it based on the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":181362,"byte_end":181423,"line_start":2584,"line_end":2584,"column_start":5,"column_end":66}},{"value":"/ value of the returned option.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":181428,"byte_end":181461,"line_start":2585,"line_end":2585,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":182427,"byte_end":182433,"line_start":2614,"line_end":2614,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawVacantEntryMut>::insert","value":"pub fn insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":182260,"byte_end":182319,"line_start":2611,"line_end":2611,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":182324,"byte_end":182366,"line_start":2612,"line_end":2612,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":182881,"byte_end":182902,"line_start":2627,"line_end":2627,"column_start":12,"column_end":33},"name":"insert_hashed_nocheck","qualname":"<RawVacantEntryMut>::insert_hashed_nocheck","value":"pub fn insert_hashed_nocheck(Self, u64, K, V) -> (&'a mut K, &'a mut V) where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":182675,"byte_end":182734,"line_start":2623,"line_end":2623,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":182739,"byte_end":182781,"line_start":2624,"line_end":2624,"column_start":5,"column_end":47}},{"value":"allow(clippy :: shadow_unrelated)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":182835,"byte_end":182869,"line_start":2626,"line_end":2626,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":183348,"byte_end":183366,"line_start":2642,"line_end":2642,"column_start":12,"column_end":30},"name":"insert_with_hasher","qualname":"<RawVacantEntryMut>::insert_with_hasher","value":"pub fn insert_with_hasher<H>(Self, u64, K, V, H) -> (&'a mut K, &'a mut V)\nwhere H: Fn(&K) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Set the value of an entry with a custom hasher function.\n","sig":null,"attributes":[{"value":"/ Set the value of an entry with a custom hasher function.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":183227,"byte_end":183287,"line_start":2640,"line_end":2640,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1124},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185891,"byte_end":185899,"line_start":2725,"line_end":2725,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":1118},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185864,"byte_end":185886,"line_start":2724,"line_end":2724,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1127},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185961,"byte_end":185967,"line_start":2728,"line_end":2728,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":1118},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185937,"byte_end":185956,"line_start":2727,"line_end":2727,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1118},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185795,"byte_end":185800,"line_start":2720,"line_end":2720,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"pub enum Entry<'a, K, V, S, A = Global> where A: Allocator + Clone {\n    Occupied(OccupiedEntry),\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":1124},{"krate":0,"index":1127}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185539,"byte_end":185619,"line_start":2714,"line_end":2714,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185620,"byte_end":185623,"line_start":2715,"line_end":2715,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`HashMap`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185624,"byte_end":185696,"line_start":2716,"line_end":2716,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185697,"byte_end":185700,"line_start":2717,"line_end":2717,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185701,"byte_end":185737,"line_start":2718,"line_end":2718,"column_start":1,"column_end":37}},{"value":"/ [`entry`]: struct.HashMap.html#method.entry","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185738,"byte_end":185785,"line_start":2719,"line_end":2719,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1136},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186481,"byte_end":186494,"line_start":2744,"line_end":2744,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186347,"byte_end":186396,"line_start":2740,"line_end":2740,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186397,"byte_end":186434,"line_start":2741,"line_end":2741,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186435,"byte_end":186438,"line_start":2742,"line_end":2742,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186439,"byte_end":186469,"line_start":2743,"line_end":2743,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1162},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187371,"byte_end":187382,"line_start":2781,"line_end":2781,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187240,"byte_end":187286,"line_start":2777,"line_end":2777,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187287,"byte_end":187324,"line_start":2778,"line_end":2778,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187325,"byte_end":187328,"line_start":2779,"line_end":2779,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187329,"byte_end":187359,"line_start":2780,"line_end":2780,"column_start":1,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1185},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":188100,"byte_end":188108,"line_start":2804,"line_end":2804,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::EntryRef::Occupied","value":"EntryRef::Occupied(OccupiedEntryRef)","parent":{"krate":0,"index":1177},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":188073,"byte_end":188095,"line_start":2803,"line_end":2803,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1188},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":188180,"byte_end":188186,"line_start":2807,"line_end":2807,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::EntryRef::Vacant","value":"EntryRef::Vacant(VacantEntryRef)","parent":{"krate":0,"index":1177},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":188156,"byte_end":188175,"line_start":2806,"line_end":2806,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1177},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187986,"byte_end":187994,"line_start":2799,"line_end":2799,"column_start":10,"column_end":18},"name":"EntryRef","qualname":"::map::EntryRef","value":"pub enum EntryRef<'a, 'b, K, Q: ?Sized, V, S, A = Global> where A: Allocator +\n    Clone {\n    Occupied(OccupiedEntryRef),\n    Vacant(VacantEntryRef),\n}","parent":null,"children":[{"krate":0,"index":1185},{"krate":0,"index":1188}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187718,"byte_end":187798,"line_start":2793,"line_end":2793,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187799,"byte_end":187802,"line_start":2794,"line_end":2794,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry_ref`] method on [`HashMap`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187803,"byte_end":187879,"line_start":2795,"line_end":2795,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187880,"byte_end":187883,"line_start":2796,"line_end":2796,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187884,"byte_end":187920,"line_start":2797,"line_end":2797,"column_start":1,"column_end":37}},{"value":"/ [`entry_ref`]: struct.HashMap.html#method.entry_ref","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187921,"byte_end":187976,"line_start":2798,"line_end":2798,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1218},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":189328,"byte_end":189344,"line_start":2851,"line_end":2851,"column_start":12,"column_end":28},"name":"OccupiedEntryRef","qualname":"::map::OccupiedEntryRef","value":"OccupiedEntryRef {  }","parent":null,"children":[{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`EntryRef`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":189185,"byte_end":189234,"line_start":2847,"line_end":2847,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`EntryRef`] enum.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":189235,"byte_end":189275,"line_start":2848,"line_end":2848,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":189276,"byte_end":189279,"line_start":2849,"line_end":2849,"column_start":1,"column_end":4}},{"value":"/ [`EntryRef`]: enum.EntryRef.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":189280,"byte_end":189316,"line_start":2850,"line_end":2850,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1253},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":190390,"byte_end":190404,"line_start":2892,"line_end":2892,"column_start":12,"column_end":26},"name":"VacantEntryRef","qualname":"::map::VacantEntryRef","value":"VacantEntryRef {  }","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`EntryRef`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":190250,"byte_end":190296,"line_start":2888,"line_end":2888,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`EntryRef`] enum.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":190297,"byte_end":190337,"line_start":2889,"line_end":2889,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":190338,"byte_end":190341,"line_start":2890,"line_end":2890,"column_start":1,"column_end":4}},{"value":"/ [`EntryRef`]: enum.EntryRef.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":190342,"byte_end":190378,"line_start":2891,"line_end":2891,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1271},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":190989,"byte_end":191002,"line_start":2909,"line_end":2909,"column_start":12,"column_end":25},"name":"OccupiedError","qualname":"::map::OccupiedError","value":"OccupiedError { entry, value }","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1278}],"decl_id":null,"docs":" The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.","sig":null,"attributes":[{"value":"/ The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":190813,"byte_end":190903,"line_start":2906,"line_end":2906,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":190904,"byte_end":190907,"line_start":2907,"line_end":2907,"column_start":1,"column_end":4}},{"value":"/ Contains the occupied entry, and the value that was not inserted.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":190908,"byte_end":190977,"line_start":2908,"line_end":2908,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":1277},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":191113,"byte_end":191118,"line_start":2911,"line_end":2911,"column_start":9,"column_end":14},"name":"entry","qualname":"::map::OccupiedError::entry","value":"map::OccupiedEntry<'a, K, V, S, A>","parent":{"krate":0,"index":1271},"children":[],"decl_id":null,"docs":" The entry in the map that was already occupied.\n","sig":null,"attributes":[{"value":"/ The entry in the map that was already occupied.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":191053,"byte_end":191104,"line_start":2910,"line_end":2910,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1278},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":191241,"byte_end":191246,"line_start":2913,"line_end":2913,"column_start":9,"column_end":14},"name":"value","qualname":"::map::OccupiedError::value","value":"V","parent":{"krate":0,"index":1271},"children":[],"decl_id":null,"docs":" The value which was not inserted, because the entry was already occupied.\n","sig":null,"attributes":[{"value":"/ The value which was not inserted, because the entry was already occupied.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":191155,"byte_end":191232,"line_start":2912,"line_end":2912,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199628,"byte_end":199634,"line_start":3205,"line_end":3205,"column_start":12,"column_end":18},"name":"insert","qualname":"<Entry>::insert","value":"pub fn insert(Self, V) -> OccupiedEntry where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns an OccupiedEntry.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns an OccupiedEntry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199236,"byte_end":199298,"line_start":3192,"line_end":3192,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199303,"byte_end":199306,"line_start":3193,"line_end":3193,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199311,"byte_end":199325,"line_start":3194,"line_end":3194,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199330,"byte_end":199333,"line_start":3195,"line_end":3195,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199338,"byte_end":199345,"line_start":3196,"line_end":3196,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199350,"byte_end":199377,"line_start":3197,"line_end":3197,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199382,"byte_end":199385,"line_start":3198,"line_end":3198,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199390,"byte_end":199443,"line_start":3199,"line_end":3199,"column_start":5,"column_end":58}},{"value":"/ let entry = map.entry(\"horseyland\").insert(37);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199448,"byte_end":199499,"line_start":3200,"line_end":3200,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199504,"byte_end":199507,"line_start":3201,"line_end":3201,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.key(), &\"horseyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199512,"byte_end":199555,"line_start":3202,"line_end":3202,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199560,"byte_end":199567,"line_start":3203,"line_end":3203,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1447},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200513,"byte_end":200522,"line_start":3236,"line_end":3236,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199963,"byte_end":200045,"line_start":3219,"line_end":3219,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200050,"byte_end":200100,"line_start":3220,"line_end":3220,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200105,"byte_end":200108,"line_start":3221,"line_end":3221,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200113,"byte_end":200127,"line_start":3222,"line_end":3222,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200132,"byte_end":200135,"line_start":3223,"line_end":3223,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200140,"byte_end":200147,"line_start":3224,"line_end":3224,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200152,"byte_end":200179,"line_start":3225,"line_end":3225,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200184,"byte_end":200187,"line_start":3226,"line_end":3226,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200192,"byte_end":200245,"line_start":3227,"line_end":3227,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200250,"byte_end":200253,"line_start":3228,"line_end":3228,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert(3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200258,"byte_end":200298,"line_start":3229,"line_end":3229,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200303,"byte_end":200339,"line_start":3230,"line_end":3230,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200344,"byte_end":200347,"line_start":3231,"line_end":3231,"column_start":5,"column_end":8}},{"value":"/ *map.entry(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200352,"byte_end":200399,"line_start":3232,"line_end":3232,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200404,"byte_end":200440,"line_start":3233,"line_end":3233,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200445,"byte_end":200452,"line_start":3234,"line_end":3234,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201312,"byte_end":201326,"line_start":3263,"line_end":3263,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F: FnOnce() -> V>(Self, F) -> &'a mut V where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200768,"byte_end":200861,"line_start":3247,"line_end":3247,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200866,"byte_end":200928,"line_start":3248,"line_end":3248,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200933,"byte_end":200936,"line_start":3249,"line_end":3249,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200941,"byte_end":200955,"line_start":3250,"line_end":3250,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200960,"byte_end":200963,"line_start":3251,"line_end":3251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200968,"byte_end":200975,"line_start":3252,"line_end":3252,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":200980,"byte_end":201007,"line_start":3253,"line_end":3253,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201012,"byte_end":201015,"line_start":3254,"line_end":3254,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201020,"byte_end":201076,"line_start":3255,"line_end":3255,"column_start":5,"column_end":61}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201081,"byte_end":201112,"line_start":3256,"line_end":3256,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201117,"byte_end":201120,"line_start":3257,"line_end":3257,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201125,"byte_end":201173,"line_start":3258,"line_end":3258,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201178,"byte_end":201181,"line_start":3259,"line_end":3259,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201186,"byte_end":201239,"line_start":3260,"line_end":3260,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201244,"byte_end":201251,"line_start":3261,"line_end":3261,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202393,"byte_end":202411,"line_start":3293,"line_end":3293,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"pub fn or_insert_with_key<F: FnOnce(&K) -> V>(Self, F) -> &'a mut V where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting, if empty, the result of the default function.\n This method allows for generating key-derived values for insertion by providing the default\n function a reference to the key that was moved during the `.entry(key)` method call.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting, if empty, the result of the default function.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201592,"byte_end":201687,"line_start":3274,"line_end":3274,"column_start":5,"column_end":100}},{"value":"/ This method allows for generating key-derived values for insertion by providing the default","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201692,"byte_end":201787,"line_start":3275,"line_end":3275,"column_start":5,"column_end":100}},{"value":"/ function a reference to the key that was moved during the `.entry(key)` method call.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201792,"byte_end":201880,"line_start":3276,"line_end":3276,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201885,"byte_end":201888,"line_start":3277,"line_end":3277,"column_start":5,"column_end":8}},{"value":"/ The reference to the moved key is provided so that cloning or copying the key is","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201893,"byte_end":201977,"line_start":3278,"line_end":3278,"column_start":5,"column_end":89}},{"value":"/ unnecessary, unlike with `.or_insert_with(|| ... )`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":201982,"byte_end":202038,"line_start":3279,"line_end":3279,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202043,"byte_end":202046,"line_start":3280,"line_end":3280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202051,"byte_end":202065,"line_start":3281,"line_end":3281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202070,"byte_end":202073,"line_start":3282,"line_end":3282,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202078,"byte_end":202085,"line_start":3283,"line_end":3283,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202090,"byte_end":202117,"line_start":3284,"line_end":3284,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202122,"byte_end":202125,"line_start":3285,"line_end":3285,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, usize> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202130,"byte_end":202185,"line_start":3286,"line_end":3286,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202190,"byte_end":202193,"line_start":3287,"line_end":3287,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202198,"byte_end":202271,"line_start":3288,"line_end":3288,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202276,"byte_end":202279,"line_start":3289,"line_end":3289,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 9);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202284,"byte_end":202320,"line_start":3290,"line_end":3290,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202325,"byte_end":202332,"line_start":3291,"line_end":3291,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203082,"byte_end":203085,"line_start":3318,"line_end":3318,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202756,"byte_end":202800,"line_start":3307,"line_end":3307,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202805,"byte_end":202808,"line_start":3308,"line_end":3308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202813,"byte_end":202827,"line_start":3309,"line_end":3309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202832,"byte_end":202835,"line_start":3310,"line_end":3310,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202840,"byte_end":202847,"line_start":3311,"line_end":3311,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202852,"byte_end":202879,"line_start":3312,"line_end":3312,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202884,"byte_end":202887,"line_start":3313,"line_end":3313,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202892,"byte_end":202945,"line_start":3314,"line_end":3314,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":202950,"byte_end":203009,"line_start":3315,"line_end":3315,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203014,"byte_end":203021,"line_start":3316,"line_end":3316,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203874,"byte_end":203884,"line_start":3346,"line_end":3346,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203252,"byte_end":203320,"line_start":3325,"line_end":3325,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203325,"byte_end":203360,"line_start":3326,"line_end":3326,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203365,"byte_end":203368,"line_start":3327,"line_end":3327,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203373,"byte_end":203387,"line_start":3328,"line_end":3328,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203392,"byte_end":203395,"line_start":3329,"line_end":3329,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203400,"byte_end":203407,"line_start":3330,"line_end":3330,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203412,"byte_end":203439,"line_start":3331,"line_end":3331,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203444,"byte_end":203447,"line_start":3332,"line_end":3332,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203452,"byte_end":203505,"line_start":3333,"line_end":3333,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203510,"byte_end":203513,"line_start":3334,"line_end":3334,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203518,"byte_end":203544,"line_start":3335,"line_end":3335,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203549,"byte_end":203584,"line_start":3336,"line_end":3336,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203589,"byte_end":203611,"line_start":3337,"line_end":3337,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203616,"byte_end":203653,"line_start":3338,"line_end":3338,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203658,"byte_end":203661,"line_start":3339,"line_end":3339,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203666,"byte_end":203692,"line_start":3340,"line_end":3340,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203697,"byte_end":203732,"line_start":3341,"line_end":3341,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203737,"byte_end":203759,"line_start":3342,"line_end":3342,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203764,"byte_end":203801,"line_start":3343,"line_end":3343,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":203806,"byte_end":203813,"line_start":3344,"line_end":3344,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205804,"byte_end":205826,"line_start":3414,"line_end":3414,"column_start":12,"column_end":34},"name":"and_replace_entry_with","qualname":"<Entry>::and_replace_entry_with","value":"pub fn and_replace_entry_with<F>(Self, F) -> Self where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n an occupied entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204184,"byte_end":204254,"line_start":3359,"line_end":3359,"column_start":5,"column_end":75}},{"value":"/ an occupied entry and allows to replace or remove it based on the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204259,"byte_end":204328,"line_start":3360,"line_end":3360,"column_start":5,"column_end":74}},{"value":"/ value of the returned option.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204333,"byte_end":204366,"line_start":3361,"line_end":3361,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204371,"byte_end":204374,"line_start":3362,"line_end":3362,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204379,"byte_end":204393,"line_start":3363,"line_end":3363,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204398,"byte_end":204401,"line_start":3364,"line_end":3364,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204406,"byte_end":204413,"line_start":3365,"line_end":3365,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204418,"byte_end":204445,"line_start":3366,"line_end":3366,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204450,"byte_end":204485,"line_start":3367,"line_end":3367,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204490,"byte_end":204493,"line_start":3368,"line_end":3368,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204498,"byte_end":204551,"line_start":3369,"line_end":3369,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204556,"byte_end":204559,"line_start":3370,"line_end":3370,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204564,"byte_end":204583,"line_start":3371,"line_end":3371,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204588,"byte_end":204615,"line_start":3372,"line_end":3372,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|_k, _v| panic!());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204620,"byte_end":204671,"line_start":3373,"line_end":3373,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204676,"byte_end":204679,"line_start":3374,"line_end":3374,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204684,"byte_end":204701,"line_start":3375,"line_end":3375,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204706,"byte_end":204735,"line_start":3376,"line_end":3376,"column_start":5,"column_end":34}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204740,"byte_end":204786,"line_start":3377,"line_end":3377,"column_start":5,"column_end":51}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204791,"byte_end":204800,"line_start":3378,"line_end":3378,"column_start":5,"column_end":14}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204805,"byte_end":204844,"line_start":3379,"line_end":3379,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204849,"byte_end":204854,"line_start":3380,"line_end":3380,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204859,"byte_end":204862,"line_start":3381,"line_end":3381,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204867,"byte_end":204899,"line_start":3382,"line_end":3382,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204904,"byte_end":204907,"line_start":3383,"line_end":3383,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204912,"byte_end":204931,"line_start":3384,"line_end":3384,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204936,"byte_end":204963,"line_start":3385,"line_end":3385,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|k, v| {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":204968,"byte_end":205008,"line_start":3386,"line_end":3386,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(k, &\"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205013,"byte_end":205053,"line_start":3387,"line_end":3387,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(v, 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205058,"byte_end":205088,"line_start":3388,"line_end":3388,"column_start":5,"column_end":35}},{"value":"/         Some(v + 1)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205093,"byte_end":205116,"line_start":3389,"line_end":3389,"column_start":5,"column_end":28}},{"value":"/     });","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205121,"byte_end":205132,"line_start":3390,"line_end":3390,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205137,"byte_end":205140,"line_start":3391,"line_end":3391,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205145,"byte_end":205162,"line_start":3392,"line_end":3392,"column_start":5,"column_end":22}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205167,"byte_end":205198,"line_start":3393,"line_end":3393,"column_start":5,"column_end":36}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205203,"byte_end":205249,"line_start":3394,"line_end":3394,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205254,"byte_end":205291,"line_start":3395,"line_end":3395,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205296,"byte_end":205305,"line_start":3396,"line_end":3396,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205310,"byte_end":205347,"line_start":3397,"line_end":3397,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205352,"byte_end":205357,"line_start":3398,"line_end":3398,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205362,"byte_end":205365,"line_start":3399,"line_end":3399,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205370,"byte_end":205407,"line_start":3400,"line_end":3400,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205412,"byte_end":205415,"line_start":3401,"line_end":3401,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205420,"byte_end":205439,"line_start":3402,"line_end":3402,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205444,"byte_end":205471,"line_start":3403,"line_end":3403,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|_k, _v| None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205476,"byte_end":205523,"line_start":3404,"line_end":3404,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205528,"byte_end":205531,"line_start":3405,"line_end":3405,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205536,"byte_end":205553,"line_start":3406,"line_end":3406,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => assert_eq!(e.key(), &\"poneyland\"),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205558,"byte_end":205620,"line_start":3407,"line_end":3407,"column_start":5,"column_end":67}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205625,"byte_end":205664,"line_start":3408,"line_end":3408,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205669,"byte_end":205674,"line_start":3409,"line_end":3409,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205679,"byte_end":205682,"line_start":3410,"line_end":3410,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205687,"byte_end":205731,"line_start":3411,"line_end":3411,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":205736,"byte_end":205743,"line_start":3412,"line_end":3412,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206593,"byte_end":206603,"line_start":3440,"line_end":3440,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206127,"byte_end":206203,"line_start":3426,"line_end":3426,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206208,"byte_end":206270,"line_start":3427,"line_end":3427,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206275,"byte_end":206278,"line_start":3428,"line_end":3428,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206283,"byte_end":206297,"line_start":3429,"line_end":3429,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206302,"byte_end":206305,"line_start":3430,"line_end":3430,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206310,"byte_end":206317,"line_start":3431,"line_end":3431,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206322,"byte_end":206349,"line_start":3432,"line_end":3432,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206354,"byte_end":206357,"line_start":3433,"line_end":3433,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206362,"byte_end":206423,"line_start":3434,"line_end":3434,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206428,"byte_end":206468,"line_start":3435,"line_end":3435,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206473,"byte_end":206476,"line_start":3436,"line_end":3436,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206481,"byte_end":206520,"line_start":3437,"line_end":3437,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206525,"byte_end":206532,"line_start":3438,"line_end":3438,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207295,"byte_end":207298,"line_start":3465,"line_end":3465,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206922,"byte_end":206967,"line_start":3453,"line_end":3453,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206972,"byte_end":206975,"line_start":3454,"line_end":3454,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206980,"byte_end":206994,"line_start":3455,"line_end":3455,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206999,"byte_end":207002,"line_start":3456,"line_end":3456,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207007,"byte_end":207014,"line_start":3457,"line_end":3457,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207019,"byte_end":207046,"line_start":3458,"line_end":3458,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207051,"byte_end":207054,"line_start":3459,"line_end":3459,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207059,"byte_end":207112,"line_start":3460,"line_end":3460,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207117,"byte_end":207158,"line_start":3461,"line_end":3461,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207163,"byte_end":207222,"line_start":3462,"line_end":3462,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207227,"byte_end":207234,"line_start":3463,"line_end":3463,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207951,"byte_end":207963,"line_start":3488,"line_end":3488,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207366,"byte_end":207423,"line_start":3469,"line_end":3469,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207428,"byte_end":207431,"line_start":3470,"line_end":3470,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207436,"byte_end":207450,"line_start":3471,"line_end":3471,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207455,"byte_end":207458,"line_start":3472,"line_end":3472,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207463,"byte_end":207470,"line_start":3473,"line_end":3473,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207475,"byte_end":207502,"line_start":3474,"line_end":3474,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207507,"byte_end":207542,"line_start":3475,"line_end":3475,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207547,"byte_end":207550,"line_start":3476,"line_end":3476,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207555,"byte_end":207608,"line_start":3477,"line_end":3477,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207613,"byte_end":207654,"line_start":3478,"line_end":3478,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207659,"byte_end":207662,"line_start":3479,"line_end":3479,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207667,"byte_end":207723,"line_start":3480,"line_end":3480,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207728,"byte_end":207772,"line_start":3481,"line_end":3481,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207777,"byte_end":207802,"line_start":3482,"line_end":3482,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207807,"byte_end":207812,"line_start":3483,"line_end":3483,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207817,"byte_end":207820,"line_start":3484,"line_end":3484,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207825,"byte_end":207878,"line_start":3485,"line_end":3485,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":207883,"byte_end":207890,"line_start":3486,"line_end":3486,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208515,"byte_end":208518,"line_start":3508,"line_end":3508,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208047,"byte_end":208094,"line_start":3492,"line_end":3492,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208099,"byte_end":208102,"line_start":3493,"line_end":3493,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208107,"byte_end":208121,"line_start":3494,"line_end":3494,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208126,"byte_end":208129,"line_start":3495,"line_end":3495,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208134,"byte_end":208141,"line_start":3496,"line_end":3496,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208146,"byte_end":208173,"line_start":3497,"line_end":3497,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208178,"byte_end":208213,"line_start":3498,"line_end":3498,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208218,"byte_end":208221,"line_start":3499,"line_end":3499,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208226,"byte_end":208279,"line_start":3500,"line_end":3500,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208284,"byte_end":208325,"line_start":3501,"line_end":3501,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208330,"byte_end":208333,"line_start":3502,"line_end":3502,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208338,"byte_end":208394,"line_start":3503,"line_end":3503,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208399,"byte_end":208432,"line_start":3504,"line_end":3504,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208437,"byte_end":208442,"line_start":3505,"line_end":3505,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208447,"byte_end":208454,"line_start":3506,"line_end":3506,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209478,"byte_end":209485,"line_start":3540,"line_end":3540,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208586,"byte_end":208641,"line_start":3512,"line_end":3512,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208646,"byte_end":208649,"line_start":3513,"line_end":3513,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` which may outlive the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208654,"byte_end":208726,"line_start":3514,"line_end":3514,"column_start":5,"column_end":77}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208731,"byte_end":208786,"line_start":3515,"line_end":3515,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208791,"byte_end":208794,"line_start":3516,"line_end":3516,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208799,"byte_end":208833,"line_start":3517,"line_end":3517,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208838,"byte_end":208841,"line_start":3518,"line_end":3518,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208846,"byte_end":208860,"line_start":3519,"line_end":3519,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208865,"byte_end":208868,"line_start":3520,"line_end":3520,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208873,"byte_end":208880,"line_start":3521,"line_end":3521,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208885,"byte_end":208912,"line_start":3522,"line_end":3522,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208917,"byte_end":208952,"line_start":3523,"line_end":3523,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208957,"byte_end":208960,"line_start":3524,"line_end":3524,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":208965,"byte_end":209018,"line_start":3525,"line_end":3525,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209023,"byte_end":209064,"line_start":3526,"line_end":3526,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209069,"byte_end":209072,"line_start":3527,"line_end":3527,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209077,"byte_end":209114,"line_start":3528,"line_end":3528,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209119,"byte_end":209179,"line_start":3529,"line_end":3529,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209184,"byte_end":209211,"line_start":3530,"line_end":3530,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209216,"byte_end":209249,"line_start":3531,"line_end":3531,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209254,"byte_end":209257,"line_start":3532,"line_end":3532,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209262,"byte_end":209314,"line_start":3533,"line_end":3533,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209319,"byte_end":209345,"line_start":3534,"line_end":3534,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209350,"byte_end":209355,"line_start":3535,"line_end":3535,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209360,"byte_end":209363,"line_start":3536,"line_end":3536,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209368,"byte_end":209405,"line_start":3537,"line_end":3537,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209410,"byte_end":209417,"line_start":3538,"line_end":3538,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210337,"byte_end":210345,"line_start":3568,"line_end":3568,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209565,"byte_end":209646,"line_start":3544,"line_end":3544,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209651,"byte_end":209695,"line_start":3545,"line_end":3545,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209700,"byte_end":209703,"line_start":3546,"line_end":3546,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209708,"byte_end":209784,"line_start":3547,"line_end":3547,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209789,"byte_end":209792,"line_start":3548,"line_end":3548,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209797,"byte_end":209829,"line_start":3549,"line_end":3549,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209834,"byte_end":209837,"line_start":3550,"line_end":3550,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209842,"byte_end":209856,"line_start":3551,"line_end":3551,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209861,"byte_end":209864,"line_start":3552,"line_end":3552,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209869,"byte_end":209876,"line_start":3553,"line_end":3553,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209881,"byte_end":209908,"line_start":3554,"line_end":3554,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209913,"byte_end":209948,"line_start":3555,"line_end":3555,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209953,"byte_end":209956,"line_start":3556,"line_end":3556,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":209961,"byte_end":210014,"line_start":3557,"line_end":3557,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210019,"byte_end":210060,"line_start":3558,"line_end":3558,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210065,"byte_end":210068,"line_start":3559,"line_end":3559,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210073,"byte_end":210110,"line_start":3560,"line_end":3560,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210115,"byte_end":210171,"line_start":3561,"line_end":3561,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210176,"byte_end":210204,"line_start":3562,"line_end":3562,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210209,"byte_end":210214,"line_start":3563,"line_end":3563,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210219,"byte_end":210222,"line_start":3564,"line_end":3564,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210227,"byte_end":210264,"line_start":3565,"line_end":3565,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210269,"byte_end":210276,"line_start":3566,"line_end":3566,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1475},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210969,"byte_end":210975,"line_start":3590,"line_end":3590,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210423,"byte_end":210490,"line_start":3572,"line_end":3572,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210495,"byte_end":210498,"line_start":3573,"line_end":3573,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210503,"byte_end":210517,"line_start":3574,"line_end":3574,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210522,"byte_end":210525,"line_start":3575,"line_end":3575,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210530,"byte_end":210537,"line_start":3576,"line_end":3576,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210542,"byte_end":210569,"line_start":3577,"line_end":3577,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210574,"byte_end":210609,"line_start":3578,"line_end":3578,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210614,"byte_end":210617,"line_start":3579,"line_end":3579,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210622,"byte_end":210675,"line_start":3580,"line_end":3580,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210680,"byte_end":210721,"line_start":3581,"line_end":3581,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210726,"byte_end":210729,"line_start":3582,"line_end":3582,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210734,"byte_end":210794,"line_start":3583,"line_end":3583,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210799,"byte_end":210836,"line_start":3584,"line_end":3584,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210841,"byte_end":210846,"line_start":3585,"line_end":3585,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210851,"byte_end":210854,"line_start":3586,"line_end":3586,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210859,"byte_end":210896,"line_start":3587,"line_end":3587,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":210901,"byte_end":210908,"line_start":3588,"line_end":3588,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211657,"byte_end":211663,"line_start":3614,"line_end":3614,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211115,"byte_end":211168,"line_start":3596,"line_end":3596,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211173,"byte_end":211176,"line_start":3597,"line_end":3597,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211181,"byte_end":211195,"line_start":3598,"line_end":3598,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211200,"byte_end":211203,"line_start":3599,"line_end":3599,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211208,"byte_end":211215,"line_start":3600,"line_end":3600,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211220,"byte_end":211247,"line_start":3601,"line_end":3601,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211252,"byte_end":211287,"line_start":3602,"line_end":3602,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211292,"byte_end":211295,"line_start":3603,"line_end":3603,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211300,"byte_end":211353,"line_start":3604,"line_end":3604,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211358,"byte_end":211399,"line_start":3605,"line_end":3605,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211404,"byte_end":211407,"line_start":3606,"line_end":3606,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211412,"byte_end":211468,"line_start":3607,"line_end":3607,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211473,"byte_end":211508,"line_start":3608,"line_end":3608,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211513,"byte_end":211518,"line_start":3609,"line_end":3609,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211523,"byte_end":211526,"line_start":3610,"line_end":3610,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211531,"byte_end":211584,"line_start":3611,"line_end":3611,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211589,"byte_end":211596,"line_start":3612,"line_end":3612,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212596,"byte_end":212609,"line_start":3643,"line_end":3643,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntry>::replace_entry","value":"pub fn replace_entry(Self, V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211718,"byte_end":211810,"line_start":3618,"line_end":3618,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211815,"byte_end":211853,"line_start":3619,"line_end":3619,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211858,"byte_end":211861,"line_start":3620,"line_end":3620,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211866,"byte_end":211878,"line_start":3621,"line_end":3621,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211883,"byte_end":211886,"line_start":3622,"line_end":3622,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`Entry::insert`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211891,"byte_end":211966,"line_start":3623,"line_end":3623,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211971,"byte_end":211974,"line_start":3624,"line_end":3624,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211979,"byte_end":211993,"line_start":3625,"line_end":3625,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":211998,"byte_end":212001,"line_start":3626,"line_end":3626,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212006,"byte_end":212013,"line_start":3627,"line_end":3627,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212018,"byte_end":212064,"line_start":3628,"line_end":3628,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212069,"byte_end":212089,"line_start":3629,"line_end":3629,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212094,"byte_end":212097,"line_start":3630,"line_end":3630,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212102,"byte_end":212161,"line_start":3631,"line_end":3631,"column_start":5,"column_end":64}},{"value":"/ map.insert(Rc::new(\"Stringthing\".to_string()), 15);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212166,"byte_end":212221,"line_start":3632,"line_end":3632,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212226,"byte_end":212229,"line_start":3633,"line_end":3633,"column_start":5,"column_end":8}},{"value":"/ let my_key = Rc::new(\"Stringthing\".to_string());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212234,"byte_end":212286,"line_start":3634,"line_end":3634,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212291,"byte_end":212294,"line_start":3635,"line_end":3635,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(entry) = map.entry(my_key) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212299,"byte_end":212354,"line_start":3636,"line_end":3636,"column_start":5,"column_end":60}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212359,"byte_end":212422,"line_start":3637,"line_end":3637,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212427,"byte_end":212505,"line_start":3638,"line_end":3638,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212510,"byte_end":212515,"line_start":3639,"line_end":3639,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212520,"byte_end":212523,"line_start":3640,"line_end":3640,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212528,"byte_end":212535,"line_start":3641,"line_end":3641,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213883,"byte_end":213894,"line_start":3681,"line_end":3681,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntry>::replace_key","value":"pub fn replace_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212859,"byte_end":212935,"line_start":3652,"line_end":3652,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212940,"byte_end":212943,"line_start":3653,"line_end":3653,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212948,"byte_end":212960,"line_start":3654,"line_end":3654,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212965,"byte_end":212968,"line_start":3655,"line_end":3655,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`Entry::insert`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":212973,"byte_end":213048,"line_start":3656,"line_end":3656,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213053,"byte_end":213056,"line_start":3657,"line_end":3657,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213061,"byte_end":213075,"line_start":3658,"line_end":3658,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213080,"byte_end":213083,"line_start":3659,"line_end":3659,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213088,"byte_end":213095,"line_start":3660,"line_end":3660,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213100,"byte_end":213146,"line_start":3661,"line_end":3661,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213151,"byte_end":213171,"line_start":3662,"line_end":3662,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213176,"byte_end":213179,"line_start":3663,"line_end":3663,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213184,"byte_end":213243,"line_start":3664,"line_end":3664,"column_start":5,"column_end":64}},{"value":"/ let mut known_strings: Vec<Rc<String>> = Vec::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213248,"byte_end":213304,"line_start":3665,"line_end":3665,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213309,"byte_end":213312,"line_start":3666,"line_end":3666,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213317,"byte_end":213367,"line_start":3667,"line_end":3667,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213372,"byte_end":213375,"line_start":3668,"line_end":3668,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213380,"byte_end":213425,"line_start":3669,"line_end":3669,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213430,"byte_end":213433,"line_start":3670,"line_end":3670,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213438,"byte_end":213528,"line_start":3671,"line_end":3671,"column_start":5,"column_end":95}},{"value":"/     for s in known_strings {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213533,"byte_end":213565,"line_start":3672,"line_end":3672,"column_start":5,"column_end":37}},{"value":"/         if let Entry::Occupied(entry) = map.entry(s.clone()) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213570,"byte_end":213636,"line_start":3673,"line_end":3673,"column_start":5,"column_end":71}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213641,"byte_end":213727,"line_start":3674,"line_end":3674,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213732,"byte_end":213768,"line_start":3675,"line_end":3675,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213773,"byte_end":213786,"line_start":3676,"line_end":3676,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213791,"byte_end":213800,"line_start":3677,"line_end":3677,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213805,"byte_end":213810,"line_start":3678,"line_end":3678,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":213815,"byte_end":213822,"line_start":3679,"line_end":3679,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215538,"byte_end":215556,"line_start":3735,"line_end":3735,"column_start":12,"column_end":30},"name":"replace_entry_with","qualname":"<OccupiedEntry>::replace_entry_with","value":"pub fn replace_entry_with<F>(Self, F) -> Entry where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n the entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214024,"byte_end":214094,"line_start":3686,"line_end":3686,"column_start":5,"column_end":75}},{"value":"/ the entry and allows to replace or remove it based on the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214099,"byte_end":214160,"line_start":3687,"line_end":3687,"column_start":5,"column_end":66}},{"value":"/ value of the returned option.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214165,"byte_end":214198,"line_start":3688,"line_end":3688,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214203,"byte_end":214206,"line_start":3689,"line_end":3689,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214211,"byte_end":214225,"line_start":3690,"line_end":3690,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214230,"byte_end":214233,"line_start":3691,"line_end":3691,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214238,"byte_end":214245,"line_start":3692,"line_end":3692,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214250,"byte_end":214277,"line_start":3693,"line_end":3693,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214282,"byte_end":214317,"line_start":3694,"line_end":3694,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214322,"byte_end":214325,"line_start":3695,"line_end":3695,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214330,"byte_end":214383,"line_start":3696,"line_end":3696,"column_start":5,"column_end":58}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214388,"byte_end":214420,"line_start":3697,"line_end":3697,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214425,"byte_end":214428,"line_start":3698,"line_end":3698,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214433,"byte_end":214479,"line_start":3699,"line_end":3699,"column_start":5,"column_end":51}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214484,"byte_end":214515,"line_start":3700,"line_end":3700,"column_start":5,"column_end":36}},{"value":"/         e.replace_entry_with(|k, v| {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214520,"byte_end":214561,"line_start":3701,"line_end":3701,"column_start":5,"column_end":46}},{"value":"/             assert_eq!(k, &\"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214566,"byte_end":214610,"line_start":3702,"line_end":3702,"column_start":5,"column_end":49}},{"value":"/             assert_eq!(v, 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214615,"byte_end":214649,"line_start":3703,"line_end":3703,"column_start":5,"column_end":39}},{"value":"/             Some(v + 1)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214654,"byte_end":214681,"line_start":3704,"line_end":3704,"column_start":5,"column_end":32}},{"value":"/         })","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214686,"byte_end":214700,"line_start":3705,"line_end":3705,"column_start":5,"column_end":19}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214705,"byte_end":214714,"line_start":3706,"line_end":3706,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214719,"byte_end":214756,"line_start":3707,"line_end":3707,"column_start":5,"column_end":42}},{"value":"/ };","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214761,"byte_end":214767,"line_start":3708,"line_end":3708,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214772,"byte_end":214775,"line_start":3709,"line_end":3709,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214780,"byte_end":214797,"line_start":3710,"line_end":3710,"column_start":5,"column_end":22}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214802,"byte_end":214833,"line_start":3711,"line_end":3711,"column_start":5,"column_end":36}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214838,"byte_end":214884,"line_start":3712,"line_end":3712,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214889,"byte_end":214926,"line_start":3713,"line_end":3713,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214931,"byte_end":214940,"line_start":3714,"line_end":3714,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214945,"byte_end":214982,"line_start":3715,"line_end":3715,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214987,"byte_end":214992,"line_start":3716,"line_end":3716,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":214997,"byte_end":215000,"line_start":3717,"line_end":3717,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215005,"byte_end":215042,"line_start":3718,"line_end":3718,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215047,"byte_end":215050,"line_start":3719,"line_end":3719,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215055,"byte_end":215101,"line_start":3720,"line_end":3720,"column_start":5,"column_end":51}},{"value":"/     Entry::Occupied(e) => e.replace_entry_with(|_k, _v| None),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215106,"byte_end":215172,"line_start":3721,"line_end":3721,"column_start":5,"column_end":71}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215177,"byte_end":215214,"line_start":3722,"line_end":3722,"column_start":5,"column_end":42}},{"value":"/ };","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215219,"byte_end":215225,"line_start":3723,"line_end":3723,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215230,"byte_end":215233,"line_start":3724,"line_end":3724,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215238,"byte_end":215255,"line_start":3725,"line_end":3725,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215260,"byte_end":215289,"line_start":3726,"line_end":3726,"column_start":5,"column_end":34}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215294,"byte_end":215340,"line_start":3727,"line_end":3727,"column_start":5,"column_end":51}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215345,"byte_end":215354,"line_start":3728,"line_end":3728,"column_start":5,"column_end":14}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215359,"byte_end":215398,"line_start":3729,"line_end":3729,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215403,"byte_end":215408,"line_start":3730,"line_end":3730,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215413,"byte_end":215416,"line_start":3731,"line_end":3731,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215421,"byte_end":215465,"line_start":3732,"line_end":3732,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":215470,"byte_end":215477,"line_start":3733,"line_end":3733,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216847,"byte_end":216850,"line_start":3779,"line_end":3779,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntry`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216457,"byte_end":216530,"line_start":3767,"line_end":3767,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntry`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216535,"byte_end":216565,"line_start":3768,"line_end":3768,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216570,"byte_end":216573,"line_start":3769,"line_end":3769,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216578,"byte_end":216592,"line_start":3770,"line_end":3770,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216597,"byte_end":216600,"line_start":3771,"line_end":3771,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216605,"byte_end":216612,"line_start":3772,"line_end":3772,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216617,"byte_end":216644,"line_start":3773,"line_end":3773,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216649,"byte_end":216652,"line_start":3774,"line_end":3774,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216657,"byte_end":216710,"line_start":3775,"line_end":3775,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216715,"byte_end":216774,"line_start":3776,"line_end":3776,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216779,"byte_end":216786,"line_start":3777,"line_end":3777,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217286,"byte_end":217294,"line_start":3798,"line_end":3798,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216895,"byte_end":216925,"line_start":3783,"line_end":3783,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216930,"byte_end":216933,"line_start":3784,"line_end":3784,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216938,"byte_end":216952,"line_start":3785,"line_end":3785,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216957,"byte_end":216960,"line_start":3786,"line_end":3786,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216965,"byte_end":216972,"line_start":3787,"line_end":3787,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216977,"byte_end":217004,"line_start":3788,"line_end":3788,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217009,"byte_end":217044,"line_start":3789,"line_end":3789,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217049,"byte_end":217052,"line_start":3790,"line_end":3790,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217057,"byte_end":217110,"line_start":3791,"line_end":3791,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217115,"byte_end":217118,"line_start":3792,"line_end":3792,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217123,"byte_end":217177,"line_start":3793,"line_end":3793,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217182,"byte_end":217203,"line_start":3794,"line_end":3794,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217208,"byte_end":217213,"line_start":3795,"line_end":3795,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217218,"byte_end":217225,"line_start":3796,"line_end":3796,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217845,"byte_end":217851,"line_start":3819,"line_end":3819,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217336,"byte_end":217395,"line_start":3802,"line_end":3802,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217400,"byte_end":217442,"line_start":3803,"line_end":3803,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217447,"byte_end":217450,"line_start":3804,"line_end":3804,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217455,"byte_end":217469,"line_start":3805,"line_end":3805,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217474,"byte_end":217477,"line_start":3806,"line_end":3806,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217482,"byte_end":217489,"line_start":3807,"line_end":3807,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217494,"byte_end":217521,"line_start":3808,"line_end":3808,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217526,"byte_end":217561,"line_start":3809,"line_end":3809,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217566,"byte_end":217569,"line_start":3810,"line_end":3810,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217574,"byte_end":217627,"line_start":3811,"line_end":3811,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217632,"byte_end":217635,"line_start":3812,"line_end":3812,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217640,"byte_end":217694,"line_start":3813,"line_end":3813,"column_start":5,"column_end":59}},{"value":"/     o.insert(37);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217699,"byte_end":217720,"line_start":3814,"line_end":3814,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217725,"byte_end":217730,"line_start":3815,"line_end":3815,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217735,"byte_end":217772,"line_start":3816,"line_end":3816,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":217777,"byte_end":217784,"line_start":3817,"line_end":3817,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219165,"byte_end":219171,"line_start":3867,"line_end":3867,"column_start":12,"column_end":18},"name":"insert","qualname":"<EntryRef>::insert","value":"pub fn insert(Self, V) -> OccupiedEntryRef where K: Hash + From<&'b Q>,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns an OccupiedEntryRef.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns an OccupiedEntryRef.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":218765,"byte_end":218830,"line_start":3854,"line_end":3854,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":218835,"byte_end":218838,"line_start":3855,"line_end":3855,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":218843,"byte_end":218857,"line_start":3856,"line_end":3856,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":218862,"byte_end":218865,"line_start":3857,"line_end":3857,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":218870,"byte_end":218877,"line_start":3858,"line_end":3858,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":218882,"byte_end":218909,"line_start":3859,"line_end":3859,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":218914,"byte_end":218917,"line_start":3860,"line_end":3860,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":218922,"byte_end":218977,"line_start":3861,"line_end":3861,"column_start":5,"column_end":60}},{"value":"/ let entry = map.entry_ref(\"horseyland\").insert(37);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":218982,"byte_end":219037,"line_start":3862,"line_end":3862,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219042,"byte_end":219045,"line_start":3863,"line_end":3863,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.key(), \"horseyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219050,"byte_end":219092,"line_start":3864,"line_end":3864,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219097,"byte_end":219104,"line_start":3865,"line_end":3865,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220090,"byte_end":220099,"line_start":3898,"line_end":3898,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<EntryRef>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V where K: Hash + From<&'b Q>,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219530,"byte_end":219612,"line_start":3881,"line_end":3881,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219617,"byte_end":219667,"line_start":3882,"line_end":3882,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219672,"byte_end":219675,"line_start":3883,"line_end":3883,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219680,"byte_end":219694,"line_start":3884,"line_end":3884,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219699,"byte_end":219702,"line_start":3885,"line_end":3885,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219707,"byte_end":219714,"line_start":3886,"line_end":3886,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219719,"byte_end":219746,"line_start":3887,"line_end":3887,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219751,"byte_end":219754,"line_start":3888,"line_end":3888,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219759,"byte_end":219814,"line_start":3889,"line_end":3889,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219819,"byte_end":219822,"line_start":3890,"line_end":3890,"column_start":5,"column_end":8}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219827,"byte_end":219871,"line_start":3891,"line_end":3891,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219876,"byte_end":219912,"line_start":3892,"line_end":3892,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219917,"byte_end":219920,"line_start":3893,"line_end":3893,"column_start":5,"column_end":8}},{"value":"/ *map.entry_ref(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219925,"byte_end":219976,"line_start":3894,"line_end":3894,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":219981,"byte_end":220017,"line_start":3895,"line_end":3895,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220022,"byte_end":220029,"line_start":3896,"line_end":3896,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220915,"byte_end":220929,"line_start":3925,"line_end":3925,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<EntryRef>::or_insert_with","value":"pub fn or_insert_with<F: FnOnce() -> V>(Self, F) -> &'a mut V where K: Hash +\nFrom<&'b Q>, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220365,"byte_end":220458,"line_start":3909,"line_end":3909,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220463,"byte_end":220525,"line_start":3910,"line_end":3910,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220530,"byte_end":220533,"line_start":3911,"line_end":3911,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220538,"byte_end":220552,"line_start":3912,"line_end":3912,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220557,"byte_end":220560,"line_start":3913,"line_end":3913,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220565,"byte_end":220572,"line_start":3914,"line_end":3914,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220577,"byte_end":220604,"line_start":3915,"line_end":3915,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220609,"byte_end":220612,"line_start":3916,"line_end":3916,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, String> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220617,"byte_end":220675,"line_start":3917,"line_end":3917,"column_start":5,"column_end":63}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220680,"byte_end":220711,"line_start":3918,"line_end":3918,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220716,"byte_end":220719,"line_start":3919,"line_end":3919,"column_start":5,"column_end":8}},{"value":"/ map.entry_ref(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220724,"byte_end":220776,"line_start":3920,"line_end":3920,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220781,"byte_end":220784,"line_start":3921,"line_end":3921,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220789,"byte_end":220842,"line_start":3922,"line_end":3922,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":220847,"byte_end":220854,"line_start":3923,"line_end":3923,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222026,"byte_end":222044,"line_start":3955,"line_end":3955,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<EntryRef>::or_insert_with_key","value":"pub fn or_insert_with_key<F: FnOnce(&Q) -> V>(Self, F) -> &'a mut V where\nK: Hash + Borrow<Q> + From<&'b Q>, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting, if empty, the result of the default function.\n This method allows for generating key-derived values for insertion by providing the default\n function a reference to the key that was moved during the `.entry_ref(key)` method call.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting, if empty, the result of the default function.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221215,"byte_end":221310,"line_start":3936,"line_end":3936,"column_start":5,"column_end":100}},{"value":"/ This method allows for generating key-derived values for insertion by providing the default","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221315,"byte_end":221410,"line_start":3937,"line_end":3937,"column_start":5,"column_end":100}},{"value":"/ function a reference to the key that was moved during the `.entry_ref(key)` method call.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221415,"byte_end":221507,"line_start":3938,"line_end":3938,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221512,"byte_end":221515,"line_start":3939,"line_end":3939,"column_start":5,"column_end":8}},{"value":"/ The reference to the moved key is provided so that cloning or copying the key is","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221520,"byte_end":221604,"line_start":3940,"line_end":3940,"column_start":5,"column_end":89}},{"value":"/ unnecessary, unlike with `.or_insert_with(|| ... )`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221609,"byte_end":221665,"line_start":3941,"line_end":3941,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221670,"byte_end":221673,"line_start":3942,"line_end":3942,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221678,"byte_end":221692,"line_start":3943,"line_end":3943,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221697,"byte_end":221700,"line_start":3944,"line_end":3944,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221705,"byte_end":221712,"line_start":3945,"line_end":3945,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221717,"byte_end":221744,"line_start":3946,"line_end":3946,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221749,"byte_end":221752,"line_start":3947,"line_end":3947,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, usize> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221757,"byte_end":221814,"line_start":3948,"line_end":3948,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221819,"byte_end":221822,"line_start":3949,"line_end":3949,"column_start":5,"column_end":8}},{"value":"/ map.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221827,"byte_end":221904,"line_start":3950,"line_end":3950,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221909,"byte_end":221912,"line_start":3951,"line_end":3951,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 9);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221917,"byte_end":221953,"line_start":3952,"line_end":3952,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":221958,"byte_end":221965,"line_start":3953,"line_end":3953,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222759,"byte_end":222762,"line_start":3980,"line_end":3980,"column_start":12,"column_end":15},"name":"key","qualname":"<EntryRef>::key","value":"pub fn key(&Self) -> &Q where K: Borrow<Q>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222428,"byte_end":222472,"line_start":3969,"line_end":3969,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222477,"byte_end":222480,"line_start":3970,"line_end":3970,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222485,"byte_end":222499,"line_start":3971,"line_end":3971,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222504,"byte_end":222507,"line_start":3972,"line_end":3972,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222512,"byte_end":222519,"line_start":3973,"line_end":3973,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222524,"byte_end":222551,"line_start":3974,"line_end":3974,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222556,"byte_end":222559,"line_start":3975,"line_end":3975,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222564,"byte_end":222619,"line_start":3976,"line_end":3976,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(map.entry_ref(\"poneyland\").key(), \"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222624,"byte_end":222686,"line_start":3977,"line_end":3977,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222691,"byte_end":222698,"line_start":3978,"line_end":3978,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223603,"byte_end":223613,"line_start":4011,"line_end":4011,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<EntryRef>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":222971,"byte_end":223039,"line_start":3990,"line_end":3990,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223044,"byte_end":223079,"line_start":3991,"line_end":3991,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223084,"byte_end":223087,"line_start":3992,"line_end":3992,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223092,"byte_end":223106,"line_start":3993,"line_end":3993,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223111,"byte_end":223114,"line_start":3994,"line_end":3994,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223119,"byte_end":223126,"line_start":3995,"line_end":3995,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223131,"byte_end":223158,"line_start":3996,"line_end":3996,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223163,"byte_end":223166,"line_start":3997,"line_end":3997,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223171,"byte_end":223226,"line_start":3998,"line_end":3998,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223231,"byte_end":223234,"line_start":3999,"line_end":3999,"column_start":5,"column_end":8}},{"value":"/ map.entry_ref(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223239,"byte_end":223269,"line_start":4000,"line_end":4000,"column_start":5,"column_end":35}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223274,"byte_end":223309,"line_start":4001,"line_end":4001,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223314,"byte_end":223336,"line_start":4002,"line_end":4002,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223341,"byte_end":223378,"line_start":4003,"line_end":4003,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223383,"byte_end":223386,"line_start":4004,"line_end":4004,"column_start":5,"column_end":8}},{"value":"/ map.entry_ref(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223391,"byte_end":223421,"line_start":4005,"line_end":4005,"column_start":5,"column_end":35}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223426,"byte_end":223461,"line_start":4006,"line_end":4006,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223466,"byte_end":223488,"line_start":4007,"line_end":4007,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223493,"byte_end":223530,"line_start":4008,"line_end":4008,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223535,"byte_end":223542,"line_start":4009,"line_end":4009,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225588,"byte_end":225610,"line_start":4079,"line_end":4079,"column_start":12,"column_end":34},"name":"and_replace_entry_with","qualname":"<EntryRef>::and_replace_entry_with","value":"pub fn and_replace_entry_with<F>(Self, F) -> Self where F: FnOnce(&Q, V) ->\nOption<V>, K: Borrow<Q>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n an occupied entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":223925,"byte_end":223995,"line_start":4024,"line_end":4024,"column_start":5,"column_end":75}},{"value":"/ an occupied entry and allows to replace or remove it based on the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224000,"byte_end":224069,"line_start":4025,"line_end":4025,"column_start":5,"column_end":74}},{"value":"/ value of the returned option.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224074,"byte_end":224107,"line_start":4026,"line_end":4026,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224112,"byte_end":224115,"line_start":4027,"line_end":4027,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224120,"byte_end":224134,"line_start":4028,"line_end":4028,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224139,"byte_end":224142,"line_start":4029,"line_end":4029,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224147,"byte_end":224154,"line_start":4030,"line_end":4030,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224159,"byte_end":224186,"line_start":4031,"line_end":4031,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224191,"byte_end":224229,"line_start":4032,"line_end":4032,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224234,"byte_end":224237,"line_start":4033,"line_end":4033,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224242,"byte_end":224297,"line_start":4034,"line_end":4034,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224302,"byte_end":224305,"line_start":4035,"line_end":4035,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224310,"byte_end":224329,"line_start":4036,"line_end":4036,"column_start":5,"column_end":24}},{"value":"/     .entry_ref(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224334,"byte_end":224365,"line_start":4037,"line_end":4037,"column_start":5,"column_end":36}},{"value":"/     .and_replace_entry_with(|_k, _v| panic!());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224370,"byte_end":224421,"line_start":4038,"line_end":4038,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224426,"byte_end":224429,"line_start":4039,"line_end":4039,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224434,"byte_end":224451,"line_start":4040,"line_end":4040,"column_start":5,"column_end":22}},{"value":"/     EntryRef::Vacant(e) => {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224456,"byte_end":224488,"line_start":4041,"line_end":4041,"column_start":5,"column_end":37}},{"value":"/         assert_eq!(e.key(), \"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224493,"byte_end":224538,"line_start":4042,"line_end":4042,"column_start":5,"column_end":50}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224543,"byte_end":224552,"line_start":4043,"line_end":4043,"column_start":5,"column_end":14}},{"value":"/     EntryRef::Occupied(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224557,"byte_end":224599,"line_start":4044,"line_end":4044,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224604,"byte_end":224609,"line_start":4045,"line_end":4045,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224614,"byte_end":224617,"line_start":4046,"line_end":4046,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"poneyland\".to_string(), 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224622,"byte_end":224666,"line_start":4047,"line_end":4047,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224671,"byte_end":224674,"line_start":4048,"line_end":4048,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224679,"byte_end":224698,"line_start":4049,"line_end":4049,"column_start":5,"column_end":24}},{"value":"/     .entry_ref(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224703,"byte_end":224734,"line_start":4050,"line_end":4050,"column_start":5,"column_end":36}},{"value":"/     .and_replace_entry_with(|k, v| {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224739,"byte_end":224779,"line_start":4051,"line_end":4051,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(k, \"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224784,"byte_end":224823,"line_start":4052,"line_end":4052,"column_start":5,"column_end":44}},{"value":"/         assert_eq!(v, 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224828,"byte_end":224858,"line_start":4053,"line_end":4053,"column_start":5,"column_end":35}},{"value":"/         Some(v + 1)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224863,"byte_end":224886,"line_start":4054,"line_end":4054,"column_start":5,"column_end":28}},{"value":"/     });","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224891,"byte_end":224902,"line_start":4055,"line_end":4055,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224907,"byte_end":224910,"line_start":4056,"line_end":4056,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224915,"byte_end":224932,"line_start":4057,"line_end":4057,"column_start":5,"column_end":22}},{"value":"/     EntryRef::Occupied(e) => {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224937,"byte_end":224971,"line_start":4058,"line_end":4058,"column_start":5,"column_end":39}},{"value":"/         assert_eq!(e.key(), \"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":224976,"byte_end":225021,"line_start":4059,"line_end":4059,"column_start":5,"column_end":50}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225026,"byte_end":225063,"line_start":4060,"line_end":4060,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225068,"byte_end":225077,"line_start":4061,"line_end":4061,"column_start":5,"column_end":14}},{"value":"/     EntryRef::Vacant(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225082,"byte_end":225122,"line_start":4062,"line_end":4062,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225127,"byte_end":225132,"line_start":4063,"line_end":4063,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225137,"byte_end":225140,"line_start":4064,"line_end":4064,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225145,"byte_end":225182,"line_start":4065,"line_end":4065,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225187,"byte_end":225190,"line_start":4066,"line_end":4066,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225195,"byte_end":225214,"line_start":4067,"line_end":4067,"column_start":5,"column_end":24}},{"value":"/     .entry_ref(\"poneyland\")","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225219,"byte_end":225250,"line_start":4068,"line_end":4068,"column_start":5,"column_end":36}},{"value":"/     .and_replace_entry_with(|_k, _v| None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225255,"byte_end":225302,"line_start":4069,"line_end":4069,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225307,"byte_end":225310,"line_start":4070,"line_end":4070,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225315,"byte_end":225332,"line_start":4071,"line_end":4071,"column_start":5,"column_end":22}},{"value":"/     EntryRef::Vacant(e) => assert_eq!(e.key(), \"poneyland\"),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225337,"byte_end":225401,"line_start":4072,"line_end":4072,"column_start":5,"column_end":69}},{"value":"/     EntryRef::Occupied(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225406,"byte_end":225448,"line_start":4073,"line_end":4073,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225453,"byte_end":225458,"line_start":4074,"line_end":4074,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225463,"byte_end":225466,"line_start":4075,"line_end":4075,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225471,"byte_end":225515,"line_start":4076,"line_end":4076,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225520,"byte_end":225527,"line_start":4077,"line_end":4077,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226430,"byte_end":226440,"line_start":4106,"line_end":4106,"column_start":12,"column_end":22},"name":"or_default","qualname":"<EntryRef>::or_default","value":"pub fn or_default(Self) -> &'a mut V where K: Hash + From<&'b Q>,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225964,"byte_end":226040,"line_start":4092,"line_end":4092,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226045,"byte_end":226107,"line_start":4093,"line_end":4093,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226112,"byte_end":226115,"line_start":4094,"line_end":4094,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226120,"byte_end":226134,"line_start":4095,"line_end":4095,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226139,"byte_end":226142,"line_start":4096,"line_end":4096,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226147,"byte_end":226154,"line_start":4097,"line_end":4097,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226159,"byte_end":226186,"line_start":4098,"line_end":4098,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226191,"byte_end":226194,"line_start":4099,"line_end":4099,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226199,"byte_end":226260,"line_start":4100,"line_end":4100,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226265,"byte_end":226305,"line_start":4101,"line_end":4101,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226310,"byte_end":226313,"line_start":4102,"line_end":4102,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226318,"byte_end":226357,"line_start":4103,"line_end":4103,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226362,"byte_end":226369,"line_start":4104,"line_end":4104,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227186,"byte_end":227189,"line_start":4131,"line_end":4131,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntryRef>::key","value":"pub fn key(&Self) -> &Q where K: Borrow<Q>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226804,"byte_end":226849,"line_start":4119,"line_end":4119,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226854,"byte_end":226857,"line_start":4120,"line_end":4120,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226862,"byte_end":226876,"line_start":4121,"line_end":4121,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226881,"byte_end":226884,"line_start":4122,"line_end":4122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226889,"byte_end":226896,"line_start":4123,"line_end":4123,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226901,"byte_end":226928,"line_start":4124,"line_end":4124,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226933,"byte_end":226936,"line_start":4125,"line_end":4125,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226941,"byte_end":226996,"line_start":4126,"line_end":4126,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227001,"byte_end":227046,"line_start":4127,"line_end":4127,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(map.entry_ref(\"poneyland\").key(), \"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227051,"byte_end":227113,"line_start":4128,"line_end":4128,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227118,"byte_end":227125,"line_start":4129,"line_end":4129,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1529},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227903,"byte_end":227915,"line_start":4157,"line_end":4157,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntryRef>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227302,"byte_end":227359,"line_start":4138,"line_end":4138,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227364,"byte_end":227367,"line_start":4139,"line_end":4139,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227372,"byte_end":227386,"line_start":4140,"line_end":4140,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227391,"byte_end":227394,"line_start":4141,"line_end":4141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227399,"byte_end":227406,"line_start":4142,"line_end":4142,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227411,"byte_end":227438,"line_start":4143,"line_end":4143,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227443,"byte_end":227481,"line_start":4144,"line_end":4144,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227486,"byte_end":227489,"line_start":4145,"line_end":4145,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227494,"byte_end":227549,"line_start":4146,"line_end":4146,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227554,"byte_end":227599,"line_start":4147,"line_end":4147,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227604,"byte_end":227607,"line_start":4148,"line_end":4148,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227612,"byte_end":227675,"line_start":4149,"line_end":4149,"column_start":5,"column_end":68}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227680,"byte_end":227724,"line_start":4150,"line_end":4150,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227729,"byte_end":227754,"line_start":4151,"line_end":4151,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227759,"byte_end":227764,"line_start":4152,"line_end":4152,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227769,"byte_end":227772,"line_start":4153,"line_end":4153,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227777,"byte_end":227830,"line_start":4154,"line_end":4154,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227835,"byte_end":227842,"line_start":4155,"line_end":4155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228483,"byte_end":228486,"line_start":4177,"line_end":4177,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntryRef>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":227999,"byte_end":228046,"line_start":4161,"line_end":4161,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228051,"byte_end":228054,"line_start":4162,"line_end":4162,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228059,"byte_end":228073,"line_start":4163,"line_end":4163,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228078,"byte_end":228081,"line_start":4164,"line_end":4164,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228086,"byte_end":228093,"line_start":4165,"line_end":4165,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228098,"byte_end":228125,"line_start":4166,"line_end":4166,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228130,"byte_end":228168,"line_start":4167,"line_end":4167,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228173,"byte_end":228176,"line_start":4168,"line_end":4168,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228181,"byte_end":228236,"line_start":4169,"line_end":4169,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228241,"byte_end":228286,"line_start":4170,"line_end":4170,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228291,"byte_end":228294,"line_start":4171,"line_end":4171,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228299,"byte_end":228362,"line_start":4172,"line_end":4172,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228367,"byte_end":228400,"line_start":4173,"line_end":4173,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228405,"byte_end":228410,"line_start":4174,"line_end":4174,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228415,"byte_end":228422,"line_start":4175,"line_end":4175,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229468,"byte_end":229475,"line_start":4209,"line_end":4209,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntryRef>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228554,"byte_end":228609,"line_start":4181,"line_end":4181,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228614,"byte_end":228617,"line_start":4182,"line_end":4182,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntryRef` which may outlive the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228622,"byte_end":228697,"line_start":4183,"line_end":4183,"column_start":5,"column_end":80}},{"value":"/ destruction of the `EntryRef` value, see [`into_mut`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228702,"byte_end":228760,"line_start":4184,"line_end":4184,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228765,"byte_end":228768,"line_start":4185,"line_end":4185,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228773,"byte_end":228807,"line_start":4186,"line_end":4186,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228812,"byte_end":228815,"line_start":4187,"line_end":4187,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228820,"byte_end":228834,"line_start":4188,"line_end":4188,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228839,"byte_end":228842,"line_start":4189,"line_end":4189,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228847,"byte_end":228854,"line_start":4190,"line_end":4190,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228859,"byte_end":228886,"line_start":4191,"line_end":4191,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228891,"byte_end":228929,"line_start":4192,"line_end":4192,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228934,"byte_end":228937,"line_start":4193,"line_end":4193,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":228942,"byte_end":228997,"line_start":4194,"line_end":4194,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229002,"byte_end":229047,"line_start":4195,"line_end":4195,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229052,"byte_end":229055,"line_start":4196,"line_end":4196,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229060,"byte_end":229097,"line_start":4197,"line_end":4197,"column_start":5,"column_end":42}},{"value":"/ if let EntryRef::Occupied(mut o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229102,"byte_end":229169,"line_start":4198,"line_end":4198,"column_start":5,"column_end":72}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229174,"byte_end":229201,"line_start":4199,"line_end":4199,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229206,"byte_end":229239,"line_start":4200,"line_end":4200,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229244,"byte_end":229247,"line_start":4201,"line_end":4201,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229252,"byte_end":229304,"line_start":4202,"line_end":4202,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229309,"byte_end":229335,"line_start":4203,"line_end":4203,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229340,"byte_end":229345,"line_start":4204,"line_end":4204,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229350,"byte_end":229353,"line_start":4205,"line_end":4205,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229358,"byte_end":229395,"line_start":4206,"line_end":4206,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229400,"byte_end":229407,"line_start":4207,"line_end":4207,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230349,"byte_end":230357,"line_start":4237,"line_end":4237,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntryRef>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntryRef into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntryRef into a mutable reference to the value in the entry","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229555,"byte_end":229639,"line_start":4213,"line_end":4213,"column_start":5,"column_end":89}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229644,"byte_end":229688,"line_start":4214,"line_end":4214,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229693,"byte_end":229696,"line_start":4215,"line_end":4215,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntryRef`, see [`get_mut`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229701,"byte_end":229780,"line_start":4216,"line_end":4216,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229785,"byte_end":229788,"line_start":4217,"line_end":4217,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229793,"byte_end":229825,"line_start":4218,"line_end":4218,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229830,"byte_end":229833,"line_start":4219,"line_end":4219,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229838,"byte_end":229852,"line_start":4220,"line_end":4220,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229857,"byte_end":229860,"line_start":4221,"line_end":4221,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229865,"byte_end":229872,"line_start":4222,"line_end":4222,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229877,"byte_end":229904,"line_start":4223,"line_end":4223,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229909,"byte_end":229947,"line_start":4224,"line_end":4224,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229952,"byte_end":229955,"line_start":4225,"line_end":4225,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":229960,"byte_end":230015,"line_start":4226,"line_end":4226,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230020,"byte_end":230065,"line_start":4227,"line_end":4227,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230070,"byte_end":230073,"line_start":4228,"line_end":4228,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230078,"byte_end":230115,"line_start":4229,"line_end":4229,"column_start":5,"column_end":42}},{"value":"/ if let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230120,"byte_end":230183,"line_start":4230,"line_end":4230,"column_start":5,"column_end":68}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230188,"byte_end":230216,"line_start":4231,"line_end":4231,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230221,"byte_end":230226,"line_start":4232,"line_end":4232,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230231,"byte_end":230234,"line_start":4233,"line_end":4233,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230239,"byte_end":230276,"line_start":4234,"line_end":4234,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230281,"byte_end":230288,"line_start":4235,"line_end":4235,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230997,"byte_end":231003,"line_start":4259,"line_end":4259,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntryRef>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230435,"byte_end":230502,"line_start":4241,"line_end":4241,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230507,"byte_end":230510,"line_start":4242,"line_end":4242,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230515,"byte_end":230529,"line_start":4243,"line_end":4243,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230534,"byte_end":230537,"line_start":4244,"line_end":4244,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230542,"byte_end":230549,"line_start":4245,"line_end":4245,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230554,"byte_end":230581,"line_start":4246,"line_end":4246,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230586,"byte_end":230624,"line_start":4247,"line_end":4247,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230629,"byte_end":230632,"line_start":4248,"line_end":4248,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230637,"byte_end":230692,"line_start":4249,"line_end":4249,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230697,"byte_end":230742,"line_start":4250,"line_end":4250,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230747,"byte_end":230750,"line_start":4251,"line_end":4251,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Occupied(mut o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230755,"byte_end":230822,"line_start":4252,"line_end":4252,"column_start":5,"column_end":72}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230827,"byte_end":230864,"line_start":4253,"line_end":4253,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230869,"byte_end":230874,"line_start":4254,"line_end":4254,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230879,"byte_end":230882,"line_start":4255,"line_end":4255,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230887,"byte_end":230924,"line_start":4256,"line_end":4256,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":230929,"byte_end":230936,"line_start":4257,"line_end":4257,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231701,"byte_end":231707,"line_start":4283,"line_end":4283,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntryRef>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231143,"byte_end":231196,"line_start":4265,"line_end":4265,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231201,"byte_end":231204,"line_start":4266,"line_end":4266,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231209,"byte_end":231223,"line_start":4267,"line_end":4267,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231228,"byte_end":231231,"line_start":4268,"line_end":4268,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231236,"byte_end":231243,"line_start":4269,"line_end":4269,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231248,"byte_end":231275,"line_start":4270,"line_end":4270,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231280,"byte_end":231318,"line_start":4271,"line_end":4271,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231323,"byte_end":231326,"line_start":4272,"line_end":4272,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231331,"byte_end":231386,"line_start":4273,"line_end":4273,"column_start":5,"column_end":60}},{"value":"/ map.entry_ref(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231391,"byte_end":231436,"line_start":4274,"line_end":4274,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231441,"byte_end":231444,"line_start":4275,"line_end":4275,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231449,"byte_end":231512,"line_start":4276,"line_end":4276,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231517,"byte_end":231552,"line_start":4277,"line_end":4277,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231557,"byte_end":231562,"line_start":4278,"line_end":4278,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231567,"byte_end":231570,"line_start":4279,"line_end":4279,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231575,"byte_end":231628,"line_start":4280,"line_end":4280,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231633,"byte_end":231640,"line_start":4281,"line_end":4281,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232578,"byte_end":232591,"line_start":4310,"line_end":4310,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntryRef>::replace_entry","value":"pub fn replace_entry(Self, V) -> (K, V) where K: From<&'b Q>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231762,"byte_end":231854,"line_start":4287,"line_end":4287,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231859,"byte_end":231897,"line_start":4288,"line_end":4288,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231902,"byte_end":231905,"line_start":4289,"line_end":4289,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231910,"byte_end":231922,"line_start":4290,"line_end":4290,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231927,"byte_end":231930,"line_start":4291,"line_end":4291,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`EntryRef::insert`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":231935,"byte_end":232013,"line_start":4292,"line_end":4292,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232018,"byte_end":232021,"line_start":4293,"line_end":4293,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232026,"byte_end":232040,"line_start":4294,"line_end":4294,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232045,"byte_end":232048,"line_start":4295,"line_end":4295,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232053,"byte_end":232060,"line_start":4296,"line_end":4296,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{EntryRef, HashMap};","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232065,"byte_end":232114,"line_start":4297,"line_end":4297,"column_start":5,"column_end":54}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232119,"byte_end":232139,"line_start":4298,"line_end":4298,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232144,"byte_end":232147,"line_start":4299,"line_end":4299,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<str>, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232152,"byte_end":232208,"line_start":4300,"line_end":4300,"column_start":5,"column_end":61}},{"value":"/ map.insert(Rc::from(\"Stringthing\"), 15);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232213,"byte_end":232257,"line_start":4301,"line_end":4301,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232262,"byte_end":232265,"line_start":4302,"line_end":4302,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Occupied(entry) = map.entry_ref(\"Stringthing\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232270,"byte_end":232339,"line_start":4303,"line_end":4303,"column_start":5,"column_end":74}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232344,"byte_end":232407,"line_start":4304,"line_end":4304,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<str>, u32) = entry.replace_entry(16);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232412,"byte_end":232487,"line_start":4305,"line_end":4305,"column_start":5,"column_end":80}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232492,"byte_end":232497,"line_start":4306,"line_end":4306,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232502,"byte_end":232505,"line_start":4307,"line_end":4307,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232510,"byte_end":232517,"line_start":4308,"line_end":4308,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233915,"byte_end":233926,"line_start":4351,"line_end":4351,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntryRef>::replace_key","value":"pub fn replace_key(Self) -> K where K: From<&'b Q>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232892,"byte_end":232968,"line_start":4322,"line_end":4322,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232973,"byte_end":232976,"line_start":4323,"line_end":4323,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232981,"byte_end":232993,"line_start":4324,"line_end":4324,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":232998,"byte_end":233001,"line_start":4325,"line_end":4325,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`Entry::insert`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233006,"byte_end":233081,"line_start":4326,"line_end":4326,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233086,"byte_end":233089,"line_start":4327,"line_end":4327,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233094,"byte_end":233108,"line_start":4328,"line_end":4328,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233113,"byte_end":233116,"line_start":4329,"line_end":4329,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233121,"byte_end":233128,"line_start":4330,"line_end":4330,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{EntryRef, HashMap};","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233133,"byte_end":233182,"line_start":4331,"line_end":4331,"column_start":5,"column_end":54}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233187,"byte_end":233207,"line_start":4332,"line_end":4332,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233212,"byte_end":233215,"line_start":4333,"line_end":4333,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<str>, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233220,"byte_end":233276,"line_start":4334,"line_end":4334,"column_start":5,"column_end":61}},{"value":"/ let mut known_strings: Vec<Rc<str>> = Vec::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233281,"byte_end":233334,"line_start":4335,"line_end":4335,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233339,"byte_end":233342,"line_start":4336,"line_end":4336,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233347,"byte_end":233397,"line_start":4337,"line_end":4337,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233402,"byte_end":233405,"line_start":4338,"line_end":4338,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233410,"byte_end":233455,"line_start":4339,"line_end":4339,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233460,"byte_end":233463,"line_start":4340,"line_end":4340,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<str>, u32>, known_strings: &[Rc<str>] ) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233468,"byte_end":233552,"line_start":4341,"line_end":4341,"column_start":5,"column_end":89}},{"value":"/     for s in known_strings {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233557,"byte_end":233589,"line_start":4342,"line_end":4342,"column_start":5,"column_end":37}},{"value":"/         if let EntryRef::Occupied(entry) = map.entry_ref(s.as_ref()) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233594,"byte_end":233668,"line_start":4343,"line_end":4343,"column_start":5,"column_end":79}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233673,"byte_end":233759,"line_start":4344,"line_end":4344,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233764,"byte_end":233800,"line_start":4345,"line_end":4345,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233805,"byte_end":233818,"line_start":4346,"line_end":4346,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233823,"byte_end":233832,"line_start":4347,"line_end":4347,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233837,"byte_end":233842,"line_start":4348,"line_end":4348,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":233847,"byte_end":233854,"line_start":4349,"line_end":4349,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1537},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235667,"byte_end":235685,"line_start":4408,"line_end":4408,"column_start":12,"column_end":30},"name":"replace_entry_with","qualname":"<OccupiedEntryRef>::replace_entry_with","value":"pub fn replace_entry_with<F>(Self, F) -> EntryRef where F: FnOnce(&Q, V) ->\nOption<V>, K: Borrow<Q>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n the entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234107,"byte_end":234177,"line_start":4359,"line_end":4359,"column_start":5,"column_end":75}},{"value":"/ the entry and allows to replace or remove it based on the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234182,"byte_end":234243,"line_start":4360,"line_end":4360,"column_start":5,"column_end":66}},{"value":"/ value of the returned option.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234248,"byte_end":234281,"line_start":4361,"line_end":4361,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234286,"byte_end":234289,"line_start":4362,"line_end":4362,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234294,"byte_end":234308,"line_start":4363,"line_end":4363,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234313,"byte_end":234316,"line_start":4364,"line_end":4364,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234321,"byte_end":234328,"line_start":4365,"line_end":4365,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234333,"byte_end":234360,"line_start":4366,"line_end":4366,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234365,"byte_end":234403,"line_start":4367,"line_end":4367,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234408,"byte_end":234411,"line_start":4368,"line_end":4368,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234416,"byte_end":234471,"line_start":4369,"line_end":4369,"column_start":5,"column_end":60}},{"value":"/ map.insert(\"poneyland\".to_string(), 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234476,"byte_end":234520,"line_start":4370,"line_end":4370,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234525,"byte_end":234528,"line_start":4371,"line_end":4371,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry_ref(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234533,"byte_end":234583,"line_start":4372,"line_end":4372,"column_start":5,"column_end":55}},{"value":"/     EntryRef::Occupied(e) => {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234588,"byte_end":234622,"line_start":4373,"line_end":4373,"column_start":5,"column_end":39}},{"value":"/         e.replace_entry_with(|k, v| {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234627,"byte_end":234668,"line_start":4374,"line_end":4374,"column_start":5,"column_end":46}},{"value":"/             assert_eq!(k, \"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234673,"byte_end":234716,"line_start":4375,"line_end":4375,"column_start":5,"column_end":48}},{"value":"/             assert_eq!(v, 42);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234721,"byte_end":234755,"line_start":4376,"line_end":4376,"column_start":5,"column_end":39}},{"value":"/             Some(v + 1)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234760,"byte_end":234787,"line_start":4377,"line_end":4377,"column_start":5,"column_end":32}},{"value":"/         })","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234792,"byte_end":234806,"line_start":4378,"line_end":4378,"column_start":5,"column_end":19}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234811,"byte_end":234820,"line_start":4379,"line_end":4379,"column_start":5,"column_end":14}},{"value":"/     EntryRef::Vacant(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234825,"byte_end":234865,"line_start":4380,"line_end":4380,"column_start":5,"column_end":45}},{"value":"/ };","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234870,"byte_end":234876,"line_start":4381,"line_end":4381,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234881,"byte_end":234884,"line_start":4382,"line_end":4382,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234889,"byte_end":234906,"line_start":4383,"line_end":4383,"column_start":5,"column_end":22}},{"value":"/     EntryRef::Occupied(e) => {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234911,"byte_end":234945,"line_start":4384,"line_end":4384,"column_start":5,"column_end":39}},{"value":"/         assert_eq!(e.key(), \"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":234950,"byte_end":234995,"line_start":4385,"line_end":4385,"column_start":5,"column_end":50}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235000,"byte_end":235037,"line_start":4386,"line_end":4386,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235042,"byte_end":235051,"line_start":4387,"line_end":4387,"column_start":5,"column_end":14}},{"value":"/     EntryRef::Vacant(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235056,"byte_end":235096,"line_start":4388,"line_end":4388,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235101,"byte_end":235106,"line_start":4389,"line_end":4389,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235111,"byte_end":235114,"line_start":4390,"line_end":4390,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235119,"byte_end":235156,"line_start":4391,"line_end":4391,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235161,"byte_end":235164,"line_start":4392,"line_end":4392,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry_ref(\"poneyland\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235169,"byte_end":235219,"line_start":4393,"line_end":4393,"column_start":5,"column_end":55}},{"value":"/     EntryRef::Occupied(e) => e.replace_entry_with(|_k, _v| None),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235224,"byte_end":235293,"line_start":4394,"line_end":4394,"column_start":5,"column_end":74}},{"value":"/     EntryRef::Vacant(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235298,"byte_end":235338,"line_start":4395,"line_end":4395,"column_start":5,"column_end":45}},{"value":"/ };","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235343,"byte_end":235349,"line_start":4396,"line_end":4396,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235354,"byte_end":235357,"line_start":4397,"line_end":4397,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235362,"byte_end":235379,"line_start":4398,"line_end":4398,"column_start":5,"column_end":22}},{"value":"/     EntryRef::Vacant(e) => {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235384,"byte_end":235416,"line_start":4399,"line_end":4399,"column_start":5,"column_end":37}},{"value":"/         assert_eq!(e.key(), \"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235421,"byte_end":235466,"line_start":4400,"line_end":4400,"column_start":5,"column_end":50}},{"value":"/     }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235471,"byte_end":235480,"line_start":4401,"line_end":4401,"column_start":5,"column_end":14}},{"value":"/     EntryRef::Occupied(_) => panic!(),","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235485,"byte_end":235527,"line_start":4402,"line_end":4402,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235532,"byte_end":235537,"line_start":4403,"line_end":4403,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235542,"byte_end":235545,"line_start":4404,"line_end":4404,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235550,"byte_end":235594,"line_start":4405,"line_end":4405,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":235599,"byte_end":235606,"line_start":4406,"line_end":4406,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1548},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237104,"byte_end":237107,"line_start":4454,"line_end":4454,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntryRef>::key","value":"pub fn key(&Self) -> &Q where K: Borrow<Q>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntryRef`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236677,"byte_end":236750,"line_start":4441,"line_end":4441,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntryRef`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236755,"byte_end":236788,"line_start":4442,"line_end":4442,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236793,"byte_end":236796,"line_start":4443,"line_end":4443,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236801,"byte_end":236815,"line_start":4444,"line_end":4444,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236820,"byte_end":236823,"line_start":4445,"line_end":4445,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236828,"byte_end":236835,"line_start":4446,"line_end":4446,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236840,"byte_end":236867,"line_start":4447,"line_end":4447,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236872,"byte_end":236875,"line_start":4448,"line_end":4448,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236880,"byte_end":236935,"line_start":4449,"line_end":4449,"column_start":5,"column_end":60}},{"value":"/ let key: &str = \"poneyland\";","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236940,"byte_end":236972,"line_start":4450,"line_end":4450,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.entry_ref(key).key(), \"poneyland\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236977,"byte_end":237031,"line_start":4451,"line_end":4451,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237036,"byte_end":237043,"line_start":4452,"line_end":4452,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1549},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237628,"byte_end":237636,"line_start":4477,"line_end":4477,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntryRef>::into_key","value":"pub fn into_key(Self) -> K where K: From<&'b Q>","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237196,"byte_end":237226,"line_start":4461,"line_end":4461,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237231,"byte_end":237234,"line_start":4462,"line_end":4462,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237239,"byte_end":237253,"line_start":4463,"line_end":4463,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237258,"byte_end":237261,"line_start":4464,"line_end":4464,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237266,"byte_end":237273,"line_start":4465,"line_end":4465,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237278,"byte_end":237305,"line_start":4466,"line_end":4466,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237310,"byte_end":237348,"line_start":4467,"line_end":4467,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237353,"byte_end":237356,"line_start":4468,"line_end":4468,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237361,"byte_end":237416,"line_start":4469,"line_end":4469,"column_start":5,"column_end":60}},{"value":"/ let key: &str = \"poneyland\";","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237421,"byte_end":237453,"line_start":4470,"line_end":4470,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237458,"byte_end":237461,"line_start":4471,"line_end":4471,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Vacant(v) = map.entry_ref(key) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237466,"byte_end":237519,"line_start":4472,"line_end":4472,"column_start":5,"column_end":58}},{"value":"/     v.into_key();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237524,"byte_end":237545,"line_start":4473,"line_end":4473,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237550,"byte_end":237555,"line_start":4474,"line_end":4474,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237560,"byte_end":237567,"line_start":4475,"line_end":4475,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":238282,"byte_end":238288,"line_start":4502,"line_end":4502,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntryRef>::insert","value":"pub fn insert(Self, V) -> &'a mut V where K: Hash + From<&'b Q>,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntryRef's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntryRef's key,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237729,"byte_end":237791,"line_start":4484,"line_end":4484,"column_start":5,"column_end":67}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237796,"byte_end":237838,"line_start":4485,"line_end":4485,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237843,"byte_end":237846,"line_start":4486,"line_end":4486,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237851,"byte_end":237865,"line_start":4487,"line_end":4487,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237870,"byte_end":237873,"line_start":4488,"line_end":4488,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237878,"byte_end":237885,"line_start":4489,"line_end":4489,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237890,"byte_end":237917,"line_start":4490,"line_end":4490,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::EntryRef;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237922,"byte_end":237960,"line_start":4491,"line_end":4491,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237965,"byte_end":237968,"line_start":4492,"line_end":4492,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<String, u32> = HashMap::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":237973,"byte_end":238028,"line_start":4493,"line_end":4493,"column_start":5,"column_end":60}},{"value":"/ let key: &str = \"poneyland\";","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":238033,"byte_end":238065,"line_start":4494,"line_end":4494,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":238070,"byte_end":238073,"line_start":4495,"line_end":4495,"column_start":5,"column_end":8}},{"value":"/ if let EntryRef::Vacant(o) = map.entry_ref(key) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":238078,"byte_end":238131,"line_start":4496,"line_end":4496,"column_start":5,"column_end":58}},{"value":"/     o.insert(37);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":238136,"byte_end":238157,"line_start":4497,"line_end":4497,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":238162,"byte_end":238167,"line_start":4498,"line_end":4498,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":238172,"byte_end":238209,"line_start":4499,"line_end":4499,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":238214,"byte_end":238221,"line_start":4500,"line_end":4500,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1709},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":297342,"byte_end":297349,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1713}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":293970,"byte_end":294036,"line_start":20,"line_end":20,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294037,"byte_end":294040,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ As with the [`HashMap`] type, a `HashSet` requires that the elements","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294041,"byte_end":294113,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294114,"byte_end":294194,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294195,"byte_end":294271,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/ it is important that the following property holds:","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294272,"byte_end":294326,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294327,"byte_end":294330,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294331,"byte_end":294342,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294343,"byte_end":294379,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294380,"byte_end":294387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294388,"byte_end":294391,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294392,"byte_end":294462,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294463,"byte_end":294466,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294467,"byte_end":294470,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294471,"byte_end":294544,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ item's hash, as determined by the [`Hash`] trait, or its equality, as","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294545,"byte_end":294618,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ determined by the [`Eq`] trait, changes while it is in the set. This is","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294619,"byte_end":294694,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294695,"byte_end":294774,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ unsafe code.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294775,"byte_end":294791,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294792,"byte_end":294795,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294796,"byte_end":294875,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294876,"byte_end":294954,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashSet` may become corrupted and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":294955,"byte_end":295035,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295036,"byte_end":295081,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295082,"byte_end":295085,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295086,"byte_end":295100,"line_start":45,"line_end":45,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295101,"byte_end":295104,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295105,"byte_end":295112,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295113,"byte_end":295140,"line_start":48,"line_end":48,"column_start":1,"column_end":28}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295141,"byte_end":295209,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ // would be `HashSet<String>` in this example).","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295210,"byte_end":295261,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ let mut books = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295262,"byte_end":295297,"line_start":51,"line_end":51,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295298,"byte_end":295301,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295302,"byte_end":295324,"line_start":53,"line_end":53,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\".to_string());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295325,"byte_end":295378,"line_start":54,"line_end":54,"column_start":1,"column_end":54}},{"value":"/ books.insert(\"To Kill a Mockingbird\".to_string());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295379,"byte_end":295433,"line_start":55,"line_end":55,"column_start":1,"column_end":55}},{"value":"/ books.insert(\"The Odyssey\".to_string());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295434,"byte_end":295478,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ books.insert(\"The Great Gatsby\".to_string());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295479,"byte_end":295528,"line_start":57,"line_end":57,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295529,"byte_end":295532,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295533,"byte_end":295565,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295566,"byte_end":295613,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295614,"byte_end":295686,"line_start":61,"line_end":61,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295687,"byte_end":295717,"line_start":62,"line_end":62,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295718,"byte_end":295723,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295724,"byte_end":295727,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295728,"byte_end":295749,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295750,"byte_end":295782,"line_start":66,"line_end":66,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295783,"byte_end":295786,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295787,"byte_end":295818,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295819,"byte_end":295843,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295844,"byte_end":295873,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295874,"byte_end":295879,"line_start":71,"line_end":71,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295880,"byte_end":295887,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295888,"byte_end":295891,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashSet` with a custom type is to derive","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295892,"byte_end":295960,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/ [`Eq`] and [`Hash`]. We must also derive [`PartialEq`]. This will in the","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":295961,"byte_end":296037,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/ future be implied by [`Eq`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296038,"byte_end":296070,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296071,"byte_end":296074,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296075,"byte_end":296082,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296083,"byte_end":296110,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296111,"byte_end":296152,"line_start":80,"line_end":80,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296153,"byte_end":296172,"line_start":81,"line_end":81,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296173,"byte_end":296194,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/     power: usize,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296195,"byte_end":296216,"line_start":83,"line_end":83,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296217,"byte_end":296222,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296223,"byte_end":296226,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ let mut vikings = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296227,"byte_end":296264,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296265,"byte_end":296268,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296269,"byte_end":296336,"line_start":88,"line_end":88,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296337,"byte_end":296404,"line_start":89,"line_end":89,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296405,"byte_end":296471,"line_start":90,"line_end":90,"column_start":1,"column_end":67}},{"value":"/ vikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296472,"byte_end":296540,"line_start":91,"line_end":91,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296541,"byte_end":296544,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the vikings.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296545,"byte_end":296600,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"/ for x in &vikings {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296601,"byte_end":296624,"line_start":94,"line_end":94,"column_start":1,"column_end":24}},{"value":"/     println!(\"{:?}\", x);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296625,"byte_end":296653,"line_start":95,"line_end":95,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296654,"byte_end":296659,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296660,"byte_end":296667,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296668,"byte_end":296671,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ A `HashSet` with fixed list of elements can be initialized from an array:","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296672,"byte_end":296749,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296750,"byte_end":296753,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296754,"byte_end":296761,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296762,"byte_end":296789,"line_start":102,"line_end":102,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296790,"byte_end":296793,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ let viking_names: HashSet<&'static str> =","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296794,"byte_end":296839,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/     [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296840,"byte_end":296904,"line_start":105,"line_end":105,"column_start":1,"column_end":65}},{"value":"/ // use the values stored in the set","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296905,"byte_end":296944,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296945,"byte_end":296952,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296953,"byte_end":296956,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":296957,"byte_end":297022,"line_start":109,"line_end":109,"column_start":1,"column_end":66}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":297023,"byte_end":297082,"line_start":110,"line_end":110,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":297083,"byte_end":297147,"line_start":111,"line_end":111,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":297148,"byte_end":297184,"line_start":112,"line_end":112,"column_start":1,"column_end":37}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":297185,"byte_end":297258,"line_start":113,"line_end":113,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":297259,"byte_end":297330,"line_start":114,"line_end":114,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300430,"byte_end":300438,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashSet<T, S, A>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold without reallocating.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300104,"byte_end":300177,"line_start":212,"line_end":212,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300182,"byte_end":300185,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300190,"byte_end":300204,"line_start":214,"line_end":214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300209,"byte_end":300212,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300217,"byte_end":300224,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300229,"byte_end":300256,"line_start":217,"line_end":217,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300261,"byte_end":300317,"line_start":218,"line_end":218,"column_start":5,"column_end":61}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300322,"byte_end":300357,"line_start":219,"line_end":219,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300362,"byte_end":300369,"line_start":220,"line_end":220,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300963,"byte_end":300967,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<T, S, A>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all elements in arbitrary order.\n The iterator element type is `&'a T`.","sig":null,"attributes":[{"value":"/ An iterator visiting all elements in arbitrary order.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300496,"byte_end":300553,"line_start":226,"line_end":226,"column_start":5,"column_end":62}},{"value":"/ The iterator element type is `&'a T`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300558,"byte_end":300599,"line_start":227,"line_end":227,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300604,"byte_end":300607,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300612,"byte_end":300626,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300631,"byte_end":300634,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300639,"byte_end":300646,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300651,"byte_end":300678,"line_start":232,"line_end":232,"column_start":5,"column_end":32}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300683,"byte_end":300716,"line_start":233,"line_end":233,"column_start":5,"column_end":38}},{"value":"/ set.insert(\"a\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300721,"byte_end":300741,"line_start":234,"line_end":234,"column_start":5,"column_end":25}},{"value":"/ set.insert(\"b\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300746,"byte_end":300766,"line_start":235,"line_end":235,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300771,"byte_end":300774,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300779,"byte_end":300819,"line_start":237,"line_end":237,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300824,"byte_end":300849,"line_start":238,"line_end":238,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300854,"byte_end":300880,"line_start":239,"line_end":239,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300885,"byte_end":300890,"line_start":240,"line_end":240,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300895,"byte_end":300902,"line_start":241,"line_end":241,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301390,"byte_end":301393,"line_start":262,"line_end":262,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<T, S, A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301063,"byte_end":301109,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301114,"byte_end":301117,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301122,"byte_end":301136,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301141,"byte_end":301144,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301149,"byte_end":301156,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301161,"byte_end":301188,"line_start":254,"line_end":254,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301193,"byte_end":301196,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301201,"byte_end":301232,"line_start":256,"line_end":256,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301237,"byte_end":301264,"line_start":257,"line_end":257,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301269,"byte_end":301285,"line_start":258,"line_end":258,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301290,"byte_end":301317,"line_start":259,"line_end":259,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301322,"byte_end":301329,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1727},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301777,"byte_end":301785,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<T, S, A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301446,"byte_end":301497,"line_start":266,"line_end":266,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301502,"byte_end":301505,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301510,"byte_end":301524,"line_start":268,"line_end":268,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301529,"byte_end":301532,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301537,"byte_end":301544,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301549,"byte_end":301576,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301581,"byte_end":301584,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301589,"byte_end":301620,"line_start":273,"line_end":273,"column_start":5,"column_end":36}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301625,"byte_end":301651,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301656,"byte_end":301672,"line_start":275,"line_end":275,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301677,"byte_end":301704,"line_start":276,"line_end":276,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301709,"byte_end":301716,"line_start":277,"line_end":277,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302333,"byte_end":302338,"line_start":301,"line_end":301,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashSet<T, S, A>>::drain","value":"pub fn drain(&mut Self) -> Drain<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, returning all elements in an iterator.","sig":null,"attributes":[{"value":"/ Clears the set, returning all elements in an iterator.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301842,"byte_end":301900,"line_start":283,"line_end":283,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301905,"byte_end":301908,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301913,"byte_end":301927,"line_start":285,"line_end":285,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301932,"byte_end":301935,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301940,"byte_end":301947,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301952,"byte_end":301979,"line_start":288,"line_end":288,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301984,"byte_end":301987,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":301992,"byte_end":302058,"line_start":290,"line_end":290,"column_start":5,"column_end":71}},{"value":"/ assert!(!set.is_empty());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302063,"byte_end":302092,"line_start":291,"line_end":291,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302097,"byte_end":302100,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ // print 1, 2, 3 in an arbitrary order","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302105,"byte_end":302147,"line_start":293,"line_end":293,"column_start":5,"column_end":47}},{"value":"/ for i in set.drain() {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302152,"byte_end":302178,"line_start":294,"line_end":294,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", i);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302183,"byte_end":302209,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302214,"byte_end":302219,"line_start":296,"line_end":296,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302224,"byte_end":302227,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302232,"byte_end":302260,"line_start":298,"line_end":298,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302265,"byte_end":302272,"line_start":299,"line_end":299,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1729},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302872,"byte_end":302878,"line_start":321,"line_end":321,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<T, S, A>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302444,"byte_end":302501,"line_start":307,"line_end":307,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302506,"byte_end":302509,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302514,"byte_end":302592,"line_start":309,"line_end":309,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302597,"byte_end":302600,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302605,"byte_end":302619,"line_start":311,"line_end":311,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302624,"byte_end":302627,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302632,"byte_end":302639,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302644,"byte_end":302671,"line_start":314,"line_end":314,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302676,"byte_end":302679,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ let xs = [1,2,3,4,5,6];","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302684,"byte_end":302711,"line_start":316,"line_end":316,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = xs.iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302716,"byte_end":302777,"line_start":317,"line_end":317,"column_start":5,"column_end":66}},{"value":"/ set.retain(|&k| k % 2 == 0);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302782,"byte_end":302814,"line_start":318,"line_end":318,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302819,"byte_end":302848,"line_start":319,"line_end":319,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302853,"byte_end":302860,"line_start":320,"line_end":320,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303948,"byte_end":303960,"line_start":354,"line_end":354,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashSet<T, S, A>>::drain_filter","value":"pub fn drain_filter<F>(&mut Self, F) -> DrainFilter<, T, F, A> where\nF: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are true under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are true under the given predicate,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":302998,"byte_end":303059,"line_start":328,"line_end":328,"column_start":5,"column_end":66}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303064,"byte_end":303115,"line_start":329,"line_end":329,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303120,"byte_end":303123,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ In other words, move all elements `e` such that `f(&e)` returns `true` out","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303128,"byte_end":303206,"line_start":331,"line_end":331,"column_start":5,"column_end":83}},{"value":"/ into another iterator.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303211,"byte_end":303237,"line_start":332,"line_end":332,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303242,"byte_end":303245,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, any remaining elements that satisfy","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303250,"byte_end":303333,"line_start":334,"line_end":334,"column_start":5,"column_end":88}},{"value":"/ the predicate are dropped from the set.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303338,"byte_end":303381,"line_start":335,"line_end":335,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303386,"byte_end":303389,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303394,"byte_end":303408,"line_start":337,"line_end":337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303413,"byte_end":303416,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303421,"byte_end":303428,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303433,"byte_end":303460,"line_start":340,"line_end":340,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303465,"byte_end":303468,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<i32> = (0..8).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303473,"byte_end":303522,"line_start":342,"line_end":342,"column_start":5,"column_end":54}},{"value":"/ let drained: HashSet<i32> = set.drain_filter(|v| v % 2 == 0).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303527,"byte_end":303602,"line_start":343,"line_end":343,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303607,"byte_end":303610,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ let mut evens = drained.into_iter().collect::<Vec<_>>();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303615,"byte_end":303675,"line_start":345,"line_end":345,"column_start":5,"column_end":65}},{"value":"/ let mut odds = set.into_iter().collect::<Vec<_>>();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303680,"byte_end":303735,"line_start":346,"line_end":346,"column_start":5,"column_end":60}},{"value":"/ evens.sort();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303740,"byte_end":303757,"line_start":347,"line_end":347,"column_start":5,"column_end":22}},{"value":"/ odds.sort();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303762,"byte_end":303778,"line_start":348,"line_end":348,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303783,"byte_end":303786,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens, vec![0, 2, 4, 6]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303791,"byte_end":303831,"line_start":350,"line_end":350,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(odds, vec![1, 3, 5, 7]);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303836,"byte_end":303875,"line_start":351,"line_end":351,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":303880,"byte_end":303887,"line_start":352,"line_end":352,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1734},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304573,"byte_end":304578,"line_start":380,"line_end":380,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<T, S, A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304266,"byte_end":304306,"line_start":367,"line_end":367,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304311,"byte_end":304314,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304319,"byte_end":304333,"line_start":369,"line_end":369,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304338,"byte_end":304341,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304346,"byte_end":304353,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304358,"byte_end":304385,"line_start":372,"line_end":372,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304390,"byte_end":304393,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304398,"byte_end":304429,"line_start":374,"line_end":374,"column_start":5,"column_end":36}},{"value":"/ v.insert(1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304434,"byte_end":304450,"line_start":375,"line_end":375,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304455,"byte_end":304469,"line_start":376,"line_end":376,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304474,"byte_end":304500,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304505,"byte_end":304512,"line_start":378,"line_end":378,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305684,"byte_end":305695,"line_start":413,"line_end":413,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<HashSet<T, S, Global>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304666,"byte_end":304738,"line_start":386,"line_end":386,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304743,"byte_end":304752,"line_start":387,"line_end":387,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304757,"byte_end":304760,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304765,"byte_end":304832,"line_start":389,"line_end":389,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304837,"byte_end":304840,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304845,"byte_end":304902,"line_start":391,"line_end":391,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304907,"byte_end":304974,"line_start":392,"line_end":392,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304979,"byte_end":305042,"line_start":393,"line_end":393,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305047,"byte_end":305111,"line_start":394,"line_end":394,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305116,"byte_end":305119,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305124,"byte_end":305200,"line_start":396,"line_end":396,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305205,"byte_end":305269,"line_start":397,"line_end":397,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305274,"byte_end":305277,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305282,"byte_end":305285,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305290,"byte_end":305304,"line_start":400,"line_end":400,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305309,"byte_end":305312,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305317,"byte_end":305324,"line_start":402,"line_end":402,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305329,"byte_end":305356,"line_start":403,"line_end":403,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305361,"byte_end":305409,"line_start":404,"line_end":404,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305414,"byte_end":305417,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305422,"byte_end":305464,"line_start":406,"line_end":406,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305469,"byte_end":305511,"line_start":407,"line_end":407,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305516,"byte_end":305534,"line_start":408,"line_end":408,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305539,"byte_end":305546,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305551,"byte_end":305554,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305559,"byte_end":305617,"line_start":411,"line_end":411,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1739},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306916,"byte_end":306940,"line_start":446,"line_end":446,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashSet<T, S, Global>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305800,"byte_end":305865,"line_start":419,"line_end":419,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305870,"byte_end":305900,"line_start":420,"line_end":420,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305905,"byte_end":305908,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305913,"byte_end":305987,"line_start":422,"line_end":422,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":305992,"byte_end":306061,"line_start":423,"line_end":423,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306066,"byte_end":306069,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306074,"byte_end":306131,"line_start":425,"line_end":425,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306136,"byte_end":306203,"line_start":426,"line_end":426,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306208,"byte_end":306271,"line_start":427,"line_end":427,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306276,"byte_end":306340,"line_start":428,"line_end":428,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306345,"byte_end":306348,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306353,"byte_end":306429,"line_start":430,"line_end":430,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306434,"byte_end":306498,"line_start":431,"line_end":431,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306503,"byte_end":306506,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306511,"byte_end":306525,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306530,"byte_end":306533,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306538,"byte_end":306545,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306550,"byte_end":306577,"line_start":436,"line_end":436,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306582,"byte_end":306630,"line_start":437,"line_end":437,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306635,"byte_end":306638,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306643,"byte_end":306685,"line_start":439,"line_end":439,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306690,"byte_end":306749,"line_start":440,"line_end":440,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306754,"byte_end":306772,"line_start":441,"line_end":441,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306777,"byte_end":306784,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306789,"byte_end":306792,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":306797,"byte_end":306855,"line_start":444,"line_end":444,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307230,"byte_end":307239,"line_start":459,"line_end":459,"column_start":12,"column_end":21},"name":"allocator","qualname":"<HashSet<T, S, A>>::allocator","value":"pub fn allocator(&Self) -> &A","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying allocator.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying allocator.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307152,"byte_end":307204,"line_start":457,"line_end":457,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307209,"byte_end":307218,"line_start":458,"line_end":458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1745},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308070,"byte_end":308084,"line_start":484,"line_end":484,"column_start":12,"column_end":26},"name":"with_hasher_in","qualname":"<HashSet<T, S, A>>::with_hasher_in","value":"pub fn with_hasher_in(S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307295,"byte_end":307367,"line_start":463,"line_end":463,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307372,"byte_end":307381,"line_start":464,"line_end":464,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307386,"byte_end":307389,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307394,"byte_end":307461,"line_start":466,"line_end":466,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307466,"byte_end":307469,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307474,"byte_end":307531,"line_start":468,"line_end":468,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307536,"byte_end":307603,"line_start":469,"line_end":469,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307608,"byte_end":307671,"line_start":470,"line_end":470,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307676,"byte_end":307740,"line_start":471,"line_end":471,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307745,"byte_end":307748,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307753,"byte_end":307767,"line_start":473,"line_end":473,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307772,"byte_end":307775,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307780,"byte_end":307787,"line_start":475,"line_end":475,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307792,"byte_end":307819,"line_start":476,"line_end":476,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307824,"byte_end":307872,"line_start":477,"line_end":477,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307877,"byte_end":307880,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307885,"byte_end":307927,"line_start":479,"line_end":479,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307932,"byte_end":307974,"line_start":480,"line_end":480,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307979,"byte_end":307997,"line_start":481,"line_end":481,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308002,"byte_end":308009,"line_start":482,"line_end":482,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309096,"byte_end":309123,"line_start":512,"line_end":512,"column_start":12,"column_end":39},"name":"with_capacity_and_hasher_in","qualname":"<HashSet<T, S, A>>::with_capacity_and_hasher_in","value":"pub fn with_capacity_and_hasher_in(usize, S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308209,"byte_end":308274,"line_start":490,"line_end":490,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308279,"byte_end":308309,"line_start":491,"line_end":491,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308314,"byte_end":308317,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308322,"byte_end":308396,"line_start":493,"line_end":493,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308401,"byte_end":308470,"line_start":494,"line_end":494,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308475,"byte_end":308478,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308483,"byte_end":308540,"line_start":496,"line_end":496,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308545,"byte_end":308612,"line_start":497,"line_end":497,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308617,"byte_end":308680,"line_start":498,"line_end":498,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308685,"byte_end":308749,"line_start":499,"line_end":499,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308754,"byte_end":308757,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308762,"byte_end":308776,"line_start":501,"line_end":501,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308781,"byte_end":308784,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308789,"byte_end":308796,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308801,"byte_end":308828,"line_start":504,"line_end":504,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308833,"byte_end":308881,"line_start":505,"line_end":505,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308886,"byte_end":308889,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308894,"byte_end":308936,"line_start":507,"line_end":507,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":308941,"byte_end":309000,"line_start":508,"line_end":508,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309005,"byte_end":309023,"line_start":509,"line_end":509,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309028,"byte_end":309035,"line_start":510,"line_end":510,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1747},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309815,"byte_end":309821,"line_start":533,"line_end":533,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<T, S, A>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the set's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the set's [`BuildHasher`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309288,"byte_end":309341,"line_start":518,"line_end":518,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309346,"byte_end":309349,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309354,"byte_end":309432,"line_start":520,"line_end":520,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309437,"byte_end":309440,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309445,"byte_end":309459,"line_start":522,"line_end":522,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309464,"byte_end":309467,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309472,"byte_end":309479,"line_start":524,"line_end":524,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309484,"byte_end":309511,"line_start":525,"line_end":525,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309516,"byte_end":309564,"line_start":526,"line_end":526,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309569,"byte_end":309572,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309577,"byte_end":309624,"line_start":528,"line_end":528,"column_start":5,"column_end":52}},{"value":"/ let set: HashSet<i32> = HashSet::with_hasher(hasher);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309629,"byte_end":309686,"line_start":529,"line_end":529,"column_start":5,"column_end":62}},{"value":"/ let hasher: &DefaultHashBuilder = set.hasher();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309691,"byte_end":309742,"line_start":530,"line_end":530,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309747,"byte_end":309754,"line_start":531,"line_end":531,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1752},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310522,"byte_end":310529,"line_start":561,"line_end":561,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashSet<T, S, A>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashSet`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309979,"byte_end":310055,"line_start":544,"line_end":544,"column_start":5,"column_end":81}},{"value":"/ in the `HashSet`. The collection may reserve more space to avoid","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310060,"byte_end":310128,"line_start":545,"line_end":545,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310133,"byte_end":310160,"line_start":546,"line_end":546,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310165,"byte_end":310168,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310173,"byte_end":310185,"line_start":548,"line_end":548,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310190,"byte_end":310193,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows `usize`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310198,"byte_end":310254,"line_start":550,"line_end":550,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310259,"byte_end":310262,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310267,"byte_end":310281,"line_start":552,"line_end":552,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310286,"byte_end":310289,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310294,"byte_end":310301,"line_start":554,"line_end":554,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310306,"byte_end":310333,"line_start":555,"line_end":555,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310338,"byte_end":310385,"line_start":556,"line_end":556,"column_start":5,"column_end":52}},{"value":"/ set.reserve(10);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310390,"byte_end":310410,"line_start":557,"line_end":557,"column_start":5,"column_end":25}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310415,"byte_end":310449,"line_start":558,"line_end":558,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310454,"byte_end":310461,"line_start":559,"line_end":559,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1753},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311237,"byte_end":311248,"line_start":582,"line_end":582,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashSet<T, S, A>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310611,"byte_end":310695,"line_start":565,"line_end":565,"column_start":5,"column_end":89}},{"value":"/ in the given `HashSet<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310700,"byte_end":310779,"line_start":566,"line_end":566,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310784,"byte_end":310811,"line_start":567,"line_end":567,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310816,"byte_end":310819,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310824,"byte_end":310836,"line_start":569,"line_end":569,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310841,"byte_end":310844,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310849,"byte_end":310929,"line_start":571,"line_end":571,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310934,"byte_end":310950,"line_start":572,"line_end":572,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310955,"byte_end":310958,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310963,"byte_end":310977,"line_start":574,"line_end":574,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310982,"byte_end":310985,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":310990,"byte_end":310997,"line_start":576,"line_end":576,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311002,"byte_end":311029,"line_start":577,"line_end":577,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311034,"byte_end":311081,"line_start":578,"line_end":578,"column_start":5,"column_end":52}},{"value":"/ set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311086,"byte_end":311164,"line_start":579,"line_end":579,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311169,"byte_end":311176,"line_start":580,"line_end":580,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311945,"byte_end":311958,"line_start":603,"line_end":603,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashSet<T, S, A>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set as much as possible. It will drop","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311364,"byte_end":311433,"line_start":586,"line_end":586,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311438,"byte_end":311503,"line_start":587,"line_end":587,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311508,"byte_end":311581,"line_start":588,"line_end":588,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311586,"byte_end":311589,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311594,"byte_end":311608,"line_start":590,"line_end":590,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311613,"byte_end":311616,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311621,"byte_end":311628,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311633,"byte_end":311660,"line_start":593,"line_end":593,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311665,"byte_end":311668,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311673,"byte_end":311719,"line_start":595,"line_end":595,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311724,"byte_end":311742,"line_start":596,"line_end":596,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311747,"byte_end":311765,"line_start":597,"line_end":597,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311770,"byte_end":311805,"line_start":598,"line_end":598,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to_fit();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311810,"byte_end":311834,"line_start":599,"line_end":599,"column_start":5,"column_end":29}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311839,"byte_end":311872,"line_start":600,"line_end":600,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":311877,"byte_end":311884,"line_start":601,"line_end":601,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1755},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312775,"byte_end":312784,"line_start":629,"line_end":629,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashSet<T, S, A>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set with a lower limit. It will drop","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312017,"byte_end":312085,"line_start":607,"line_end":607,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312090,"byte_end":312168,"line_start":608,"line_end":608,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312173,"byte_end":312246,"line_start":609,"line_end":609,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312251,"byte_end":312254,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312259,"byte_end":312322,"line_start":611,"line_end":611,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312327,"byte_end":312348,"line_start":612,"line_end":612,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312353,"byte_end":312356,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312361,"byte_end":312375,"line_start":614,"line_end":614,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312380,"byte_end":312383,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312388,"byte_end":312395,"line_start":616,"line_end":616,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312400,"byte_end":312427,"line_start":617,"line_end":617,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312432,"byte_end":312435,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312440,"byte_end":312486,"line_start":619,"line_end":619,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312491,"byte_end":312509,"line_start":620,"line_end":620,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312514,"byte_end":312532,"line_start":621,"line_end":621,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312537,"byte_end":312572,"line_start":622,"line_end":622,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to(10);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312577,"byte_end":312599,"line_start":623,"line_end":623,"column_start":5,"column_end":27}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312604,"byte_end":312638,"line_start":624,"line_end":624,"column_start":5,"column_end":39}},{"value":"/ set.shrink_to(0);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312643,"byte_end":312664,"line_start":625,"line_end":625,"column_start":5,"column_end":26}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312669,"byte_end":312702,"line_start":626,"line_end":626,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312707,"byte_end":312714,"line_start":627,"line_end":627,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1756},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313727,"byte_end":313737,"line_start":657,"line_end":657,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<T, S, A>>::difference","value":"pub fn difference<'a>(&'a Self, &'a Self) -> Difference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312872,"byte_end":312922,"line_start":633,"line_end":633,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312927,"byte_end":312986,"line_start":634,"line_end":634,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312991,"byte_end":312994,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":312999,"byte_end":313013,"line_start":636,"line_end":636,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313018,"byte_end":313021,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313026,"byte_end":313033,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313038,"byte_end":313065,"line_start":639,"line_end":639,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313070,"byte_end":313130,"line_start":640,"line_end":640,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313135,"byte_end":313198,"line_start":641,"line_end":641,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313203,"byte_end":313206,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313211,"byte_end":313241,"line_start":643,"line_end":643,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313246,"byte_end":313277,"line_start":644,"line_end":644,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313282,"byte_end":313319,"line_start":645,"line_end":645,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313324,"byte_end":313329,"line_start":646,"line_end":646,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313334,"byte_end":313337,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ let diff: HashSet<_> = a.difference(&b).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313342,"byte_end":313396,"line_start":648,"line_end":648,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [1].iter().collect());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313401,"byte_end":313444,"line_start":649,"line_end":649,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313449,"byte_end":313452,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313457,"byte_end":313502,"line_start":651,"line_end":651,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313507,"byte_end":313547,"line_start":652,"line_end":652,"column_start":5,"column_end":45}},{"value":"/ let diff: HashSet<_> = b.difference(&a).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313552,"byte_end":313606,"line_start":653,"line_end":653,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [4].iter().collect());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313611,"byte_end":313654,"line_start":654,"line_end":654,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313659,"byte_end":313666,"line_start":655,"line_end":655,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314689,"byte_end":314709,"line_start":686,"line_end":686,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<T, S, A>>::symmetric_difference","value":"pub fn symmetric_difference<'a>(&'a Self, &'a Self) -> SymmetricDifference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313890,"byte_end":313950,"line_start":664,"line_end":664,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":313955,"byte_end":314025,"line_start":665,"line_end":665,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314030,"byte_end":314033,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314038,"byte_end":314052,"line_start":667,"line_end":667,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314057,"byte_end":314060,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314065,"byte_end":314072,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314077,"byte_end":314104,"line_start":670,"line_end":670,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314109,"byte_end":314169,"line_start":671,"line_end":671,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314174,"byte_end":314237,"line_start":672,"line_end":672,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314242,"byte_end":314245,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in arbitrary order.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314250,"byte_end":314287,"line_start":674,"line_end":674,"column_start":5,"column_end":42}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314292,"byte_end":314333,"line_start":675,"line_end":675,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314338,"byte_end":314364,"line_start":676,"line_end":676,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314369,"byte_end":314374,"line_start":677,"line_end":677,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314379,"byte_end":314382,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ let diff1: HashSet<_> = a.symmetric_difference(&b).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314387,"byte_end":314452,"line_start":679,"line_end":679,"column_start":5,"column_end":70}},{"value":"/ let diff2: HashSet<_> = b.symmetric_difference(&a).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314457,"byte_end":314522,"line_start":680,"line_end":680,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314527,"byte_end":314530,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314535,"byte_end":314564,"line_start":682,"line_end":682,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314569,"byte_end":314616,"line_start":683,"line_end":683,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314621,"byte_end":314628,"line_start":684,"line_end":684,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315566,"byte_end":315578,"line_start":711,"line_end":711,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<T, S, A>>::intersection","value":"pub fn intersection<'a>(&'a Self, &'a Self) -> Intersection","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314902,"byte_end":314954,"line_start":692,"line_end":692,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":314959,"byte_end":315016,"line_start":693,"line_end":693,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315021,"byte_end":315024,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315029,"byte_end":315043,"line_start":695,"line_end":695,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315048,"byte_end":315051,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315056,"byte_end":315063,"line_start":697,"line_end":697,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315068,"byte_end":315095,"line_start":698,"line_end":698,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315100,"byte_end":315160,"line_start":699,"line_end":699,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315165,"byte_end":315228,"line_start":700,"line_end":700,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315233,"byte_end":315236,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in arbitrary order.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315241,"byte_end":315278,"line_start":702,"line_end":702,"column_start":5,"column_end":42}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315283,"byte_end":315316,"line_start":703,"line_end":703,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315321,"byte_end":315347,"line_start":704,"line_end":704,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315352,"byte_end":315357,"line_start":705,"line_end":705,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315362,"byte_end":315365,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ let intersection: HashSet<_> = a.intersection(&b).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315370,"byte_end":315434,"line_start":707,"line_end":707,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315439,"byte_end":315493,"line_start":708,"line_end":708,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315498,"byte_end":315505,"line_start":709,"line_end":709,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316539,"byte_end":316544,"line_start":742,"line_end":742,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<T, S, A>>::union","value":"pub fn union<'a>(&'a Self, &'a Self) -> Union","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315889,"byte_end":315934,"line_start":723,"line_end":723,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":315939,"byte_end":316005,"line_start":724,"line_end":724,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316010,"byte_end":316013,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316018,"byte_end":316032,"line_start":726,"line_end":726,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316037,"byte_end":316040,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316045,"byte_end":316052,"line_start":728,"line_end":728,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316057,"byte_end":316084,"line_start":729,"line_end":729,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316089,"byte_end":316149,"line_start":730,"line_end":730,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316154,"byte_end":316217,"line_start":731,"line_end":731,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316222,"byte_end":316225,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316230,"byte_end":316273,"line_start":733,"line_end":733,"column_start":5,"column_end":48}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316278,"byte_end":316304,"line_start":734,"line_end":734,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316309,"byte_end":316335,"line_start":735,"line_end":735,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316340,"byte_end":316345,"line_start":736,"line_end":736,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316350,"byte_end":316353,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ let union: HashSet<_> = a.union(&b).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316358,"byte_end":316408,"line_start":738,"line_end":738,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316413,"byte_end":316466,"line_start":739,"line_end":739,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":316471,"byte_end":316478,"line_start":740,"line_end":740,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1764},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317702,"byte_end":317710,"line_start":774,"line_end":774,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<T, S, A>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317022,"byte_end":317069,"line_start":755,"line_end":755,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317074,"byte_end":317077,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317082,"byte_end":317149,"line_start":757,"line_end":757,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317154,"byte_end":317221,"line_start":758,"line_end":758,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317226,"byte_end":317245,"line_start":759,"line_end":759,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317250,"byte_end":317253,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317258,"byte_end":317272,"line_start":761,"line_end":761,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317277,"byte_end":317280,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317285,"byte_end":317292,"line_start":763,"line_end":763,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317297,"byte_end":317324,"line_start":764,"line_end":764,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317329,"byte_end":317332,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317337,"byte_end":317399,"line_start":766,"line_end":766,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317404,"byte_end":317443,"line_start":767,"line_end":767,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317448,"byte_end":317488,"line_start":768,"line_end":768,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317493,"byte_end":317500,"line_start":769,"line_end":769,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317505,"byte_end":317508,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317513,"byte_end":317572,"line_start":771,"line_end":771,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317577,"byte_end":317641,"line_start":772,"line_end":772,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318572,"byte_end":318575,"line_start":801,"line_end":801,"column_start":12,"column_end":15},"name":"get","qualname":"<HashSet<T, S, A>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317856,"byte_end":317946,"line_start":782,"line_end":782,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317951,"byte_end":317954,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":317959,"byte_end":318026,"line_start":784,"line_end":784,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318031,"byte_end":318098,"line_start":785,"line_end":785,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318103,"byte_end":318122,"line_start":786,"line_end":786,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318127,"byte_end":318130,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318135,"byte_end":318149,"line_start":788,"line_end":788,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318154,"byte_end":318157,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318162,"byte_end":318169,"line_start":790,"line_end":790,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318174,"byte_end":318201,"line_start":791,"line_end":791,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318206,"byte_end":318209,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318214,"byte_end":318276,"line_start":793,"line_end":793,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318281,"byte_end":318319,"line_start":794,"line_end":794,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318324,"byte_end":318358,"line_start":795,"line_end":795,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318363,"byte_end":318370,"line_start":796,"line_end":796,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318375,"byte_end":318378,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318383,"byte_end":318442,"line_start":798,"line_end":798,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318447,"byte_end":318511,"line_start":799,"line_end":799,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1768},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319404,"byte_end":319417,"line_start":828,"line_end":828,"column_start":12,"column_end":25},"name":"get_or_insert","qualname":"<HashSet<T, S, A>>::get_or_insert","value":"pub fn get_or_insert(&mut Self, T) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given `value` into the set if it is not present, then\n returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts the given `value` into the set if it is not present, then","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318867,"byte_end":318936,"line_start":813,"line_end":813,"column_start":5,"column_end":74}},{"value":"/ returns a reference to the value in the set.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318941,"byte_end":318989,"line_start":814,"line_end":814,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":318994,"byte_end":318997,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319002,"byte_end":319016,"line_start":816,"line_end":816,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319021,"byte_end":319024,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319029,"byte_end":319036,"line_start":818,"line_end":818,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319041,"byte_end":319068,"line_start":819,"line_end":819,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319073,"byte_end":319076,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319081,"byte_end":319147,"line_start":821,"line_end":821,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319152,"byte_end":319181,"line_start":822,"line_end":822,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(set.get_or_insert(2), &2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319186,"byte_end":319227,"line_start":823,"line_end":823,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(set.get_or_insert(100), &100);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319232,"byte_end":319277,"line_start":824,"line_end":824,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.len(), 4); // 100 was inserted","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319282,"byte_end":319331,"line_start":825,"line_end":825,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319336,"byte_end":319343,"line_start":826,"line_end":826,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320408,"byte_end":320427,"line_start":857,"line_end":857,"column_start":12,"column_end":31},"name":"get_or_insert_owned","qualname":"<HashSet<T, S, A>>::get_or_insert_owned","value":"pub fn get_or_insert_owned<Q: ?Sized>(&mut Self, &Q) -> &T where T: Borrow<Q>,\nQ: Hash + Eq + ToOwned<Owned = T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts an owned copy of the given `value` into the set if it is not\n present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts an owned copy of the given `value` into the set if it is not","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319772,"byte_end":319844,"line_start":838,"line_end":838,"column_start":5,"column_end":77}},{"value":"/ present, then returns a reference to the value in the set.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319849,"byte_end":319911,"line_start":839,"line_end":839,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319916,"byte_end":319919,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319924,"byte_end":319938,"line_start":841,"line_end":841,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319943,"byte_end":319946,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319951,"byte_end":319958,"line_start":843,"line_end":843,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319963,"byte_end":319990,"line_start":844,"line_end":844,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":319995,"byte_end":319998,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320003,"byte_end":320061,"line_start":846,"line_end":846,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320066,"byte_end":320119,"line_start":847,"line_end":847,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320124,"byte_end":320127,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320132,"byte_end":320161,"line_start":849,"line_end":849,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320166,"byte_end":320207,"line_start":850,"line_end":850,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_owned(pet);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320212,"byte_end":320261,"line_start":851,"line_end":851,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320266,"byte_end":320297,"line_start":852,"line_end":852,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320302,"byte_end":320307,"line_start":853,"line_end":853,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320312,"byte_end":320370,"line_start":854,"line_end":854,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320375,"byte_end":320382,"line_start":855,"line_end":855,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320387,"byte_end":320396,"line_start":856,"line_end":856,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321584,"byte_end":321602,"line_start":890,"line_end":890,"column_start":12,"column_end":30},"name":"get_or_insert_with","qualname":"<HashSet<T, S, A>>::get_or_insert_with","value":"pub fn get_or_insert_with<Q: ?Sized, F>(&mut Self, &Q, F) -> &T where\nT: Borrow<Q>, Q: Hash + Eq, F: FnOnce(&Q) -> T","parent":null,"children":[],"decl_id":null,"docs":" Inserts a value computed from `f` into the set if the given `value` is\n not present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts a value computed from `f` into the set if the given `value` is","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320893,"byte_end":320967,"line_start":871,"line_end":871,"column_start":5,"column_end":79}},{"value":"/ not present, then returns a reference to the value in the set.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":320972,"byte_end":321038,"line_start":872,"line_end":872,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321043,"byte_end":321046,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321051,"byte_end":321065,"line_start":874,"line_end":874,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321070,"byte_end":321073,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321078,"byte_end":321085,"line_start":876,"line_end":876,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321090,"byte_end":321117,"line_start":877,"line_end":877,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321122,"byte_end":321125,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321130,"byte_end":321188,"line_start":879,"line_end":879,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321193,"byte_end":321246,"line_start":880,"line_end":880,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321251,"byte_end":321254,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321259,"byte_end":321288,"line_start":882,"line_end":882,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321293,"byte_end":321334,"line_start":883,"line_end":883,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_with(pet, str::to_owned);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321339,"byte_end":321402,"line_start":884,"line_end":884,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321407,"byte_end":321438,"line_start":885,"line_end":885,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321443,"byte_end":321448,"line_start":886,"line_end":886,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321453,"byte_end":321511,"line_start":887,"line_end":887,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":321516,"byte_end":321523,"line_start":888,"line_end":888,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322608,"byte_end":322619,"line_start":922,"line_end":922,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<HashSet<T, S, A>>::is_disjoint","value":"pub fn is_disjoint(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322076,"byte_end":322144,"line_start":905,"line_end":905,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322149,"byte_end":322210,"line_start":906,"line_end":906,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322215,"byte_end":322218,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322223,"byte_end":322237,"line_start":908,"line_end":908,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322242,"byte_end":322245,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322250,"byte_end":322257,"line_start":910,"line_end":910,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322262,"byte_end":322289,"line_start":911,"line_end":911,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322294,"byte_end":322297,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322302,"byte_end":322362,"line_start":913,"line_end":913,"column_start":5,"column_end":65}},{"value":"/ let mut b = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322367,"byte_end":322398,"line_start":914,"line_end":914,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322403,"byte_end":322406,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322411,"byte_end":322451,"line_start":916,"line_end":916,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322456,"byte_end":322472,"line_start":917,"line_end":917,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322477,"byte_end":322517,"line_start":918,"line_end":918,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322522,"byte_end":322538,"line_start":919,"line_end":919,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322543,"byte_end":322584,"line_start":920,"line_end":920,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322589,"byte_end":322596,"line_start":921,"line_end":921,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323241,"byte_end":323250,"line_start":943,"line_end":943,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<T, S, A>>::is_subset","value":"pub fn is_subset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322710,"byte_end":322763,"line_start":926,"line_end":926,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322768,"byte_end":322829,"line_start":927,"line_end":927,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322834,"byte_end":322837,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322842,"byte_end":322856,"line_start":929,"line_end":929,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322861,"byte_end":322864,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322869,"byte_end":322876,"line_start":931,"line_end":931,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322881,"byte_end":322908,"line_start":932,"line_end":932,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322913,"byte_end":322916,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322921,"byte_end":322983,"line_start":934,"line_end":934,"column_start":5,"column_end":67}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":322988,"byte_end":323021,"line_start":935,"line_end":935,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323026,"byte_end":323029,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323034,"byte_end":323076,"line_start":937,"line_end":937,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323081,"byte_end":323099,"line_start":938,"line_end":938,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323104,"byte_end":323146,"line_start":939,"line_end":939,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323151,"byte_end":323169,"line_start":940,"line_end":940,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323174,"byte_end":323217,"line_start":941,"line_end":941,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323222,"byte_end":323229,"line_start":942,"line_end":942,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1780},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323994,"byte_end":324005,"line_start":968,"line_end":968,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<HashSet<T, S, A>>::is_superset","value":"pub fn is_superset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323369,"byte_end":323424,"line_start":947,"line_end":947,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323429,"byte_end":323490,"line_start":948,"line_end":948,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323495,"byte_end":323498,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323503,"byte_end":323517,"line_start":950,"line_end":950,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323522,"byte_end":323525,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323530,"byte_end":323537,"line_start":952,"line_end":952,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323542,"byte_end":323569,"line_start":953,"line_end":953,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323574,"byte_end":323577,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ let sub: HashSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323582,"byte_end":323641,"line_start":955,"line_end":955,"column_start":5,"column_end":64}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323646,"byte_end":323679,"line_start":956,"line_end":956,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323684,"byte_end":323687,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323692,"byte_end":323737,"line_start":958,"line_end":958,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323742,"byte_end":323745,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323750,"byte_end":323768,"line_start":960,"line_end":960,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323773,"byte_end":323791,"line_start":961,"line_end":961,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323796,"byte_end":323841,"line_start":962,"line_end":962,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323846,"byte_end":323849,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323854,"byte_end":323872,"line_start":964,"line_end":964,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323877,"byte_end":323921,"line_start":965,"line_end":965,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":323926,"byte_end":323933,"line_start":966,"line_end":966,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324586,"byte_end":324592,"line_start":990,"line_end":990,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<T, S, A>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324078,"byte_end":324106,"line_start":972,"line_end":972,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324111,"byte_end":324114,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324119,"byte_end":324186,"line_start":974,"line_end":974,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324191,"byte_end":324194,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324199,"byte_end":324263,"line_start":976,"line_end":976,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324268,"byte_end":324271,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324276,"byte_end":324290,"line_start":978,"line_end":978,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324295,"byte_end":324298,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324303,"byte_end":324310,"line_start":980,"line_end":980,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324315,"byte_end":324342,"line_start":981,"line_end":981,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324347,"byte_end":324350,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324355,"byte_end":324388,"line_start":983,"line_end":983,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324393,"byte_end":324396,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324401,"byte_end":324437,"line_start":985,"line_end":985,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324442,"byte_end":324479,"line_start":986,"line_end":986,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324484,"byte_end":324513,"line_start":987,"line_end":987,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324518,"byte_end":324525,"line_start":988,"line_end":988,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325632,"byte_end":325655,"line_start":1014,"line_end":1014,"column_start":12,"column_end":35},"name":"insert_unique_unchecked","qualname":"<HashSet<T, S, A>>::insert_unique_unchecked","value":"pub fn insert_unique_unchecked(&mut Self, T) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Insert a value the set without checking if the value already exists in the set.","sig":null,"attributes":[{"value":"/ Insert a value the set without checking if the value already exists in the set.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324680,"byte_end":324763,"line_start":994,"line_end":994,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324768,"byte_end":324771,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ Returns a reference to the value just inserted.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324776,"byte_end":324827,"line_start":996,"line_end":996,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324832,"byte_end":324835,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ This operation is safe if a value does not exist in the set.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324840,"byte_end":324904,"line_start":998,"line_end":998,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324909,"byte_end":324912,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ However, if a value exists in the set already, the behavior is unspecified:","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":324917,"byte_end":324996,"line_start":1000,"line_end":1000,"column_start":5,"column_end":84}},{"value":"/ this operation may panic, loop forever, or any following operation with the set","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325001,"byte_end":325084,"line_start":1001,"line_end":1001,"column_start":5,"column_end":88}},{"value":"/ may panic, loop forever or return arbitrary result.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325089,"byte_end":325144,"line_start":1002,"line_end":1002,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325149,"byte_end":325152,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ That said, this operation (and following operations) are guaranteed to","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325157,"byte_end":325231,"line_start":1004,"line_end":1004,"column_start":5,"column_end":79}},{"value":"/ not violate memory safety.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325236,"byte_end":325266,"line_start":1005,"line_end":1005,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325271,"byte_end":325274,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ This operation is faster than regular insert, because it does not perform","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325279,"byte_end":325356,"line_start":1007,"line_end":1007,"column_start":5,"column_end":82}},{"value":"/ lookup before insertion.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325361,"byte_end":325389,"line_start":1008,"line_end":1008,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325394,"byte_end":325397,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ This operation is useful during initial population of the set.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325402,"byte_end":325468,"line_start":1010,"line_end":1010,"column_start":5,"column_end":71}},{"value":"/ For example, when constructing a set from another set, we know","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325473,"byte_end":325539,"line_start":1011,"line_end":1011,"column_start":5,"column_end":71}},{"value":"/ that values are unique.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325544,"byte_end":325571,"line_start":1012,"line_end":1012,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326297,"byte_end":326304,"line_start":1034,"line_end":1034,"column_start":12,"column_end":19},"name":"replace","qualname":"<HashSet<T, S, A>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325750,"byte_end":325843,"line_start":1018,"line_end":1018,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325848,"byte_end":325884,"line_start":1019,"line_end":1019,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325889,"byte_end":325892,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325897,"byte_end":325911,"line_start":1021,"line_end":1021,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325916,"byte_end":325919,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325924,"byte_end":325931,"line_start":1023,"line_end":1023,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325936,"byte_end":325963,"line_start":1024,"line_end":1024,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325968,"byte_end":325971,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":325976,"byte_end":326009,"line_start":1026,"line_end":1026,"column_start":5,"column_end":38}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326014,"byte_end":326048,"line_start":1027,"line_end":1027,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326053,"byte_end":326056,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326061,"byte_end":326117,"line_start":1029,"line_end":1029,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326122,"byte_end":326162,"line_start":1030,"line_end":1030,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326167,"byte_end":326224,"line_start":1031,"line_end":1031,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326229,"byte_end":326236,"line_start":1032,"line_end":1032,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327312,"byte_end":327318,"line_start":1066,"line_end":1066,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<T, S, A>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns whether the value was","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326590,"byte_end":326653,"line_start":1044,"line_end":1044,"column_start":5,"column_end":68}},{"value":"/ present in the set.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326658,"byte_end":326681,"line_start":1045,"line_end":1045,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326686,"byte_end":326689,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326694,"byte_end":326761,"line_start":1047,"line_end":1047,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326766,"byte_end":326833,"line_start":1048,"line_end":1048,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326838,"byte_end":326857,"line_start":1049,"line_end":1049,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326862,"byte_end":326865,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326870,"byte_end":326884,"line_start":1051,"line_end":1051,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326889,"byte_end":326892,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326897,"byte_end":326904,"line_start":1053,"line_end":1053,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326909,"byte_end":326936,"line_start":1054,"line_end":1054,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326941,"byte_end":326944,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326949,"byte_end":326982,"line_start":1056,"line_end":1056,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326987,"byte_end":326990,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":326995,"byte_end":327013,"line_start":1058,"line_end":1058,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327018,"byte_end":327055,"line_start":1059,"line_end":1059,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327060,"byte_end":327098,"line_start":1060,"line_end":1060,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327103,"byte_end":327110,"line_start":1061,"line_end":1061,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327115,"byte_end":327118,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327123,"byte_end":327182,"line_start":1063,"line_end":1063,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327187,"byte_end":327251,"line_start":1064,"line_end":1064,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1786},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":328188,"byte_end":328192,"line_start":1093,"line_end":1093,"column_start":12,"column_end":16},"name":"take","qualname":"<HashSet<T, S, A>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where T: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327472,"byte_end":327557,"line_start":1074,"line_end":1074,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327562,"byte_end":327565,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327570,"byte_end":327637,"line_start":1076,"line_end":1076,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327642,"byte_end":327709,"line_start":1077,"line_end":1077,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327714,"byte_end":327733,"line_start":1078,"line_end":1078,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327738,"byte_end":327741,"line_start":1079,"line_end":1079,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327746,"byte_end":327760,"line_start":1080,"line_end":1080,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327765,"byte_end":327768,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327773,"byte_end":327780,"line_start":1082,"line_end":1082,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327785,"byte_end":327812,"line_start":1083,"line_end":1083,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327817,"byte_end":327820,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327825,"byte_end":327891,"line_start":1085,"line_end":1085,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327896,"byte_end":327934,"line_start":1086,"line_end":1086,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327939,"byte_end":327974,"line_start":1087,"line_end":1087,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327979,"byte_end":327986,"line_start":1088,"line_end":1088,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327991,"byte_end":327994,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":327999,"byte_end":328058,"line_start":1090,"line_end":1090,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":328063,"byte_end":328127,"line_start":1091,"line_end":1091,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1855},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335335,"byte_end":335339,"line_start":1382,"line_end":1382,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1858}],"decl_id":null,"docs":" An iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `HashSet`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335082,"byte_end":335128,"line_start":1375,"line_end":1375,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335129,"byte_end":335132,"line_start":1376,"line_end":1376,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashSet`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335133,"byte_end":335200,"line_start":1377,"line_end":1377,"column_start":1,"column_end":68}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335201,"byte_end":335236,"line_start":1378,"line_end":1378,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335237,"byte_end":335240,"line_start":1379,"line_end":1379,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335241,"byte_end":335277,"line_start":1380,"line_end":1380,"column_start":1,"column_end":37}},{"value":"/ [`iter`]: struct.HashSet.html#method.iter","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335278,"byte_end":335323,"line_start":1381,"line_end":1381,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1859},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335693,"byte_end":335701,"line_start":1393,"line_end":1393,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1862}],"decl_id":null,"docs":" An owning iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `HashSet`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335379,"byte_end":335432,"line_start":1386,"line_end":1386,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335433,"byte_end":335436,"line_start":1387,"line_end":1387,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashSet`]","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335437,"byte_end":335508,"line_start":1388,"line_end":1388,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335509,"byte_end":335584,"line_start":1389,"line_end":1389,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335585,"byte_end":335588,"line_start":1390,"line_end":1390,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335589,"byte_end":335625,"line_start":1391,"line_end":1391,"column_start":1,"column_end":37}},{"value":"/ [`into_iter`]: struct.HashSet.html#method.into_iter","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335626,"byte_end":335681,"line_start":1392,"line_end":1392,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1863},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336040,"byte_end":336045,"line_start":1404,"line_end":1404,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1867}],"decl_id":null,"docs":" A draining iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `HashSet`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335776,"byte_end":335830,"line_start":1397,"line_end":1397,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335831,"byte_end":335834,"line_start":1398,"line_end":1398,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashSet`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335835,"byte_end":335903,"line_start":1399,"line_end":1399,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335904,"byte_end":335939,"line_start":1400,"line_end":1400,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335940,"byte_end":335943,"line_start":1401,"line_end":1401,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335944,"byte_end":335980,"line_start":1402,"line_end":1402,"column_start":1,"column_end":37}},{"value":"/ [`drain`]: struct.HashSet.html#method.drain","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":335981,"byte_end":336028,"line_start":1403,"line_end":1403,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1868},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336446,"byte_end":336457,"line_start":1415,"line_end":1415,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::set::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":1873},{"krate":0,"index":1874}],"decl_id":null,"docs":" A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336125,"byte_end":336215,"line_start":1408,"line_end":1408,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336216,"byte_end":336219,"line_start":1409,"line_end":1409,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashSet`]. See its","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336220,"byte_end":336303,"line_start":1410,"line_end":1410,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336304,"byte_end":336331,"line_start":1411,"line_end":1411,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336332,"byte_end":336335,"line_start":1412,"line_end":1412,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashSet.html#method.drain_filter","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336336,"byte_end":336397,"line_start":1413,"line_end":1413,"column_start":1,"column_end":62}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336398,"byte_end":336434,"line_start":1414,"line_end":1414,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1875},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336893,"byte_end":336905,"line_start":1430,"line_end":1430,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1880},{"krate":0,"index":1881}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `HashSet`s.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336589,"byte_end":336662,"line_start":1423,"line_end":1423,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336663,"byte_end":336666,"line_start":1424,"line_end":1424,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`HashSet`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336667,"byte_end":336742,"line_start":1425,"line_end":1425,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336743,"byte_end":336778,"line_start":1426,"line_end":1426,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336779,"byte_end":336782,"line_start":1427,"line_end":1427,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336783,"byte_end":336819,"line_start":1428,"line_end":1428,"column_start":1,"column_end":37}},{"value":"/ [`intersection`]: struct.HashSet.html#method.intersection","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":336820,"byte_end":336881,"line_start":1429,"line_end":1429,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1882},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337359,"byte_end":337369,"line_start":1444,"line_end":1444,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1887},{"krate":0,"index":1888}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `HashSet`s.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337063,"byte_end":337134,"line_start":1437,"line_end":1437,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337135,"byte_end":337138,"line_start":1438,"line_end":1438,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`HashSet`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337139,"byte_end":337212,"line_start":1439,"line_end":1439,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337213,"byte_end":337248,"line_start":1440,"line_end":1440,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337249,"byte_end":337252,"line_start":1441,"line_end":1441,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337253,"byte_end":337289,"line_start":1442,"line_end":1442,"column_start":1,"column_end":37}},{"value":"/ [`difference`]: struct.HashSet.html#method.difference","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337290,"byte_end":337347,"line_start":1443,"line_end":1443,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1889},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337863,"byte_end":337882,"line_start":1458,"line_end":1458,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1894}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `HashSet`s.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337527,"byte_end":337608,"line_start":1451,"line_end":1451,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337609,"byte_end":337612,"line_start":1452,"line_end":1452,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337613,"byte_end":337683,"line_start":1453,"line_end":1453,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`]. See its documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337684,"byte_end":337732,"line_start":1454,"line_end":1454,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337733,"byte_end":337736,"line_start":1455,"line_end":1455,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337737,"byte_end":337773,"line_start":1456,"line_end":1456,"column_start":1,"column_end":37}},{"value":"/ [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337774,"byte_end":337851,"line_start":1457,"line_end":1457,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1895},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":338272,"byte_end":338277,"line_start":1469,"line_end":1469,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1900}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `HashSet`s.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":337996,"byte_end":338062,"line_start":1462,"line_end":1462,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":338063,"byte_end":338066,"line_start":1463,"line_end":1463,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`HashSet`].","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":338067,"byte_end":338135,"line_start":1464,"line_end":1464,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":338136,"byte_end":338171,"line_start":1465,"line_end":1465,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":338172,"byte_end":338175,"line_start":1466,"line_end":1466,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":338176,"byte_end":338212,"line_start":1467,"line_end":1467,"column_start":1,"column_end":37}},{"value":"/ [`union`]: struct.HashSet.html#method.union","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":338213,"byte_end":338260,"line_start":1468,"line_end":1468,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":2104},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":2251,"byte_end":2259,"line_start":85,"line_end":85,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::hash_map","value":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2105}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.\n","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":2266,"byte_end":2332,"line_start":86,"line_end":86,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":2106},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":2806,"byte_end":2814,"line_start":102,"line_end":102,"column_start":9,"column_end":17},"name":"hash_set","qualname":"::hash_set","value":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2107}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.\n","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":2821,"byte_end":2887,"line_start":103,"line_end":103,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2190},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":3566,"byte_end":3582,"line_start":125,"line_end":125,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::TryReserveError::CapacityOverflow","value":"TryReserveError::CapacityOverflow","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":3450,"byte_end":3523,"line_start":123,"line_end":123,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":3528,"byte_end":3561,"line_start":124,"line_end":124,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":2192},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":3636,"byte_end":3646,"line_start":128,"line_end":128,"column_start":5,"column_end":15},"name":"AllocError","qualname":"::TryReserveError::AllocError","value":"TryReserveError::AllocError { layout }","parent":{"krate":0,"index":2189},"children":[],"decl_id":null,"docs":" The memory allocator returned an error\n","sig":null,"attributes":[{"value":"/ The memory allocator returned an error","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":3589,"byte_end":3631,"line_start":127,"line_end":127,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":2189},"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":3428,"byte_end":3443,"line_start":122,"line_end":122,"column_start":10,"column_end":25},"name":"TryReserveError","qualname":"::TryReserveError","value":"pub enum TryReserveError {\n    CapacityOverflow,\n    AllocError {\n            layout: alloc::alloc::Layout,\n        },\n}","parent":null,"children":[{"krate":0,"index":2190},{"krate":0,"index":2192}],"decl_id":null,"docs":" The error type for `try_reserve` methods.\n","sig":null,"attributes":[{"value":"/ The error type for `try_reserve` methods.","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/lib.rs","byte_start":3334,"byte_end":3379,"line_start":120,"line_end":120,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/generic.rs","byte_start":8858404,"byte_end":8858409,"line_start":47,"line_end":47,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2145},{"krate":0,"index":2146},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/alloc.rs","byte_start":94830,"byte_end":94836,"line_start":44,"line_end":44,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/alloc.rs","byte_start":95170,"byte_end":95176,"line_start":54,"line_end":54,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/bitmask.rs","byte_start":96552,"byte_end":96559,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/bitmask.rs","byte_start":99173,"byte_end":99180,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/bitmask.rs","byte_start":99467,"byte_end":99478,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":8820,"byte_end":8831,"line_start":90,"line_end":90,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":11525,"byte_end":11533,"line_start":169,"line_end":169,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":14026,"byte_end":14037,"line_start":237,"line_end":237,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":15942,"byte_end":15948,"line_start":289,"line_end":289,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":15974,"byte_end":15980,"line_start":291,"line_end":291,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":16078,"byte_end":16084,"line_start":298,"line_end":298,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":18876,"byte_end":18884,"line_start":393,"line_end":393,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19970,"byte_end":19978,"line_start":421,"line_end":421,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":257},{"krate":0,"index":262},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":42489,"byte_end":42497,"line_start":1034,"line_end":1034,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":42586,"byte_end":42594,"line_start":1040,"line_end":1040,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":42646,"byte_end":42659,"line_start":1047,"line_end":1047,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":43045,"byte_end":43058,"line_start":1061,"line_end":1061,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":63701,"byte_end":63709,"line_start":1605,"line_end":1605,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":66347,"byte_end":66355,"line_start":1674,"line_end":1674,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2187}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":67253,"byte_end":67261,"line_start":1699,"line_end":1699,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":70809,"byte_end":70817,"line_start":1788,"line_end":1788,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":71342,"byte_end":71350,"line_start":1808,"line_end":1808,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":71655,"byte_end":71663,"line_start":1820,"line_end":1820,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":72514,"byte_end":72526,"line_start":1851,"line_end":1851,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":75349,"byte_end":75361,"line_start":1920,"line_end":1920,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":75392,"byte_end":75404,"line_start":1921,"line_end":1921,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":75430,"byte_end":75442,"line_start":1923,"line_end":1923,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":75732,"byte_end":75744,"line_start":1935,"line_end":1935,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77356,"byte_end":77368,"line_start":1977,"line_end":1977,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78263,"byte_end":78270,"line_start":1996,"line_end":1996,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":84397,"byte_end":84404,"line_start":2122,"line_end":2122,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":84612,"byte_end":84619,"line_start":2132,"line_end":2132,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85269,"byte_end":85276,"line_start":2155,"line_end":2155,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85309,"byte_end":85316,"line_start":2156,"line_end":2156,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85585,"byte_end":85596,"line_start":2166,"line_end":2166,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85774,"byte_end":85785,"line_start":2173,"line_end":2173,"column_start":47,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85874,"byte_end":85885,"line_start":2179,"line_end":2179,"column_start":47,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":86456,"byte_end":86467,"line_start":2202,"line_end":2202,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":86867,"byte_end":86878,"line_start":2217,"line_end":2217,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":87208,"byte_end":87219,"line_start":2231,"line_end":2231,"column_start":53,"column_end":64},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":87277,"byte_end":87288,"line_start":2232,"line_end":2232,"column_start":49,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":87893,"byte_end":87901,"line_start":2249,"line_end":2249,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":88082,"byte_end":88090,"line_start":2256,"line_end":2256,"column_start":46,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":88182,"byte_end":88190,"line_start":2262,"line_end":2262,"column_start":46,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":88277,"byte_end":88285,"line_start":2269,"line_end":2269,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":88890,"byte_end":88898,"line_start":2288,"line_end":2288,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":89281,"byte_end":89289,"line_start":2305,"line_end":2305,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":89351,"byte_end":89359,"line_start":2306,"line_end":2306,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":90155,"byte_end":90166,"line_start":2333,"line_end":2333,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":90482,"byte_end":90498,"line_start":2343,"line_end":2343,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":91114,"byte_end":91125,"line_start":2364,"line_end":2364,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":91443,"byte_end":91459,"line_start":2377,"line_end":2377,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106783,"byte_end":106790,"line_start":193,"line_end":193,"column_start":68,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111454,"byte_end":111461,"line_start":347,"line_end":347,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113969,"byte_end":113976,"line_start":416,"line_end":416,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126265,"byte_end":126272,"line_start":849,"line_end":849,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":664},{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":679},{"krate":0,"index":686},{"krate":0,"index":693},{"krate":0,"index":700},{"krate":0,"index":706},{"krate":0,"index":712},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151987,"byte_end":151994,"line_start":1643,"line_end":1643,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154939,"byte_end":154946,"line_start":1701,"line_end":1701,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":155299,"byte_end":155306,"line_start":1718,"line_end":1718,"column_start":25,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":155432,"byte_end":155439,"line_start":1727,"line_end":1727,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":155667,"byte_end":155674,"line_start":1738,"line_end":1738,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":156046,"byte_end":156053,"line_start":1750,"line_end":1750,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157494,"byte_end":157498,"line_start":1804,"line_end":1804,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157736,"byte_end":157740,"line_start":1814,"line_end":1814,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158518,"byte_end":158525,"line_start":1836,"line_end":1836,"column_start":40,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158551,"byte_end":158558,"line_start":1838,"line_end":1838,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159278,"byte_end":159286,"line_start":1860,"line_end":1860,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159970,"byte_end":159978,"line_start":1882,"line_end":1882,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160271,"byte_end":160279,"line_start":1895,"line_end":1895,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160419,"byte_end":160427,"line_start":1902,"line_end":1902,"column_start":52,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160503,"byte_end":160511,"line_start":1904,"line_end":1904,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161107,"byte_end":161117,"line_start":1923,"line_end":1923,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161410,"byte_end":161420,"line_start":1936,"line_end":1936,"column_start":56,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161560,"byte_end":161570,"line_start":1943,"line_end":1943,"column_start":52,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161639,"byte_end":161649,"line_start":1945,"line_end":1945,"column_start":56,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162209,"byte_end":162213,"line_start":1965,"line_end":1965,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162411,"byte_end":162415,"line_start":1974,"line_end":1974,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162939,"byte_end":162945,"line_start":1992,"line_end":1992,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163145,"byte_end":163151,"line_start":2001,"line_end":2001,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163677,"byte_end":163682,"line_start":2018,"line_end":2018,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":164473,"byte_end":164484,"line_start":2044,"line_end":2044,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":164907,"byte_end":164923,"line_start":2061,"line_end":2061,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":165077,"byte_end":165088,"line_start":2068,"line_end":2068,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":165488,"byte_end":165499,"line_start":2086,"line_end":2086,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":165793,"byte_end":165809,"line_start":2094,"line_end":2094,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168005,"byte_end":168024,"line_start":2160,"line_end":2160,"column_start":34,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168156,"byte_end":168175,"line_start":2168,"line_end":2168,"column_start":34,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168924,"byte_end":168942,"line_start":2195,"line_end":2195,"column_start":41,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1007},{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":169756,"byte_end":169774,"line_start":2221,"line_end":2221,"column_start":41,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":170815,"byte_end":170830,"line_start":2251,"line_end":2251,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172267,"byte_end":172278,"line_start":2298,"line_end":2298,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1049},{"krate":0,"index":1051}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":178151,"byte_end":178170,"line_start":2492,"line_end":2492,"column_start":41,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":182220,"byte_end":182237,"line_start":2610,"line_end":2610,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1087}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":184283,"byte_end":184301,"line_start":2678,"line_end":2678,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":184503,"byte_end":184514,"line_start":2684,"line_end":2684,"column_start":61,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":184873,"byte_end":184892,"line_start":2693,"line_end":2693,"column_start":61,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1105}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185175,"byte_end":185192,"line_start":2702,"line_end":2702,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1111}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185382,"byte_end":185397,"line_start":2708,"line_end":2708,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1117}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186061,"byte_end":186066,"line_start":2731,"line_end":2731,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186678,"byte_end":186691,"line_start":2751,"line_end":2751,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186823,"byte_end":186836,"line_start":2759,"line_end":2759,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186996,"byte_end":187009,"line_start":2768,"line_end":2768,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187552,"byte_end":187563,"line_start":2787,"line_end":2787,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":188317,"byte_end":188325,"line_start":2811,"line_end":2811,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":188720,"byte_end":188728,"line_start":2826,"line_end":2826,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":188995,"byte_end":189003,"line_start":2838,"line_end":2838,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":189571,"byte_end":189587,"line_start":2858,"line_end":2858,"column_start":45,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":189759,"byte_end":189775,"line_start":2867,"line_end":2867,"column_start":45,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":189991,"byte_end":190007,"line_start":2878,"line_end":2878,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1252}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":190633,"byte_end":190647,"line_start":2899,"line_end":2899,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":191314,"byte_end":191327,"line_start":2916,"line_end":2916,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":191694,"byte_end":191707,"line_start":2927,"line_end":2927,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":192618,"byte_end":192625,"line_start":2960,"line_end":2960,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":193413,"byte_end":193417,"line_start":2989,"line_end":2989,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":193988,"byte_end":193992,"line_start":3008,"line_end":3008,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":194146,"byte_end":194150,"line_start":3015,"line_end":3015,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":194193,"byte_end":194200,"line_start":3017,"line_end":3017,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":194783,"byte_end":194790,"line_start":3036,"line_end":3036,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1342}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":194943,"byte_end":194950,"line_start":3042,"line_end":3042,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":194991,"byte_end":194998,"line_start":3044,"line_end":3044,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":195226,"byte_end":195234,"line_start":3054,"line_end":3054,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":195590,"byte_end":195598,"line_start":3066,"line_end":3066,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":195772,"byte_end":195780,"line_start":3072,"line_end":3072,"column_start":52,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":195856,"byte_end":195864,"line_start":3074,"line_end":3074,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1370}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":196029,"byte_end":196033,"line_start":3080,"line_end":3080,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":196505,"byte_end":196509,"line_start":3096,"line_end":3096,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1381}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":196662,"byte_end":196666,"line_start":3102,"line_end":3102,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":196709,"byte_end":196715,"line_start":3104,"line_end":3104,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":197187,"byte_end":197193,"line_start":3120,"line_end":3120,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":197346,"byte_end":197352,"line_start":3126,"line_end":3126,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":197395,"byte_end":197404,"line_start":3128,"line_end":3128,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":197884,"byte_end":197893,"line_start":3144,"line_end":3144,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1409}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198046,"byte_end":198055,"line_start":3150,"line_end":3150,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198103,"byte_end":198112,"line_start":3152,"line_end":3152,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198352,"byte_end":198357,"line_start":3160,"line_end":3160,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198717,"byte_end":198722,"line_start":3172,"line_end":3172,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1430}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198900,"byte_end":198905,"line_start":3178,"line_end":3178,"column_start":52,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198952,"byte_end":198957,"line_start":3180,"line_end":3180,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1439}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199208,"byte_end":199213,"line_start":3191,"line_end":3191,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1455}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206099,"byte_end":206104,"line_start":3425,"line_end":3425,"column_start":50,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1463}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206886,"byte_end":206899,"line_start":3452,"line_end":3452,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1479}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216423,"byte_end":216434,"line_start":3766,"line_end":3766,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":218727,"byte_end":218735,"line_start":3853,"line_end":3853,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1509}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225926,"byte_end":225934,"line_start":4091,"line_end":4091,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1519}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226758,"byte_end":226774,"line_start":4118,"line_end":4118,"column_start":56,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236633,"byte_end":236647,"line_start":4440,"line_end":4440,"column_start":56,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1548},{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1551}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":239218,"byte_end":239225,"line_start":4536,"line_end":4536,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1557}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":239869,"byte_end":239876,"line_start":4556,"line_end":4556,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1565}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":241355,"byte_end":241362,"line_start":4602,"line_end":4602,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/scopeguard.rs","byte_start":292901,"byte_end":292911,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/scopeguard.rs","byte_start":293064,"byte_end":293074,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1632}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/scopeguard.rs","byte_start":293218,"byte_end":293228,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":297512,"byte_end":297519,"line_start":119,"line_end":119,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1718},{"krate":0,"index":1719}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300081,"byte_end":300088,"line_start":211,"line_end":211,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1732},{"krate":0,"index":1734}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304638,"byte_end":304645,"line_start":385,"line_end":385,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1738},{"krate":0,"index":1739}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307097,"byte_end":307104,"line_start":453,"line_end":453,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1747}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309886,"byte_end":309893,"line_start":538,"line_end":538,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1772},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1786}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":328512,"byte_end":328519,"line_start":1106,"line_end":1106,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1792}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":328799,"byte_end":328806,"line_start":1121,"line_end":1121,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":328920,"byte_end":328927,"line_start":1129,"line_end":1129,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":329159,"byte_end":329166,"line_start":1139,"line_end":1139,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1807}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":329323,"byte_end":329330,"line_start":1148,"line_end":1148,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1812}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":330242,"byte_end":330249,"line_start":1183,"line_end":1183,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":330847,"byte_end":330854,"line_start":1207,"line_end":1207,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1826}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":331451,"byte_end":331458,"line_start":1231,"line_end":1231,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1832}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":338681,"byte_end":338688,"line_start":1483,"line_end":1483,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1913},{"krate":0,"index":1914},{"krate":0,"index":1915}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":339572,"byte_end":339576,"line_start":1515,"line_end":1515,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1918}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":339760,"byte_end":339764,"line_start":1523,"line_end":1523,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1924}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":340093,"byte_end":340097,"line_start":1535,"line_end":1535,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1928}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":340243,"byte_end":340247,"line_start":1541,"line_end":1541,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":340294,"byte_end":340298,"line_start":1543,"line_end":1543,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1933}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":340477,"byte_end":340485,"line_start":1549,"line_end":1549,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":340962,"byte_end":340970,"line_start":1565,"line_end":1565,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1943}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":341137,"byte_end":341145,"line_start":1571,"line_end":1571,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":341213,"byte_end":341221,"line_start":1573,"line_end":1573,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":341460,"byte_end":341465,"line_start":1580,"line_end":1580,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":341946,"byte_end":341951,"line_start":1596,"line_end":1596,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1961}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":342122,"byte_end":342127,"line_start":1602,"line_end":1602,"column_start":49,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":342199,"byte_end":342204,"line_start":1604,"line_end":1604,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1968}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":342450,"byte_end":342461,"line_start":1611,"line_end":1611,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1975}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":342797,"byte_end":342808,"line_start":1625,"line_end":1625,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1983}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":343250,"byte_end":343261,"line_start":1644,"line_end":1644,"column_start":52,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":343354,"byte_end":343366,"line_start":1649,"line_end":1649,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1992}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":343591,"byte_end":343603,"line_start":1659,"line_end":1659,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":2000}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":344173,"byte_end":344185,"line_start":1684,"line_end":1684,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2005}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":344442,"byte_end":344454,"line_start":1695,"line_end":1695,"column_start":33,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":344586,"byte_end":344596,"line_start":1703,"line_end":1703,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2014}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":344819,"byte_end":344829,"line_start":1713,"line_end":1713,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2022}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":345403,"byte_end":345413,"line_start":1738,"line_end":1738,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":345531,"byte_end":345541,"line_start":1746,"line_end":1746,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2031}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":345809,"byte_end":345828,"line_start":1757,"line_end":1757,"column_start":44,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2036}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":346040,"byte_end":346059,"line_start":1766,"line_end":1766,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2044}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":346463,"byte_end":346482,"line_start":1784,"line_end":1784,"column_start":33,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":346600,"byte_end":346619,"line_start":1792,"line_end":1792,"column_start":30,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2053}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":346887,"byte_end":346892,"line_start":1803,"line_end":1803,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2058}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":347091,"byte_end":347096,"line_start":1812,"line_end":1812,"column_start":33,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":347214,"byte_end":347219,"line_start":1820,"line_end":1820,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2067}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":347475,"byte_end":347480,"line_start":1831,"line_end":1831,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/generic.rs","byte_start":8858404,"byte_end":8858409,"line_start":47,"line_end":47,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/alloc.rs","byte_start":94830,"byte_end":94836,"line_start":44,"line_end":44,"column_start":31,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2162},"to":{"krate":0,"index":73}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/alloc.rs","byte_start":95170,"byte_end":95176,"line_start":54,"line_end":54,"column_start":22,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2162},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/bitmask.rs","byte_start":96552,"byte_end":96559,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/bitmask.rs","byte_start":99173,"byte_end":99180,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2167},"to":{"krate":1,"index":7722}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/bitmask.rs","byte_start":99467,"byte_end":99478,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":117},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":8820,"byte_end":8831,"line_start":90,"line_end":90,"column_start":6,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2173},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":11525,"byte_end":11533,"line_start":169,"line_end":169,"column_start":6,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":14026,"byte_end":14037,"line_start":237,"line_end":237,"column_start":6,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":15942,"byte_end":15948,"line_start":289,"line_end":289,"column_start":25,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":161},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":15974,"byte_end":15980,"line_start":291,"line_end":291,"column_start":19,"column_end":25},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":161},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":16078,"byte_end":16084,"line_start":298,"line_end":298,"column_start":9,"column_end":15},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":18876,"byte_end":18884,"line_start":393,"line_end":393,"column_start":9,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":19970,"byte_end":19978,"line_start":421,"line_end":421,"column_start":31,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":42489,"byte_end":42497,"line_start":1034,"line_end":1034,"column_start":47,"column_end":55},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":183},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":42586,"byte_end":42594,"line_start":1040,"line_end":1040,"column_start":47,"column_end":55},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":183},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":42646,"byte_end":42659,"line_start":1047,"line_end":1047,"column_start":9,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":43045,"byte_end":43058,"line_start":1061,"line_end":1061,"column_start":28,"column_end":41},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":63701,"byte_end":63709,"line_start":1605,"line_end":1605,"column_start":48,"column_end":56},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":183},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":66347,"byte_end":66355,"line_start":1674,"line_end":1674,"column_start":56,"column_end":64},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":183},"to":{"krate":0,"index":331}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":67253,"byte_end":67261,"line_start":1699,"line_end":1699,"column_start":38,"column_end":46},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":70809,"byte_end":70817,"line_start":1788,"line_end":1788,"column_start":53,"column_end":61},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":183},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":71342,"byte_end":71350,"line_start":1808,"line_end":1808,"column_start":40,"column_end":48},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":183},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":71655,"byte_end":71663,"line_start":1820,"line_end":1820,"column_start":48,"column_end":56},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":183},"to":{"krate":1,"index":7722}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":72514,"byte_end":72526,"line_start":1851,"line_end":1851,"column_start":9,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":75349,"byte_end":75361,"line_start":1920,"line_end":1920,"column_start":25,"column_end":37},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":360},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":75392,"byte_end":75404,"line_start":1921,"line_end":1921,"column_start":25,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":360},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":75430,"byte_end":75442,"line_start":1923,"line_end":1923,"column_start":19,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":360},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":75732,"byte_end":75744,"line_start":1935,"line_end":1935,"column_start":22,"column_end":34},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":360},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":77356,"byte_end":77368,"line_start":1977,"line_end":1977,"column_start":27,"column_end":39},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":360},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":78263,"byte_end":78270,"line_start":1996,"line_end":1996,"column_start":9,"column_end":16},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":84397,"byte_end":84404,"line_start":2122,"line_end":2122,"column_start":19,"column_end":26},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":84612,"byte_end":84619,"line_start":2132,"line_end":2132,"column_start":22,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85269,"byte_end":85276,"line_start":2155,"line_end":2155,"column_start":31,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85309,"byte_end":85316,"line_start":2156,"line_end":2156,"column_start":27,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85585,"byte_end":85596,"line_start":2166,"line_end":2166,"column_start":31,"column_end":42},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85774,"byte_end":85785,"line_start":2173,"line_end":2173,"column_start":47,"column_end":58},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":85874,"byte_end":85885,"line_start":2179,"line_end":2179,"column_start":47,"column_end":58},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":86456,"byte_end":86467,"line_start":2202,"line_end":2202,"column_start":40,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":86867,"byte_end":86878,"line_start":2217,"line_end":2217,"column_start":44,"column_end":55},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":87208,"byte_end":87219,"line_start":2231,"line_end":2231,"column_start":53,"column_end":64},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":87277,"byte_end":87288,"line_start":2232,"line_end":2232,"column_start":49,"column_end":60},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":87893,"byte_end":87901,"line_start":2249,"line_end":2249,"column_start":31,"column_end":39},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":88082,"byte_end":88090,"line_start":2256,"line_end":2256,"column_start":46,"column_end":54},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":88182,"byte_end":88190,"line_start":2262,"line_end":2262,"column_start":46,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":88277,"byte_end":88285,"line_start":2269,"line_end":2269,"column_start":40,"column_end":48},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":88890,"byte_end":88898,"line_start":2288,"line_end":2288,"column_start":44,"column_end":52},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":89281,"byte_end":89289,"line_start":2305,"line_end":2305,"column_start":53,"column_end":61},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":89351,"byte_end":89359,"line_start":2306,"line_end":2306,"column_start":49,"column_end":57},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":90155,"byte_end":90166,"line_start":2333,"line_end":2333,"column_start":35,"column_end":46},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":472},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":90482,"byte_end":90498,"line_start":2343,"line_end":2343,"column_start":32,"column_end":48},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":91114,"byte_end":91125,"line_start":2364,"line_end":2364,"column_start":48,"column_end":59},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":472},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/raw/mod.rs","byte_start":91443,"byte_end":91459,"line_start":2377,"line_end":2377,"column_start":45,"column_end":61},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":478},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":106783,"byte_end":106790,"line_start":193,"line_end":193,"column_start":68,"column_end":75},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":568},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":111454,"byte_end":111461,"line_start":347,"line_end":347,"column_start":15,"column_end":22},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":113969,"byte_end":113976,"line_start":416,"line_end":416,"column_start":37,"column_end":44},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":126265,"byte_end":126272,"line_start":849,"line_end":849,"column_start":18,"column_end":25},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":151987,"byte_end":151994,"line_start":1643,"line_end":1643,"column_start":37,"column_end":44},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":154939,"byte_end":154946,"line_start":1701,"line_end":1701,"column_start":32,"column_end":39},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":568},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":155299,"byte_end":155306,"line_start":1718,"line_end":1718,"column_start":25,"column_end":32},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":568},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":155432,"byte_end":155439,"line_start":1727,"line_end":1727,"column_start":28,"column_end":35},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":568},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":155667,"byte_end":155674,"line_start":1738,"line_end":1738,"column_start":30,"column_end":37},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":568},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":156046,"byte_end":156053,"line_start":1750,"line_end":1750,"column_start":43,"column_end":50},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":568},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157494,"byte_end":157498,"line_start":1804,"line_end":1804,"column_start":22,"column_end":26},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":765},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":157736,"byte_end":157740,"line_start":1814,"line_end":1814,"column_start":41,"column_end":45},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":765},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158518,"byte_end":158525,"line_start":1836,"line_end":1836,"column_start":40,"column_end":47},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":779},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":158551,"byte_end":158558,"line_start":1838,"line_end":1838,"column_start":12,"column_end":19},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159278,"byte_end":159286,"line_start":1860,"line_end":1860,"column_start":34,"column_end":42},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":159970,"byte_end":159978,"line_start":1882,"line_end":1882,"column_start":47,"column_end":55},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":802},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160271,"byte_end":160279,"line_start":1895,"line_end":1895,"column_start":56,"column_end":64},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":802},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160419,"byte_end":160427,"line_start":1902,"line_end":1902,"column_start":52,"column_end":60},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":802},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":160503,"byte_end":160511,"line_start":1904,"line_end":1904,"column_start":63,"column_end":71},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":802},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161107,"byte_end":161117,"line_start":1923,"line_end":1923,"column_start":47,"column_end":57},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161410,"byte_end":161420,"line_start":1936,"line_end":1936,"column_start":56,"column_end":66},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161560,"byte_end":161570,"line_start":1943,"line_end":1943,"column_start":52,"column_end":62},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":161639,"byte_end":161649,"line_start":1945,"line_end":1945,"column_start":56,"column_end":66},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162209,"byte_end":162213,"line_start":1965,"line_end":1965,"column_start":22,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162411,"byte_end":162415,"line_start":1974,"line_end":1974,"column_start":34,"column_end":38},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":162939,"byte_end":162945,"line_start":1992,"line_end":1992,"column_start":22,"column_end":28},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163145,"byte_end":163151,"line_start":2001,"line_end":2001,"column_start":34,"column_end":40},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":163677,"byte_end":163682,"line_start":2018,"line_end":2018,"column_start":34,"column_end":39},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":164473,"byte_end":164484,"line_start":2044,"line_end":2044,"column_start":31,"column_end":42},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":895},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":164907,"byte_end":164923,"line_start":2061,"line_end":2061,"column_start":28,"column_end":44},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":910},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":165077,"byte_end":165088,"line_start":2068,"line_end":2068,"column_start":31,"column_end":42},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":895},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":165488,"byte_end":165499,"line_start":2086,"line_end":2086,"column_start":33,"column_end":44},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":895},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":165793,"byte_end":165809,"line_start":2094,"line_end":2094,"column_start":34,"column_end":50},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168005,"byte_end":168024,"line_start":2160,"line_end":2160,"column_start":34,"column_end":53},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":967},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168156,"byte_end":168175,"line_start":2168,"line_end":2168,"column_start":34,"column_end":53},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":967},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":168924,"byte_end":168942,"line_start":2195,"line_end":2195,"column_start":41,"column_end":59},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":948},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":169756,"byte_end":169774,"line_start":2221,"line_end":2221,"column_start":41,"column_end":59},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":948},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":170815,"byte_end":170830,"line_start":2251,"line_end":2251,"column_start":41,"column_end":56},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":994},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":172267,"byte_end":172278,"line_start":2298,"line_end":2298,"column_start":41,"column_end":52},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":955},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":178151,"byte_end":178170,"line_start":2492,"line_end":2492,"column_start":41,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":967},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":182220,"byte_end":182237,"line_start":2610,"line_end":2610,"column_start":41,"column_end":58},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":986},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":184283,"byte_end":184301,"line_start":2678,"line_end":2678,"column_start":47,"column_end":65},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":948},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":184503,"byte_end":184514,"line_start":2684,"line_end":2684,"column_start":61,"column_end":72},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":184873,"byte_end":184892,"line_start":2693,"line_end":2693,"column_start":61,"column_end":80},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":967},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185175,"byte_end":185192,"line_start":2702,"line_end":2702,"column_start":47,"column_end":64},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":986},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":185382,"byte_end":185397,"line_start":2708,"line_end":2708,"column_start":47,"column_end":62},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":994},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186061,"byte_end":186066,"line_start":2731,"line_end":2731,"column_start":61,"column_end":66},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186678,"byte_end":186691,"line_start":2751,"line_end":2751,"column_start":34,"column_end":47},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1136},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186823,"byte_end":186836,"line_start":2759,"line_end":2759,"column_start":34,"column_end":47},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1136},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":186996,"byte_end":187009,"line_start":2768,"line_end":2768,"column_start":61,"column_end":74},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1136},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":187552,"byte_end":187563,"line_start":2787,"line_end":2787,"column_start":54,"column_end":65},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1162},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":188317,"byte_end":188325,"line_start":2811,"line_end":2811,"column_start":9,"column_end":17},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1177},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":188720,"byte_end":188728,"line_start":2826,"line_end":2826,"column_start":24,"column_end":32},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":188995,"byte_end":189003,"line_start":2838,"line_end":2838,"column_start":48,"column_end":56},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1198},"to":{"krate":1,"index":2921}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":189571,"byte_end":189587,"line_start":2858,"line_end":2858,"column_start":45,"column_end":61},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1218},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":189759,"byte_end":189775,"line_start":2867,"line_end":2867,"column_start":45,"column_end":61},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1218},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":189991,"byte_end":190007,"line_start":2878,"line_end":2878,"column_start":9,"column_end":25},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1218},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":190633,"byte_end":190647,"line_start":2899,"line_end":2899,"column_start":9,"column_end":23},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1253},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":191314,"byte_end":191327,"line_start":2916,"line_end":2916,"column_start":61,"column_end":74},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1271},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":191694,"byte_end":191707,"line_start":2927,"line_end":2927,"column_start":9,"column_end":22},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1271},"to":{"krate":1,"index":9611}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":192618,"byte_end":192625,"line_start":2960,"line_end":2960,"column_start":54,"column_end":61},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":568},"to":{"krate":1,"index":7722}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":193413,"byte_end":193417,"line_start":2989,"line_end":2989,"column_start":29,"column_end":33},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":765},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":193988,"byte_end":193992,"line_start":3008,"line_end":3008,"column_start":34,"column_end":38},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":765},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":194146,"byte_end":194150,"line_start":3015,"line_end":3015,"column_start":30,"column_end":34},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":765},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":194193,"byte_end":194200,"line_start":3017,"line_end":3017,"column_start":29,"column_end":36},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":779},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":194783,"byte_end":194790,"line_start":3036,"line_end":3036,"column_start":34,"column_end":41},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":779},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":194943,"byte_end":194950,"line_start":3042,"line_end":3042,"column_start":30,"column_end":37},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":779},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":194991,"byte_end":194998,"line_start":3044,"line_end":3044,"column_start":27,"column_end":34},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":779},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":195226,"byte_end":195234,"line_start":3054,"line_end":3054,"column_start":47,"column_end":55},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":195590,"byte_end":195598,"line_start":3066,"line_end":3066,"column_start":56,"column_end":64},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":195772,"byte_end":195780,"line_start":3072,"line_end":3072,"column_start":52,"column_end":60},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":195856,"byte_end":195864,"line_start":3074,"line_end":3074,"column_start":63,"column_end":71},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":792},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":196029,"byte_end":196033,"line_start":3080,"line_end":3080,"column_start":29,"column_end":33},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":196505,"byte_end":196509,"line_start":3096,"line_end":3096,"column_start":34,"column_end":38},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":196662,"byte_end":196666,"line_start":3102,"line_end":3102,"column_start":30,"column_end":34},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":858},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":196709,"byte_end":196715,"line_start":3104,"line_end":3104,"column_start":29,"column_end":35},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":197187,"byte_end":197193,"line_start":3120,"line_end":3120,"column_start":34,"column_end":40},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":197346,"byte_end":197352,"line_start":3126,"line_end":3126,"column_start":30,"column_end":36},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":871},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":197395,"byte_end":197404,"line_start":3128,"line_end":3128,"column_start":29,"column_end":38},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":943},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":197884,"byte_end":197893,"line_start":3144,"line_end":3144,"column_start":34,"column_end":43},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":943},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198046,"byte_end":198055,"line_start":3150,"line_end":3150,"column_start":30,"column_end":39},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":943},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198103,"byte_end":198112,"line_start":3152,"line_end":3152,"column_start":34,"column_end":43},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":943},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198352,"byte_end":198357,"line_start":3160,"line_end":3160,"column_start":51,"column_end":56},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":884},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198717,"byte_end":198722,"line_start":3172,"line_end":3172,"column_start":56,"column_end":61},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":884},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198900,"byte_end":198905,"line_start":3178,"line_end":3178,"column_start":52,"column_end":57},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":884},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":198952,"byte_end":198957,"line_start":3180,"line_end":3180,"column_start":30,"column_end":35},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":884},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":199208,"byte_end":199213,"line_start":3191,"line_end":3191,"column_start":41,"column_end":46},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206099,"byte_end":206104,"line_start":3425,"line_end":3425,"column_start":50,"column_end":55},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":206886,"byte_end":206899,"line_start":3452,"line_end":3452,"column_start":41,"column_end":54},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":216423,"byte_end":216434,"line_start":3766,"line_end":3766,"column_start":41,"column_end":52},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":218727,"byte_end":218735,"line_start":3853,"line_end":3853,"column_start":56,"column_end":64},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":225926,"byte_end":225934,"line_start":4091,"line_end":4091,"column_start":65,"column_end":73},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":226758,"byte_end":226774,"line_start":4118,"line_end":4118,"column_start":56,"column_end":72},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":236633,"byte_end":236647,"line_start":4440,"line_end":4440,"column_start":56,"column_end":70},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":239218,"byte_end":239225,"line_start":4536,"line_end":4536,"column_start":43,"column_end":50},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":568},"to":{"krate":1,"index":7718}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":239869,"byte_end":239876,"line_start":4556,"line_end":4556,"column_start":37,"column_end":44},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":568},"to":{"krate":1,"index":7731}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/map.rs","byte_start":241355,"byte_end":241362,"line_start":4602,"line_end":4602,"column_start":49,"column_end":56},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":568},"to":{"krate":1,"index":7731}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/scopeguard.rs","byte_start":292901,"byte_end":292911,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1616},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/scopeguard.rs","byte_start":293064,"byte_end":293074,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1616},"to":{"krate":1,"index":3255}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/scopeguard.rs","byte_start":293218,"byte_end":293228,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1616},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":297512,"byte_end":297519,"line_start":119,"line_end":119,"column_start":58,"column_end":65},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1709},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":300081,"byte_end":300088,"line_start":211,"line_end":211,"column_start":34,"column_end":41},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1709},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":304638,"byte_end":304645,"line_start":385,"line_end":385,"column_start":12,"column_end":19},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1709},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":307097,"byte_end":307104,"line_start":453,"line_end":453,"column_start":15,"column_end":22},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1709},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":309886,"byte_end":309893,"line_start":538,"line_end":538,"column_start":15,"column_end":22},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1709},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":328512,"byte_end":328519,"line_start":1106,"line_end":1106,"column_start":29,"column_end":36},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1709},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":328799,"byte_end":328806,"line_start":1121,"line_end":1121,"column_start":22,"column_end":29},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1709},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":328920,"byte_end":328927,"line_start":1129,"line_end":1129,"column_start":30,"column_end":37},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1709},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":329159,"byte_end":329166,"line_start":1139,"line_end":1139,"column_start":46,"column_end":53},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1709},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":329323,"byte_end":329330,"line_start":1148,"line_end":1148,"column_start":35,"column_end":42},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1709},"to":{"krate":1,"index":7718}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":330242,"byte_end":330249,"line_start":1183,"line_end":1183,"column_start":29,"column_end":36},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1709},"to":{"krate":1,"index":7731}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":330847,"byte_end":330854,"line_start":1207,"line_end":1207,"column_start":37,"column_end":44},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1709},"to":{"krate":1,"index":7731}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":331451,"byte_end":331458,"line_start":1231,"line_end":1231,"column_start":27,"column_end":34},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1709},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":338681,"byte_end":338688,"line_start":1483,"line_end":1483,"column_start":51,"column_end":58},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1709},"to":{"krate":1,"index":7722}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":339572,"byte_end":339576,"line_start":1515,"line_end":1515,"column_start":19,"column_end":23},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1855},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":339760,"byte_end":339764,"line_start":1523,"line_end":1523,"column_start":26,"column_end":30},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1855},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":340093,"byte_end":340097,"line_start":1535,"line_end":1535,"column_start":35,"column_end":39},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1855},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":340243,"byte_end":340247,"line_start":1541,"line_end":1541,"column_start":27,"column_end":31},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1855},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":340294,"byte_end":340298,"line_start":1543,"line_end":1543,"column_start":36,"column_end":40},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1855},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":340477,"byte_end":340485,"line_start":1549,"line_end":1549,"column_start":44,"column_end":52},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1859},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":340962,"byte_end":340970,"line_start":1565,"line_end":1565,"column_start":53,"column_end":61},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1859},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":341137,"byte_end":341145,"line_start":1571,"line_end":1571,"column_start":49,"column_end":57},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1859},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":341213,"byte_end":341221,"line_start":1573,"line_end":1573,"column_start":58,"column_end":66},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1859},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":341460,"byte_end":341465,"line_start":1580,"line_end":1580,"column_start":44,"column_end":49},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1863},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":341946,"byte_end":341951,"line_start":1596,"line_end":1596,"column_start":53,"column_end":58},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1863},"to":{"krate":1,"index":7791}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":342122,"byte_end":342127,"line_start":1602,"line_end":1602,"column_start":49,"column_end":54},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1863},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":342199,"byte_end":342204,"line_start":1604,"line_end":1604,"column_start":58,"column_end":63},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1863},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":342450,"byte_end":342461,"line_start":1611,"line_end":1611,"column_start":47,"column_end":58},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1868},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":342797,"byte_end":342808,"line_start":1625,"line_end":1625,"column_start":47,"column_end":58},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1868},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":343250,"byte_end":343261,"line_start":1644,"line_end":1644,"column_start":52,"column_end":63},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1868},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":343354,"byte_end":343366,"line_start":1649,"line_end":1649,"column_start":44,"column_end":56},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1875},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":343591,"byte_end":343603,"line_start":1659,"line_end":1659,"column_start":32,"column_end":44},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1875},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":344173,"byte_end":344185,"line_start":1684,"line_end":1684,"column_start":30,"column_end":42},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1875},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":344442,"byte_end":344454,"line_start":1695,"line_end":1695,"column_start":33,"column_end":45},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1875},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":344586,"byte_end":344596,"line_start":1703,"line_end":1703,"column_start":44,"column_end":54},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1882},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":344819,"byte_end":344829,"line_start":1713,"line_end":1713,"column_start":32,"column_end":42},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1882},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":345403,"byte_end":345413,"line_start":1738,"line_end":1738,"column_start":33,"column_end":43},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1882},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":345531,"byte_end":345541,"line_start":1746,"line_end":1746,"column_start":30,"column_end":40},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1882},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":345809,"byte_end":345828,"line_start":1757,"line_end":1757,"column_start":44,"column_end":63},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":1889},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":346040,"byte_end":346059,"line_start":1766,"line_end":1766,"column_start":32,"column_end":51},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":1889},"to":{"krate":1,"index":7914}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":346463,"byte_end":346482,"line_start":1784,"line_end":1784,"column_start":33,"column_end":52},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1889},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":346600,"byte_end":346619,"line_start":1792,"line_end":1792,"column_start":30,"column_end":49},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1889},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":346887,"byte_end":346892,"line_start":1803,"line_end":1803,"column_start":44,"column_end":49},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1895},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":347091,"byte_end":347096,"line_start":1812,"line_end":1812,"column_start":33,"column_end":38},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1895},"to":{"krate":1,"index":8187}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":347214,"byte_end":347219,"line_start":1820,"line_end":1820,"column_start":30,"column_end":35},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1895},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/kong/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.1/src/set.rs","byte_start":347475,"byte_end":347480,"line_start":1831,"line_end":1831,"column_start":32,"column_end":37},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1895},"to":{"krate":1,"index":7914}}]}